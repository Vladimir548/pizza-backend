generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  fullName         String?
  email            String            @unique
  password         String?
  role             UserRole?         @default(USER)
  verified         DateTime?
  provider         String?
  providerId       String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  cart             Cart?
  orders           Order[]
  verificationCode VerificationCode?
}

model Category {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  value       String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  parameters  Parameters[]  @relation("CategoryParameters")
  proportions Proportions[] @relation("CategoryProportions")
  ingredients Ingredient[]  @relation("CategoryIngredients")
  products    Product[]
}

model Product {
  id             Int              @id @default(autoincrement())
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  image          String
  CartItem       CartItem[]
  category       Category         @relation(fields: [categoryId], references: [id])
  categoryId     Int
  productVariant ProductVariant[]
  ingredients    Ingredient[]     @relation("IngredientToProduct")
}

model ProductVariant {
  id          Int         @id @default(autoincrement())
  parameterId Int?
  quantity    Int?
  productId   Int
  image       String
  doughName   TypeDough?
  cartItems   CartItem[]
  parameter   Parameters? @relation(fields: [parameterId], references: [id])
  product     Product     @relation(fields: [productId], references: [id])
  sizes       Sizes[]
}

model Parameters {
  id             Int              @id @default(autoincrement())
  parameter      String
  categories     Category[]       @relation("CategoryParameters")
  ProductVariant ProductVariant[]
}

model Proportions {
  id         Int        @id @default(autoincrement())
  value      String     @unique
  categories Category[] @relation("CategoryProportions")
  sizes      Sizes[]
}

model Sizes {
  id               Int            @id @default(autoincrement())
  proportion       Proportions    @relation(fields: [sizeId], references: [id])
  sizeId           Int
  price            Int
  weight           Int?
  productVariantId Int
  CartItem         CartItem[]
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
}

model Ingredient {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  price      Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  image      String
  categories Category[] @relation("CategoryIngredients")
  cartItems  CartItem[] @relation("CartItemToIngredient")
  products   Product[]  @relation("IngredientToProduct")
}

model Cart {
  id          Int        @id @default(autoincrement())
  userId      Int        @unique
  totalAmount Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  amountGoods Int        @default(0)
  user        User       @relation(fields: [userId], references: [id])
  items       CartItem[]
}

model CartItem {
  id               Int            @id @default(autoincrement())
  cartId           Int
  productVariantId Int
  productId        Int
  sizeId           Int
  quantity         Int            @default(1)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  cart             Cart           @relation(fields: [cartId], references: [id])
  product          Product        @relation(fields: [productId], references: [id])
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  size             Sizes          @relation(fields: [sizeId], references: [id])
  ingredients      Ingredient[]   @relation("CartItemToIngredient")
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  totalAmount Int
  status      OrderStatus @default(PENDING)
  paymentId   String?
  email       String
  phone       String
  address     String
  comment     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  firstName   String
  lastName    String?
  items       Json
  user        User        @relation(fields: [userId], references: [id])
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  code      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, code])
}

model Story {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  previewImage String
  items        StoryItem[]
}

model StoryItem {
  id        Int      @id @default(autoincrement())
  storyId   Int
  createdAt DateTime @default(now())
  source    String
  story     Story    @relation(fields: [storyId], references: [id])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum TypeDough {
  TRADITIONAL
  THIN
}

enum UserRole {
  USER
  ADMIN
}
