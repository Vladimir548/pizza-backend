generator client {
  provider = "prisma-client-js"
  output   = "./__generated__"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model User {
  id                 Int               @id @default(autoincrement())
  fullName           String?
  email              String            @unique
  password           String?
  role               UserRole?         @default(REGULAR)
  isVerified         Boolean           @default(false) @map("is_verified")
  isTwoFactorEnabled Boolean           @default(false) @map("is_two_factor_enabled")
  picture            String?
  method             AuthMethod
  phone              String?
  accounts           Account[]
  createdAt          DateTime          @default(now()) @map("created_at")
  updatedAt          DateTime          @updatedAt @map("updated_at")
  cart               Cart?
  orders             Order[]
  verificationCode   VerificationCode?
  deliveryAddress    DeliveryAddress[]

  @@map("users")
}

model Account {
  id String @id @default(uuid())

  type     String
  provider String

  refreshToken String? @map("refresh_token")
  accessToken  String? @map("access_token")
  expiresAt    Int     @map("expires_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @map("user_id")

  @@map("accounts")
}

model Token {
  id String @id @default(uuid())

  email     String
  token     String    @unique
  type      TokenType
  expiresIn DateTime  @map("expires_in")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("tokens")
}

enum UserRole {
  REGULAR
  ADMIN
}

enum AuthMethod {
  CREDENTIALS
  GOOGLE
  YANDEX
}

enum TokenType {
  VERIFICATION
  TWO_FACTOR
  PASSWORD_RESET
}

model Category {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  slug         String         @unique
  type         TypeProduct
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  parameters   Parameters[]   @relation("CategoryParameters")
  proportions  Proportions[]  @relation("CategoryProportions")
  ingredients  Ingredient[]   @relation("CategoryIngredients")
  products     Product[]
  variantTypes VariantTypes[] @relation("CategoryVariantTypes")
}

model Product {
  id             Int              @id @default(autoincrement())
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  image          String
  description    String?
  ingredients    Ingredient[]     @relation("ProductIngredients")
  CartItem       CartItem[]
  category       Category         @relation(fields: [categoryId], references: [id])
  categoryId     Int
  type           TypeProduct
  productVariant ProductVariant[]
  price          Int?
  subProduct     SubProduct[]     @relation("SubProductRelation")
  CartSubProduct CartSubProduct[]
}

model ProductVariant {
  id               Int               @id @default(autoincrement())
  parameterId      Int?
  quantity         Int?
  productId        Int
  image            String
  parameter        Parameters?       @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  sizes            Sizes[]
  productAttribute ProductAttribute?
  Product          Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  subProduct       SubProduct[]      @relation("ParentVariant")
  priceKit         Int?
  parentSubProduct SubProduct[]
  CartItem         CartItem[]
  CartSubProduct   CartSubProduct[]
}

model SubProduct {
  id              Int            @id @default(autoincrement())
  product         Product        @relation("SubProductRelation", fields: [productId], references: [id], onDelete: Cascade)
  productId       Int
  variantId       Int
  variant         ProductVariant @relation(fields: [variantId], references: [id])
  parentVariantId Int
  parentVariant   ProductVariant @relation("ParentVariant", fields: [parentVariantId], references: [id], onDelete: Cascade)
  size            Sizes          @relation(fields: [subSizeId], references: [id])
  subSizeId       Int
  quantity        Int?
  isReplace       Boolean        @default(true)
  createdAt       DateTime       @default(now())
}

model ProductAttribute {
  id               Int            @id @default(autoincrement())
  name             String?
  productVariantId Int            @unique
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  variantTypesId   Int?
  variantTypes     VariantTypes?  @relation(fields: [variantTypesId], references: [id], onDelete: Cascade)
}

model VariantTypes {
  id               Int                @id @default(autoincrement())
  value            String             @unique
  categories       Category[]         @relation("CategoryVariantTypes")
  typeProduct      TypeProduct
  productAttribute ProductAttribute[]
}

model Parameters {
  id             Int              @id @default(autoincrement())
  parameter      String
  categories     Category[]       @relation("CategoryParameters")
  ProductVariant ProductVariant[]
}

model Proportions {
  id         Int        @id @default(autoincrement())
  value      String     @unique
  categories Category[] @relation("CategoryProportions")
  sizes      Sizes[]
}

model Sizes {
  id               Int              @id @default(autoincrement())
  proportion       Proportions      @relation(fields: [proportionId], references: [id])
  proportionId     Int
  price            Int
  weight           String?
  productVariantId Int
  ingredients      Ingredient[]     @relation("IngredientToSizes")
  productVariant   ProductVariant   @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  SubProduct       SubProduct[]
  quantity         Int?
  CartItem         CartItem[]
  CartSubProduct   CartSubProduct[]
}

model Ingredient {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  price      Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  image      String
  categories Category[] @relation("CategoryIngredients")
  sizes      Sizes[]    @relation("IngredientToSizes")
  product    Product[]  @relation("ProductIngredients")
  cartItems  CartItem[] @relation("CartItemToIngredient")
}

model Cart {
  id          Int        @id @default(autoincrement())
  userId      Int        @unique
  totalAmount Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  amountGoods Int        @default(0)
  user        User       @relation(fields: [userId], references: [id])
  items       CartItem[]
}

model CartItem {
  id               Int              @id @default(autoincrement())
  cartId           Int
  productVariantId Int?
  productId        Int
  sizeId           Int?
  quantity         Int              @default(1)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  cart             Cart             @relation(fields: [cartId], references: [id])
  product          Product          @relation(fields: [productId], references: [id])
  productVariant   ProductVariant?  @relation(fields: [productVariantId], references: [id])
  size             Sizes?           @relation(fields: [sizeId], references: [id])
  ingredients      Ingredient[]     @relation("CartItemToIngredient")
  cartSubProduct   CartSubProduct[]
}

model CartSubProduct {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  subProductId Int
  sizeId       Int
  variantId    Int
  cartItemId   Int
  product      Product        @relation(fields: [subProductId], references: [id])
  variant      ProductVariant @relation(fields: [variantId], references: [id])
  size         Sizes          @relation(fields: [sizeId], references: [id])
  cartItem     CartItem       @relation(fields: [cartItemId], references: [id], onDelete: Cascade)
  index        Int
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  totalAmount Int
  status      OrderStatus @default(PENDING)
  paymentId   String?
  email       String
  phone       String
  address     String
  comment     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  firstName   String
  items       Json
  user        User        @relation(fields: [userId], references: [id])
}

model DeliveryAddress {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  address   String
  isDefault Boolean @default(false)
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  code      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, code])
}

model Story {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  previewImage String
  items        StoryItem[]
}

model StoryItem {
  id        Int      @id @default(autoincrement())
  storyId   Int
  createdAt DateTime @default(now())
  source    String
  story     Story    @relation(fields: [storyId], references: [id])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum TypeDough {
  TRADITIONAL
  THIN
}

enum TypeProduct {
  PIZZA
  DRINKS
  SNACKS
  DESSERTS
  COMBO
  SAUCES
  PIZZA_HALF
}
