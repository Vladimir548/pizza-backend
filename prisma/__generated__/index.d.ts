
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Token
 * 
 */
export type Token = $Result.DefaultSelection<Prisma.$TokenPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model ProductVariant
 * 
 */
export type ProductVariant = $Result.DefaultSelection<Prisma.$ProductVariantPayload>
/**
 * Model SubProduct
 * 
 */
export type SubProduct = $Result.DefaultSelection<Prisma.$SubProductPayload>
/**
 * Model ProductAttribute
 * 
 */
export type ProductAttribute = $Result.DefaultSelection<Prisma.$ProductAttributePayload>
/**
 * Model VariantTypes
 * 
 */
export type VariantTypes = $Result.DefaultSelection<Prisma.$VariantTypesPayload>
/**
 * Model Parameters
 * 
 */
export type Parameters = $Result.DefaultSelection<Prisma.$ParametersPayload>
/**
 * Model Proportions
 * 
 */
export type Proportions = $Result.DefaultSelection<Prisma.$ProportionsPayload>
/**
 * Model Sizes
 * 
 */
export type Sizes = $Result.DefaultSelection<Prisma.$SizesPayload>
/**
 * Model Ingredient
 * 
 */
export type Ingredient = $Result.DefaultSelection<Prisma.$IngredientPayload>
/**
 * Model Cart
 * 
 */
export type Cart = $Result.DefaultSelection<Prisma.$CartPayload>
/**
 * Model CartItem
 * 
 */
export type CartItem = $Result.DefaultSelection<Prisma.$CartItemPayload>
/**
 * Model CartSubProduct
 * 
 */
export type CartSubProduct = $Result.DefaultSelection<Prisma.$CartSubProductPayload>
/**
 * Model Order
 * 
 */
export type Order = $Result.DefaultSelection<Prisma.$OrderPayload>
/**
 * Model DeliveryAddress
 * 
 */
export type DeliveryAddress = $Result.DefaultSelection<Prisma.$DeliveryAddressPayload>
/**
 * Model VerificationCode
 * 
 */
export type VerificationCode = $Result.DefaultSelection<Prisma.$VerificationCodePayload>
/**
 * Model Story
 * 
 */
export type Story = $Result.DefaultSelection<Prisma.$StoryPayload>
/**
 * Model StoryItem
 * 
 */
export type StoryItem = $Result.DefaultSelection<Prisma.$StoryItemPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  REGULAR: 'REGULAR',
  ADMIN: 'ADMIN'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const AuthMethod: {
  CREDENTIALS: 'CREDENTIALS',
  GOOGLE: 'GOOGLE',
  YANDEX: 'YANDEX'
};

export type AuthMethod = (typeof AuthMethod)[keyof typeof AuthMethod]


export const TokenType: {
  VERIFICATION: 'VERIFICATION',
  TWO_FACTOR: 'TWO_FACTOR',
  PASSWORD_RESET: 'PASSWORD_RESET'
};

export type TokenType = (typeof TokenType)[keyof typeof TokenType]


export const OrderStatus: {
  PENDING: 'PENDING',
  SUCCEEDED: 'SUCCEEDED',
  CANCELLED: 'CANCELLED'
};

export type OrderStatus = (typeof OrderStatus)[keyof typeof OrderStatus]


export const TypeDough: {
  TRADITIONAL: 'TRADITIONAL',
  THIN: 'THIN'
};

export type TypeDough = (typeof TypeDough)[keyof typeof TypeDough]


export const TypeProduct: {
  PIZZA: 'PIZZA',
  DRINKS: 'DRINKS',
  SNACKS: 'SNACKS',
  DESSERTS: 'DESSERTS',
  COMBO: 'COMBO',
  SAUCES: 'SAUCES',
  PIZZA_HALF: 'PIZZA_HALF'
};

export type TypeProduct = (typeof TypeProduct)[keyof typeof TypeProduct]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type AuthMethod = $Enums.AuthMethod

export const AuthMethod: typeof $Enums.AuthMethod

export type TokenType = $Enums.TokenType

export const TokenType: typeof $Enums.TokenType

export type OrderStatus = $Enums.OrderStatus

export const OrderStatus: typeof $Enums.OrderStatus

export type TypeDough = $Enums.TypeDough

export const TypeDough: typeof $Enums.TypeDough

export type TypeProduct = $Enums.TypeProduct

export const TypeProduct: typeof $Enums.TypeProduct

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.token`: Exposes CRUD operations for the **Token** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tokens
    * const tokens = await prisma.token.findMany()
    * ```
    */
  get token(): Prisma.TokenDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productVariant`: Exposes CRUD operations for the **ProductVariant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductVariants
    * const productVariants = await prisma.productVariant.findMany()
    * ```
    */
  get productVariant(): Prisma.ProductVariantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subProduct`: Exposes CRUD operations for the **SubProduct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubProducts
    * const subProducts = await prisma.subProduct.findMany()
    * ```
    */
  get subProduct(): Prisma.SubProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productAttribute`: Exposes CRUD operations for the **ProductAttribute** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductAttributes
    * const productAttributes = await prisma.productAttribute.findMany()
    * ```
    */
  get productAttribute(): Prisma.ProductAttributeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.variantTypes`: Exposes CRUD operations for the **VariantTypes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VariantTypes
    * const variantTypes = await prisma.variantTypes.findMany()
    * ```
    */
  get variantTypes(): Prisma.VariantTypesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.parameters`: Exposes CRUD operations for the **Parameters** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Parameters
    * const parameters = await prisma.parameters.findMany()
    * ```
    */
  get parameters(): Prisma.ParametersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.proportions`: Exposes CRUD operations for the **Proportions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Proportions
    * const proportions = await prisma.proportions.findMany()
    * ```
    */
  get proportions(): Prisma.ProportionsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sizes`: Exposes CRUD operations for the **Sizes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sizes
    * const sizes = await prisma.sizes.findMany()
    * ```
    */
  get sizes(): Prisma.SizesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.ingredient`: Exposes CRUD operations for the **Ingredient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ingredients
    * const ingredients = await prisma.ingredient.findMany()
    * ```
    */
  get ingredient(): Prisma.IngredientDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cart`: Exposes CRUD operations for the **Cart** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Carts
    * const carts = await prisma.cart.findMany()
    * ```
    */
  get cart(): Prisma.CartDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cartItem`: Exposes CRUD operations for the **CartItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CartItems
    * const cartItems = await prisma.cartItem.findMany()
    * ```
    */
  get cartItem(): Prisma.CartItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cartSubProduct`: Exposes CRUD operations for the **CartSubProduct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CartSubProducts
    * const cartSubProducts = await prisma.cartSubProduct.findMany()
    * ```
    */
  get cartSubProduct(): Prisma.CartSubProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.order`: Exposes CRUD operations for the **Order** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.order.findMany()
    * ```
    */
  get order(): Prisma.OrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.deliveryAddress`: Exposes CRUD operations for the **DeliveryAddress** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DeliveryAddresses
    * const deliveryAddresses = await prisma.deliveryAddress.findMany()
    * ```
    */
  get deliveryAddress(): Prisma.DeliveryAddressDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verificationCode`: Exposes CRUD operations for the **VerificationCode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationCodes
    * const verificationCodes = await prisma.verificationCode.findMany()
    * ```
    */
  get verificationCode(): Prisma.VerificationCodeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.story`: Exposes CRUD operations for the **Story** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stories
    * const stories = await prisma.story.findMany()
    * ```
    */
  get story(): Prisma.StoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.storyItem`: Exposes CRUD operations for the **StoryItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StoryItems
    * const storyItems = await prisma.storyItem.findMany()
    * ```
    */
  get storyItem(): Prisma.StoryItemDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.4.1
   * Query Engine version: a9055b89e58b4b5bfb59600785423b1db3d0e75d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Account: 'Account',
    Token: 'Token',
    Category: 'Category',
    Product: 'Product',
    ProductVariant: 'ProductVariant',
    SubProduct: 'SubProduct',
    ProductAttribute: 'ProductAttribute',
    VariantTypes: 'VariantTypes',
    Parameters: 'Parameters',
    Proportions: 'Proportions',
    Sizes: 'Sizes',
    Ingredient: 'Ingredient',
    Cart: 'Cart',
    CartItem: 'CartItem',
    CartSubProduct: 'CartSubProduct',
    Order: 'Order',
    DeliveryAddress: 'DeliveryAddress',
    VerificationCode: 'VerificationCode',
    Story: 'Story',
    StoryItem: 'StoryItem'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "account" | "token" | "category" | "product" | "productVariant" | "subProduct" | "productAttribute" | "variantTypes" | "parameters" | "proportions" | "sizes" | "ingredient" | "cart" | "cartItem" | "cartSubProduct" | "order" | "deliveryAddress" | "verificationCode" | "story" | "storyItem"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Token: {
        payload: Prisma.$TokenPayload<ExtArgs>
        fields: Prisma.TokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          findFirst: {
            args: Prisma.TokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          findMany: {
            args: Prisma.TokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>[]
          }
          create: {
            args: Prisma.TokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          createMany: {
            args: Prisma.TokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>[]
          }
          delete: {
            args: Prisma.TokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          update: {
            args: Prisma.TokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          deleteMany: {
            args: Prisma.TokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>[]
          }
          upsert: {
            args: Prisma.TokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TokenPayload>
          }
          aggregate: {
            args: Prisma.TokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateToken>
          }
          groupBy: {
            args: Prisma.TokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<TokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.TokenCountArgs<ExtArgs>
            result: $Utils.Optional<TokenCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      ProductVariant: {
        payload: Prisma.$ProductVariantPayload<ExtArgs>
        fields: Prisma.ProductVariantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductVariantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductVariantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>
          }
          findFirst: {
            args: Prisma.ProductVariantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductVariantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>
          }
          findMany: {
            args: Prisma.ProductVariantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>[]
          }
          create: {
            args: Prisma.ProductVariantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>
          }
          createMany: {
            args: Prisma.ProductVariantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductVariantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>[]
          }
          delete: {
            args: Prisma.ProductVariantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>
          }
          update: {
            args: Prisma.ProductVariantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>
          }
          deleteMany: {
            args: Prisma.ProductVariantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductVariantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductVariantUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>[]
          }
          upsert: {
            args: Prisma.ProductVariantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductVariantPayload>
          }
          aggregate: {
            args: Prisma.ProductVariantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductVariant>
          }
          groupBy: {
            args: Prisma.ProductVariantGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductVariantGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductVariantCountArgs<ExtArgs>
            result: $Utils.Optional<ProductVariantCountAggregateOutputType> | number
          }
        }
      }
      SubProduct: {
        payload: Prisma.$SubProductPayload<ExtArgs>
        fields: Prisma.SubProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubProductPayload>
          }
          findFirst: {
            args: Prisma.SubProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubProductPayload>
          }
          findMany: {
            args: Prisma.SubProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubProductPayload>[]
          }
          create: {
            args: Prisma.SubProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubProductPayload>
          }
          createMany: {
            args: Prisma.SubProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubProductPayload>[]
          }
          delete: {
            args: Prisma.SubProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubProductPayload>
          }
          update: {
            args: Prisma.SubProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubProductPayload>
          }
          deleteMany: {
            args: Prisma.SubProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubProductPayload>[]
          }
          upsert: {
            args: Prisma.SubProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubProductPayload>
          }
          aggregate: {
            args: Prisma.SubProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubProduct>
          }
          groupBy: {
            args: Prisma.SubProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubProductCountArgs<ExtArgs>
            result: $Utils.Optional<SubProductCountAggregateOutputType> | number
          }
        }
      }
      ProductAttribute: {
        payload: Prisma.$ProductAttributePayload<ExtArgs>
        fields: Prisma.ProductAttributeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductAttributeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAttributePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductAttributeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAttributePayload>
          }
          findFirst: {
            args: Prisma.ProductAttributeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAttributePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductAttributeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAttributePayload>
          }
          findMany: {
            args: Prisma.ProductAttributeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAttributePayload>[]
          }
          create: {
            args: Prisma.ProductAttributeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAttributePayload>
          }
          createMany: {
            args: Prisma.ProductAttributeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductAttributeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAttributePayload>[]
          }
          delete: {
            args: Prisma.ProductAttributeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAttributePayload>
          }
          update: {
            args: Prisma.ProductAttributeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAttributePayload>
          }
          deleteMany: {
            args: Prisma.ProductAttributeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductAttributeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductAttributeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAttributePayload>[]
          }
          upsert: {
            args: Prisma.ProductAttributeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductAttributePayload>
          }
          aggregate: {
            args: Prisma.ProductAttributeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductAttribute>
          }
          groupBy: {
            args: Prisma.ProductAttributeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductAttributeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductAttributeCountArgs<ExtArgs>
            result: $Utils.Optional<ProductAttributeCountAggregateOutputType> | number
          }
        }
      }
      VariantTypes: {
        payload: Prisma.$VariantTypesPayload<ExtArgs>
        fields: Prisma.VariantTypesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VariantTypesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantTypesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VariantTypesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantTypesPayload>
          }
          findFirst: {
            args: Prisma.VariantTypesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantTypesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VariantTypesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantTypesPayload>
          }
          findMany: {
            args: Prisma.VariantTypesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantTypesPayload>[]
          }
          create: {
            args: Prisma.VariantTypesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantTypesPayload>
          }
          createMany: {
            args: Prisma.VariantTypesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VariantTypesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantTypesPayload>[]
          }
          delete: {
            args: Prisma.VariantTypesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantTypesPayload>
          }
          update: {
            args: Prisma.VariantTypesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantTypesPayload>
          }
          deleteMany: {
            args: Prisma.VariantTypesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VariantTypesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VariantTypesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantTypesPayload>[]
          }
          upsert: {
            args: Prisma.VariantTypesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VariantTypesPayload>
          }
          aggregate: {
            args: Prisma.VariantTypesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVariantTypes>
          }
          groupBy: {
            args: Prisma.VariantTypesGroupByArgs<ExtArgs>
            result: $Utils.Optional<VariantTypesGroupByOutputType>[]
          }
          count: {
            args: Prisma.VariantTypesCountArgs<ExtArgs>
            result: $Utils.Optional<VariantTypesCountAggregateOutputType> | number
          }
        }
      }
      Parameters: {
        payload: Prisma.$ParametersPayload<ExtArgs>
        fields: Prisma.ParametersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParametersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParametersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametersPayload>
          }
          findFirst: {
            args: Prisma.ParametersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParametersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametersPayload>
          }
          findMany: {
            args: Prisma.ParametersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametersPayload>[]
          }
          create: {
            args: Prisma.ParametersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametersPayload>
          }
          createMany: {
            args: Prisma.ParametersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ParametersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametersPayload>[]
          }
          delete: {
            args: Prisma.ParametersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametersPayload>
          }
          update: {
            args: Prisma.ParametersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametersPayload>
          }
          deleteMany: {
            args: Prisma.ParametersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ParametersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ParametersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametersPayload>[]
          }
          upsert: {
            args: Prisma.ParametersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParametersPayload>
          }
          aggregate: {
            args: Prisma.ParametersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParameters>
          }
          groupBy: {
            args: Prisma.ParametersGroupByArgs<ExtArgs>
            result: $Utils.Optional<ParametersGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParametersCountArgs<ExtArgs>
            result: $Utils.Optional<ParametersCountAggregateOutputType> | number
          }
        }
      }
      Proportions: {
        payload: Prisma.$ProportionsPayload<ExtArgs>
        fields: Prisma.ProportionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProportionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProportionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProportionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProportionsPayload>
          }
          findFirst: {
            args: Prisma.ProportionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProportionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProportionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProportionsPayload>
          }
          findMany: {
            args: Prisma.ProportionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProportionsPayload>[]
          }
          create: {
            args: Prisma.ProportionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProportionsPayload>
          }
          createMany: {
            args: Prisma.ProportionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProportionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProportionsPayload>[]
          }
          delete: {
            args: Prisma.ProportionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProportionsPayload>
          }
          update: {
            args: Prisma.ProportionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProportionsPayload>
          }
          deleteMany: {
            args: Prisma.ProportionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProportionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProportionsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProportionsPayload>[]
          }
          upsert: {
            args: Prisma.ProportionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProportionsPayload>
          }
          aggregate: {
            args: Prisma.ProportionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProportions>
          }
          groupBy: {
            args: Prisma.ProportionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProportionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProportionsCountArgs<ExtArgs>
            result: $Utils.Optional<ProportionsCountAggregateOutputType> | number
          }
        }
      }
      Sizes: {
        payload: Prisma.$SizesPayload<ExtArgs>
        fields: Prisma.SizesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SizesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SizesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizesPayload>
          }
          findFirst: {
            args: Prisma.SizesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SizesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizesPayload>
          }
          findMany: {
            args: Prisma.SizesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizesPayload>[]
          }
          create: {
            args: Prisma.SizesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizesPayload>
          }
          createMany: {
            args: Prisma.SizesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SizesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizesPayload>[]
          }
          delete: {
            args: Prisma.SizesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizesPayload>
          }
          update: {
            args: Prisma.SizesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizesPayload>
          }
          deleteMany: {
            args: Prisma.SizesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SizesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SizesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizesPayload>[]
          }
          upsert: {
            args: Prisma.SizesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SizesPayload>
          }
          aggregate: {
            args: Prisma.SizesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSizes>
          }
          groupBy: {
            args: Prisma.SizesGroupByArgs<ExtArgs>
            result: $Utils.Optional<SizesGroupByOutputType>[]
          }
          count: {
            args: Prisma.SizesCountArgs<ExtArgs>
            result: $Utils.Optional<SizesCountAggregateOutputType> | number
          }
        }
      }
      Ingredient: {
        payload: Prisma.$IngredientPayload<ExtArgs>
        fields: Prisma.IngredientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IngredientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IngredientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          findFirst: {
            args: Prisma.IngredientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IngredientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          findMany: {
            args: Prisma.IngredientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>[]
          }
          create: {
            args: Prisma.IngredientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          createMany: {
            args: Prisma.IngredientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IngredientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>[]
          }
          delete: {
            args: Prisma.IngredientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          update: {
            args: Prisma.IngredientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          deleteMany: {
            args: Prisma.IngredientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IngredientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.IngredientUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>[]
          }
          upsert: {
            args: Prisma.IngredientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IngredientPayload>
          }
          aggregate: {
            args: Prisma.IngredientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIngredient>
          }
          groupBy: {
            args: Prisma.IngredientGroupByArgs<ExtArgs>
            result: $Utils.Optional<IngredientGroupByOutputType>[]
          }
          count: {
            args: Prisma.IngredientCountArgs<ExtArgs>
            result: $Utils.Optional<IngredientCountAggregateOutputType> | number
          }
        }
      }
      Cart: {
        payload: Prisma.$CartPayload<ExtArgs>
        fields: Prisma.CartFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CartFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CartFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload>
          }
          findFirst: {
            args: Prisma.CartFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CartFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload>
          }
          findMany: {
            args: Prisma.CartFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload>[]
          }
          create: {
            args: Prisma.CartCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload>
          }
          createMany: {
            args: Prisma.CartCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CartCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload>[]
          }
          delete: {
            args: Prisma.CartDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload>
          }
          update: {
            args: Prisma.CartUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload>
          }
          deleteMany: {
            args: Prisma.CartDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CartUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CartUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload>[]
          }
          upsert: {
            args: Prisma.CartUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartPayload>
          }
          aggregate: {
            args: Prisma.CartAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCart>
          }
          groupBy: {
            args: Prisma.CartGroupByArgs<ExtArgs>
            result: $Utils.Optional<CartGroupByOutputType>[]
          }
          count: {
            args: Prisma.CartCountArgs<ExtArgs>
            result: $Utils.Optional<CartCountAggregateOutputType> | number
          }
        }
      }
      CartItem: {
        payload: Prisma.$CartItemPayload<ExtArgs>
        fields: Prisma.CartItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CartItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CartItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          findFirst: {
            args: Prisma.CartItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CartItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          findMany: {
            args: Prisma.CartItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>[]
          }
          create: {
            args: Prisma.CartItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          createMany: {
            args: Prisma.CartItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CartItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>[]
          }
          delete: {
            args: Prisma.CartItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          update: {
            args: Prisma.CartItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          deleteMany: {
            args: Prisma.CartItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CartItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CartItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>[]
          }
          upsert: {
            args: Prisma.CartItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartItemPayload>
          }
          aggregate: {
            args: Prisma.CartItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCartItem>
          }
          groupBy: {
            args: Prisma.CartItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<CartItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.CartItemCountArgs<ExtArgs>
            result: $Utils.Optional<CartItemCountAggregateOutputType> | number
          }
        }
      }
      CartSubProduct: {
        payload: Prisma.$CartSubProductPayload<ExtArgs>
        fields: Prisma.CartSubProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CartSubProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartSubProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CartSubProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartSubProductPayload>
          }
          findFirst: {
            args: Prisma.CartSubProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartSubProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CartSubProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartSubProductPayload>
          }
          findMany: {
            args: Prisma.CartSubProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartSubProductPayload>[]
          }
          create: {
            args: Prisma.CartSubProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartSubProductPayload>
          }
          createMany: {
            args: Prisma.CartSubProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CartSubProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartSubProductPayload>[]
          }
          delete: {
            args: Prisma.CartSubProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartSubProductPayload>
          }
          update: {
            args: Prisma.CartSubProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartSubProductPayload>
          }
          deleteMany: {
            args: Prisma.CartSubProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CartSubProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CartSubProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartSubProductPayload>[]
          }
          upsert: {
            args: Prisma.CartSubProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CartSubProductPayload>
          }
          aggregate: {
            args: Prisma.CartSubProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCartSubProduct>
          }
          groupBy: {
            args: Prisma.CartSubProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<CartSubProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.CartSubProductCountArgs<ExtArgs>
            result: $Utils.Optional<CartSubProductCountAggregateOutputType> | number
          }
        }
      }
      Order: {
        payload: Prisma.$OrderPayload<ExtArgs>
        fields: Prisma.OrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findFirst: {
            args: Prisma.OrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          findMany: {
            args: Prisma.OrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          create: {
            args: Prisma.OrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          createMany: {
            args: Prisma.OrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          delete: {
            args: Prisma.OrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          update: {
            args: Prisma.OrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          deleteMany: {
            args: Prisma.OrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>[]
          }
          upsert: {
            args: Prisma.OrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrderPayload>
          }
          aggregate: {
            args: Prisma.OrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrder>
          }
          groupBy: {
            args: Prisma.OrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrderCountArgs<ExtArgs>
            result: $Utils.Optional<OrderCountAggregateOutputType> | number
          }
        }
      }
      DeliveryAddress: {
        payload: Prisma.$DeliveryAddressPayload<ExtArgs>
        fields: Prisma.DeliveryAddressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DeliveryAddressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryAddressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DeliveryAddressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryAddressPayload>
          }
          findFirst: {
            args: Prisma.DeliveryAddressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryAddressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DeliveryAddressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryAddressPayload>
          }
          findMany: {
            args: Prisma.DeliveryAddressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryAddressPayload>[]
          }
          create: {
            args: Prisma.DeliveryAddressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryAddressPayload>
          }
          createMany: {
            args: Prisma.DeliveryAddressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DeliveryAddressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryAddressPayload>[]
          }
          delete: {
            args: Prisma.DeliveryAddressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryAddressPayload>
          }
          update: {
            args: Prisma.DeliveryAddressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryAddressPayload>
          }
          deleteMany: {
            args: Prisma.DeliveryAddressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DeliveryAddressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DeliveryAddressUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryAddressPayload>[]
          }
          upsert: {
            args: Prisma.DeliveryAddressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DeliveryAddressPayload>
          }
          aggregate: {
            args: Prisma.DeliveryAddressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDeliveryAddress>
          }
          groupBy: {
            args: Prisma.DeliveryAddressGroupByArgs<ExtArgs>
            result: $Utils.Optional<DeliveryAddressGroupByOutputType>[]
          }
          count: {
            args: Prisma.DeliveryAddressCountArgs<ExtArgs>
            result: $Utils.Optional<DeliveryAddressCountAggregateOutputType> | number
          }
        }
      }
      VerificationCode: {
        payload: Prisma.$VerificationCodePayload<ExtArgs>
        fields: Prisma.VerificationCodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationCodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationCodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationCodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationCodePayload>
          }
          findFirst: {
            args: Prisma.VerificationCodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationCodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationCodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationCodePayload>
          }
          findMany: {
            args: Prisma.VerificationCodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationCodePayload>[]
          }
          create: {
            args: Prisma.VerificationCodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationCodePayload>
          }
          createMany: {
            args: Prisma.VerificationCodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationCodeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationCodePayload>[]
          }
          delete: {
            args: Prisma.VerificationCodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationCodePayload>
          }
          update: {
            args: Prisma.VerificationCodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationCodePayload>
          }
          deleteMany: {
            args: Prisma.VerificationCodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationCodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationCodeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationCodePayload>[]
          }
          upsert: {
            args: Prisma.VerificationCodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationCodePayload>
          }
          aggregate: {
            args: Prisma.VerificationCodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationCode>
          }
          groupBy: {
            args: Prisma.VerificationCodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationCodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationCodeCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationCodeCountAggregateOutputType> | number
          }
        }
      }
      Story: {
        payload: Prisma.$StoryPayload<ExtArgs>
        fields: Prisma.StoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>
          }
          findFirst: {
            args: Prisma.StoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>
          }
          findMany: {
            args: Prisma.StoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>[]
          }
          create: {
            args: Prisma.StoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>
          }
          createMany: {
            args: Prisma.StoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>[]
          }
          delete: {
            args: Prisma.StoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>
          }
          update: {
            args: Prisma.StoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>
          }
          deleteMany: {
            args: Prisma.StoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>[]
          }
          upsert: {
            args: Prisma.StoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>
          }
          aggregate: {
            args: Prisma.StoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStory>
          }
          groupBy: {
            args: Prisma.StoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<StoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.StoryCountArgs<ExtArgs>
            result: $Utils.Optional<StoryCountAggregateOutputType> | number
          }
        }
      }
      StoryItem: {
        payload: Prisma.$StoryItemPayload<ExtArgs>
        fields: Prisma.StoryItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StoryItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StoryItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryItemPayload>
          }
          findFirst: {
            args: Prisma.StoryItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StoryItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryItemPayload>
          }
          findMany: {
            args: Prisma.StoryItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryItemPayload>[]
          }
          create: {
            args: Prisma.StoryItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryItemPayload>
          }
          createMany: {
            args: Prisma.StoryItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StoryItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryItemPayload>[]
          }
          delete: {
            args: Prisma.StoryItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryItemPayload>
          }
          update: {
            args: Prisma.StoryItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryItemPayload>
          }
          deleteMany: {
            args: Prisma.StoryItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StoryItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StoryItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryItemPayload>[]
          }
          upsert: {
            args: Prisma.StoryItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StoryItemPayload>
          }
          aggregate: {
            args: Prisma.StoryItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStoryItem>
          }
          groupBy: {
            args: Prisma.StoryItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<StoryItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.StoryItemCountArgs<ExtArgs>
            result: $Utils.Optional<StoryItemCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    account?: AccountOmit
    token?: TokenOmit
    category?: CategoryOmit
    product?: ProductOmit
    productVariant?: ProductVariantOmit
    subProduct?: SubProductOmit
    productAttribute?: ProductAttributeOmit
    variantTypes?: VariantTypesOmit
    parameters?: ParametersOmit
    proportions?: ProportionsOmit
    sizes?: SizesOmit
    ingredient?: IngredientOmit
    cart?: CartOmit
    cartItem?: CartItemOmit
    cartSubProduct?: CartSubProductOmit
    order?: OrderOmit
    deliveryAddress?: DeliveryAddressOmit
    verificationCode?: VerificationCodeOmit
    story?: StoryOmit
    storyItem?: StoryItemOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    orders: number
    deliveryAddress: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    orders?: boolean | UserCountOutputTypeCountOrdersArgs
    deliveryAddress?: boolean | UserCountOutputTypeCountDeliveryAddressArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDeliveryAddressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeliveryAddressWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    parameters: number
    proportions: number
    ingredients: number
    products: number
    variantTypes: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parameters?: boolean | CategoryCountOutputTypeCountParametersArgs
    proportions?: boolean | CategoryCountOutputTypeCountProportionsArgs
    ingredients?: boolean | CategoryCountOutputTypeCountIngredientsArgs
    products?: boolean | CategoryCountOutputTypeCountProductsArgs
    variantTypes?: boolean | CategoryCountOutputTypeCountVariantTypesArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountParametersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParametersWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountProportionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProportionsWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountIngredientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IngredientWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountVariantTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VariantTypesWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    ingredients: number
    CartItem: number
    productVariant: number
    subProduct: number
    CartSubProduct: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ingredients?: boolean | ProductCountOutputTypeCountIngredientsArgs
    CartItem?: boolean | ProductCountOutputTypeCountCartItemArgs
    productVariant?: boolean | ProductCountOutputTypeCountProductVariantArgs
    subProduct?: boolean | ProductCountOutputTypeCountSubProductArgs
    CartSubProduct?: boolean | ProductCountOutputTypeCountCartSubProductArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountIngredientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IngredientWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountCartItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartItemWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountProductVariantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductVariantWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountSubProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubProductWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountCartSubProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartSubProductWhereInput
  }


  /**
   * Count Type ProductVariantCountOutputType
   */

  export type ProductVariantCountOutputType = {
    sizes: number
    subProduct: number
    parentSubProduct: number
    CartItem: number
    CartSubProduct: number
  }

  export type ProductVariantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sizes?: boolean | ProductVariantCountOutputTypeCountSizesArgs
    subProduct?: boolean | ProductVariantCountOutputTypeCountSubProductArgs
    parentSubProduct?: boolean | ProductVariantCountOutputTypeCountParentSubProductArgs
    CartItem?: boolean | ProductVariantCountOutputTypeCountCartItemArgs
    CartSubProduct?: boolean | ProductVariantCountOutputTypeCountCartSubProductArgs
  }

  // Custom InputTypes
  /**
   * ProductVariantCountOutputType without action
   */
  export type ProductVariantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariantCountOutputType
     */
    select?: ProductVariantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductVariantCountOutputType without action
   */
  export type ProductVariantCountOutputTypeCountSizesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SizesWhereInput
  }

  /**
   * ProductVariantCountOutputType without action
   */
  export type ProductVariantCountOutputTypeCountSubProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubProductWhereInput
  }

  /**
   * ProductVariantCountOutputType without action
   */
  export type ProductVariantCountOutputTypeCountParentSubProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubProductWhereInput
  }

  /**
   * ProductVariantCountOutputType without action
   */
  export type ProductVariantCountOutputTypeCountCartItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartItemWhereInput
  }

  /**
   * ProductVariantCountOutputType without action
   */
  export type ProductVariantCountOutputTypeCountCartSubProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartSubProductWhereInput
  }


  /**
   * Count Type VariantTypesCountOutputType
   */

  export type VariantTypesCountOutputType = {
    categories: number
    productAttribute: number
  }

  export type VariantTypesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | VariantTypesCountOutputTypeCountCategoriesArgs
    productAttribute?: boolean | VariantTypesCountOutputTypeCountProductAttributeArgs
  }

  // Custom InputTypes
  /**
   * VariantTypesCountOutputType without action
   */
  export type VariantTypesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantTypesCountOutputType
     */
    select?: VariantTypesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VariantTypesCountOutputType without action
   */
  export type VariantTypesCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * VariantTypesCountOutputType without action
   */
  export type VariantTypesCountOutputTypeCountProductAttributeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductAttributeWhereInput
  }


  /**
   * Count Type ParametersCountOutputType
   */

  export type ParametersCountOutputType = {
    categories: number
    ProductVariant: number
  }

  export type ParametersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | ParametersCountOutputTypeCountCategoriesArgs
    ProductVariant?: boolean | ParametersCountOutputTypeCountProductVariantArgs
  }

  // Custom InputTypes
  /**
   * ParametersCountOutputType without action
   */
  export type ParametersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParametersCountOutputType
     */
    select?: ParametersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ParametersCountOutputType without action
   */
  export type ParametersCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * ParametersCountOutputType without action
   */
  export type ParametersCountOutputTypeCountProductVariantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductVariantWhereInput
  }


  /**
   * Count Type ProportionsCountOutputType
   */

  export type ProportionsCountOutputType = {
    categories: number
    sizes: number
  }

  export type ProportionsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | ProportionsCountOutputTypeCountCategoriesArgs
    sizes?: boolean | ProportionsCountOutputTypeCountSizesArgs
  }

  // Custom InputTypes
  /**
   * ProportionsCountOutputType without action
   */
  export type ProportionsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProportionsCountOutputType
     */
    select?: ProportionsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProportionsCountOutputType without action
   */
  export type ProportionsCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * ProportionsCountOutputType without action
   */
  export type ProportionsCountOutputTypeCountSizesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SizesWhereInput
  }


  /**
   * Count Type SizesCountOutputType
   */

  export type SizesCountOutputType = {
    ingredients: number
    SubProduct: number
    CartItem: number
    CartSubProduct: number
  }

  export type SizesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ingredients?: boolean | SizesCountOutputTypeCountIngredientsArgs
    SubProduct?: boolean | SizesCountOutputTypeCountSubProductArgs
    CartItem?: boolean | SizesCountOutputTypeCountCartItemArgs
    CartSubProduct?: boolean | SizesCountOutputTypeCountCartSubProductArgs
  }

  // Custom InputTypes
  /**
   * SizesCountOutputType without action
   */
  export type SizesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SizesCountOutputType
     */
    select?: SizesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SizesCountOutputType without action
   */
  export type SizesCountOutputTypeCountIngredientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IngredientWhereInput
  }

  /**
   * SizesCountOutputType without action
   */
  export type SizesCountOutputTypeCountSubProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubProductWhereInput
  }

  /**
   * SizesCountOutputType without action
   */
  export type SizesCountOutputTypeCountCartItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartItemWhereInput
  }

  /**
   * SizesCountOutputType without action
   */
  export type SizesCountOutputTypeCountCartSubProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartSubProductWhereInput
  }


  /**
   * Count Type IngredientCountOutputType
   */

  export type IngredientCountOutputType = {
    categories: number
    sizes: number
    product: number
    cartItems: number
  }

  export type IngredientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | IngredientCountOutputTypeCountCategoriesArgs
    sizes?: boolean | IngredientCountOutputTypeCountSizesArgs
    product?: boolean | IngredientCountOutputTypeCountProductArgs
    cartItems?: boolean | IngredientCountOutputTypeCountCartItemsArgs
  }

  // Custom InputTypes
  /**
   * IngredientCountOutputType without action
   */
  export type IngredientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IngredientCountOutputType
     */
    select?: IngredientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * IngredientCountOutputType without action
   */
  export type IngredientCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * IngredientCountOutputType without action
   */
  export type IngredientCountOutputTypeCountSizesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SizesWhereInput
  }

  /**
   * IngredientCountOutputType without action
   */
  export type IngredientCountOutputTypeCountProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }

  /**
   * IngredientCountOutputType without action
   */
  export type IngredientCountOutputTypeCountCartItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartItemWhereInput
  }


  /**
   * Count Type CartCountOutputType
   */

  export type CartCountOutputType = {
    items: number
  }

  export type CartCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | CartCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * CartCountOutputType without action
   */
  export type CartCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartCountOutputType
     */
    select?: CartCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CartCountOutputType without action
   */
  export type CartCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartItemWhereInput
  }


  /**
   * Count Type CartItemCountOutputType
   */

  export type CartItemCountOutputType = {
    ingredients: number
    cartSubProduct: number
  }

  export type CartItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ingredients?: boolean | CartItemCountOutputTypeCountIngredientsArgs
    cartSubProduct?: boolean | CartItemCountOutputTypeCountCartSubProductArgs
  }

  // Custom InputTypes
  /**
   * CartItemCountOutputType without action
   */
  export type CartItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItemCountOutputType
     */
    select?: CartItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CartItemCountOutputType without action
   */
  export type CartItemCountOutputTypeCountIngredientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IngredientWhereInput
  }

  /**
   * CartItemCountOutputType without action
   */
  export type CartItemCountOutputTypeCountCartSubProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartSubProductWhereInput
  }


  /**
   * Count Type StoryCountOutputType
   */

  export type StoryCountOutputType = {
    items: number
  }

  export type StoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | StoryCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * StoryCountOutputType without action
   */
  export type StoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryCountOutputType
     */
    select?: StoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StoryCountOutputType without action
   */
  export type StoryCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoryItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    fullName: string | null
    email: string | null
    password: string | null
    role: $Enums.UserRole | null
    isVerified: boolean | null
    isTwoFactorEnabled: boolean | null
    picture: string | null
    method: $Enums.AuthMethod | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    fullName: string | null
    email: string | null
    password: string | null
    role: $Enums.UserRole | null
    isVerified: boolean | null
    isTwoFactorEnabled: boolean | null
    picture: string | null
    method: $Enums.AuthMethod | null
    phone: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    fullName: number
    email: number
    password: number
    role: number
    isVerified: number
    isTwoFactorEnabled: number
    picture: number
    method: number
    phone: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    password?: true
    role?: true
    isVerified?: true
    isTwoFactorEnabled?: true
    picture?: true
    method?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    password?: true
    role?: true
    isVerified?: true
    isTwoFactorEnabled?: true
    picture?: true
    method?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    password?: true
    role?: true
    isVerified?: true
    isTwoFactorEnabled?: true
    picture?: true
    method?: true
    phone?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    fullName: string | null
    email: string
    password: string | null
    role: $Enums.UserRole | null
    isVerified: boolean
    isTwoFactorEnabled: boolean
    picture: string | null
    method: $Enums.AuthMethod
    phone: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    picture?: boolean
    method?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    cart?: boolean | User$cartArgs<ExtArgs>
    orders?: boolean | User$ordersArgs<ExtArgs>
    verificationCode?: boolean | User$verificationCodeArgs<ExtArgs>
    deliveryAddress?: boolean | User$deliveryAddressArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    picture?: boolean
    method?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    picture?: boolean
    method?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    fullName?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    picture?: boolean
    method?: boolean
    phone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fullName" | "email" | "password" | "role" | "isVerified" | "isTwoFactorEnabled" | "picture" | "method" | "phone" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    cart?: boolean | User$cartArgs<ExtArgs>
    orders?: boolean | User$ordersArgs<ExtArgs>
    verificationCode?: boolean | User$verificationCodeArgs<ExtArgs>
    deliveryAddress?: boolean | User$deliveryAddressArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      cart: Prisma.$CartPayload<ExtArgs> | null
      orders: Prisma.$OrderPayload<ExtArgs>[]
      verificationCode: Prisma.$VerificationCodePayload<ExtArgs> | null
      deliveryAddress: Prisma.$DeliveryAddressPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fullName: string | null
      email: string
      password: string | null
      role: $Enums.UserRole | null
      isVerified: boolean
      isTwoFactorEnabled: boolean
      picture: string | null
      method: $Enums.AuthMethod
      phone: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    cart<T extends User$cartArgs<ExtArgs> = {}>(args?: Subset<T, User$cartArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    orders<T extends User$ordersArgs<ExtArgs> = {}>(args?: Subset<T, User$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    verificationCode<T extends User$verificationCodeArgs<ExtArgs> = {}>(args?: Subset<T, User$verificationCodeArgs<ExtArgs>>): Prisma__VerificationCodeClient<$Result.GetResult<Prisma.$VerificationCodePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    deliveryAddress<T extends User$deliveryAddressArgs<ExtArgs> = {}>(args?: Subset<T, User$deliveryAddressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeliveryAddressPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly fullName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly isVerified: FieldRef<"User", 'Boolean'>
    readonly isTwoFactorEnabled: FieldRef<"User", 'Boolean'>
    readonly picture: FieldRef<"User", 'String'>
    readonly method: FieldRef<"User", 'AuthMethod'>
    readonly phone: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.cart
   */
  export type User$cartArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    where?: CartWhereInput
  }

  /**
   * User.orders
   */
  export type User$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    cursor?: OrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * User.verificationCode
   */
  export type User$verificationCodeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationCode
     */
    select?: VerificationCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationCode
     */
    omit?: VerificationCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationCodeInclude<ExtArgs> | null
    where?: VerificationCodeWhereInput
  }

  /**
   * User.deliveryAddress
   */
  export type User$deliveryAddressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryAddress
     */
    select?: DeliveryAddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryAddress
     */
    omit?: DeliveryAddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryAddressInclude<ExtArgs> | null
    where?: DeliveryAddressWhereInput
    orderBy?: DeliveryAddressOrderByWithRelationInput | DeliveryAddressOrderByWithRelationInput[]
    cursor?: DeliveryAddressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DeliveryAddressScalarFieldEnum | DeliveryAddressScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expiresAt: number | null
    userId: number | null
  }

  export type AccountSumAggregateOutputType = {
    expiresAt: number | null
    userId: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    type: string | null
    provider: string | null
    refreshToken: string | null
    accessToken: string | null
    expiresAt: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    type: string | null
    provider: string | null
    refreshToken: string | null
    accessToken: string | null
    expiresAt: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    type: number
    provider: number
    refreshToken: number
    accessToken: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expiresAt?: true
    userId?: true
  }

  export type AccountSumAggregateInputType = {
    expiresAt?: true
    userId?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    type?: true
    provider?: true
    refreshToken?: true
    accessToken?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    type?: true
    provider?: true
    refreshToken?: true
    accessToken?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    type?: true
    provider?: true
    refreshToken?: true
    accessToken?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    type: string
    provider: string
    refreshToken: string | null
    accessToken: string | null
    expiresAt: number
    createdAt: Date
    updatedAt: Date
    userId: number | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    provider?: boolean
    refreshToken?: boolean
    accessToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | Account$userArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    provider?: boolean
    refreshToken?: boolean
    accessToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | Account$userArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    provider?: boolean
    refreshToken?: boolean
    accessToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | Account$userArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    type?: boolean
    provider?: boolean
    refreshToken?: boolean
    accessToken?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "provider" | "refreshToken" | "accessToken" | "expiresAt" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Account$userArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Account$userArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Account$userArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      provider: string
      refreshToken: string | null
      accessToken: string | null
      expiresAt: number
      createdAt: Date
      updatedAt: Date
      userId: number | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Account$userArgs<ExtArgs> = {}>(args?: Subset<T, Account$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly refreshToken: FieldRef<"Account", 'String'>
    readonly accessToken: FieldRef<"Account", 'String'>
    readonly expiresAt: FieldRef<"Account", 'Int'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
    readonly userId: FieldRef<"Account", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account.user
   */
  export type Account$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Token
   */

  export type AggregateToken = {
    _count: TokenCountAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
  }

  export type TokenMinAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    type: $Enums.TokenType | null
    expiresIn: Date | null
    createdAt: Date | null
  }

  export type TokenMaxAggregateOutputType = {
    id: string | null
    email: string | null
    token: string | null
    type: $Enums.TokenType | null
    expiresIn: Date | null
    createdAt: Date | null
  }

  export type TokenCountAggregateOutputType = {
    id: number
    email: number
    token: number
    type: number
    expiresIn: number
    createdAt: number
    _all: number
  }


  export type TokenMinAggregateInputType = {
    id?: true
    email?: true
    token?: true
    type?: true
    expiresIn?: true
    createdAt?: true
  }

  export type TokenMaxAggregateInputType = {
    id?: true
    email?: true
    token?: true
    type?: true
    expiresIn?: true
    createdAt?: true
  }

  export type TokenCountAggregateInputType = {
    id?: true
    email?: true
    token?: true
    type?: true
    expiresIn?: true
    createdAt?: true
    _all?: true
  }

  export type TokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Token to aggregate.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tokens
    **/
    _count?: true | TokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TokenMaxAggregateInputType
  }

  export type GetTokenAggregateType<T extends TokenAggregateArgs> = {
        [P in keyof T & keyof AggregateToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateToken[P]>
      : GetScalarType<T[P], AggregateToken[P]>
  }




  export type TokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TokenWhereInput
    orderBy?: TokenOrderByWithAggregationInput | TokenOrderByWithAggregationInput[]
    by: TokenScalarFieldEnum[] | TokenScalarFieldEnum
    having?: TokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TokenCountAggregateInputType | true
    _min?: TokenMinAggregateInputType
    _max?: TokenMaxAggregateInputType
  }

  export type TokenGroupByOutputType = {
    id: string
    email: string
    token: string
    type: $Enums.TokenType
    expiresIn: Date
    createdAt: Date
    _count: TokenCountAggregateOutputType | null
    _min: TokenMinAggregateOutputType | null
    _max: TokenMaxAggregateOutputType | null
  }

  type GetTokenGroupByPayload<T extends TokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TokenGroupByOutputType[P]>
            : GetScalarType<T[P], TokenGroupByOutputType[P]>
        }
      >
    >


  export type TokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    type?: boolean
    expiresIn?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["token"]>

  export type TokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    type?: boolean
    expiresIn?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["token"]>

  export type TokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    token?: boolean
    type?: boolean
    expiresIn?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["token"]>

  export type TokenSelectScalar = {
    id?: boolean
    email?: boolean
    token?: boolean
    type?: boolean
    expiresIn?: boolean
    createdAt?: boolean
  }

  export type TokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "token" | "type" | "expiresIn" | "createdAt", ExtArgs["result"]["token"]>

  export type $TokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Token"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      token: string
      type: $Enums.TokenType
      expiresIn: Date
      createdAt: Date
    }, ExtArgs["result"]["token"]>
    composites: {}
  }

  type TokenGetPayload<S extends boolean | null | undefined | TokenDefaultArgs> = $Result.GetResult<Prisma.$TokenPayload, S>

  type TokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TokenCountAggregateInputType | true
    }

  export interface TokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Token'], meta: { name: 'Token' } }
    /**
     * Find zero or one Token that matches the filter.
     * @param {TokenFindUniqueArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TokenFindUniqueArgs>(args: SelectSubset<T, TokenFindUniqueArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Token that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TokenFindUniqueOrThrowArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TokenFindUniqueOrThrowArgs>(args: SelectSubset<T, TokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Token that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TokenFindFirstArgs>(args?: SelectSubset<T, TokenFindFirstArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Token that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindFirstOrThrowArgs} args - Arguments to find a Token
     * @example
     * // Get one Token
     * const token = await prisma.token.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TokenFindFirstOrThrowArgs>(args?: SelectSubset<T, TokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tokens
     * const tokens = await prisma.token.findMany()
     * 
     * // Get first 10 Tokens
     * const tokens = await prisma.token.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tokenWithIdOnly = await prisma.token.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TokenFindManyArgs>(args?: SelectSubset<T, TokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Token.
     * @param {TokenCreateArgs} args - Arguments to create a Token.
     * @example
     * // Create one Token
     * const Token = await prisma.token.create({
     *   data: {
     *     // ... data to create a Token
     *   }
     * })
     * 
     */
    create<T extends TokenCreateArgs>(args: SelectSubset<T, TokenCreateArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Tokens.
     * @param {TokenCreateManyArgs} args - Arguments to create many Tokens.
     * @example
     * // Create many Tokens
     * const token = await prisma.token.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TokenCreateManyArgs>(args?: SelectSubset<T, TokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tokens and returns the data saved in the database.
     * @param {TokenCreateManyAndReturnArgs} args - Arguments to create many Tokens.
     * @example
     * // Create many Tokens
     * const token = await prisma.token.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tokens and only return the `id`
     * const tokenWithIdOnly = await prisma.token.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TokenCreateManyAndReturnArgs>(args?: SelectSubset<T, TokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Token.
     * @param {TokenDeleteArgs} args - Arguments to delete one Token.
     * @example
     * // Delete one Token
     * const Token = await prisma.token.delete({
     *   where: {
     *     // ... filter to delete one Token
     *   }
     * })
     * 
     */
    delete<T extends TokenDeleteArgs>(args: SelectSubset<T, TokenDeleteArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Token.
     * @param {TokenUpdateArgs} args - Arguments to update one Token.
     * @example
     * // Update one Token
     * const token = await prisma.token.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TokenUpdateArgs>(args: SelectSubset<T, TokenUpdateArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Tokens.
     * @param {TokenDeleteManyArgs} args - Arguments to filter Tokens to delete.
     * @example
     * // Delete a few Tokens
     * const { count } = await prisma.token.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TokenDeleteManyArgs>(args?: SelectSubset<T, TokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tokens
     * const token = await prisma.token.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TokenUpdateManyArgs>(args: SelectSubset<T, TokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens and returns the data updated in the database.
     * @param {TokenUpdateManyAndReturnArgs} args - Arguments to update many Tokens.
     * @example
     * // Update many Tokens
     * const token = await prisma.token.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tokens and only return the `id`
     * const tokenWithIdOnly = await prisma.token.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TokenUpdateManyAndReturnArgs>(args: SelectSubset<T, TokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Token.
     * @param {TokenUpsertArgs} args - Arguments to update or create a Token.
     * @example
     * // Update or create a Token
     * const token = await prisma.token.upsert({
     *   create: {
     *     // ... data to create a Token
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Token we want to update
     *   }
     * })
     */
    upsert<T extends TokenUpsertArgs>(args: SelectSubset<T, TokenUpsertArgs<ExtArgs>>): Prisma__TokenClient<$Result.GetResult<Prisma.$TokenPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenCountArgs} args - Arguments to filter Tokens to count.
     * @example
     * // Count the number of Tokens
     * const count = await prisma.token.count({
     *   where: {
     *     // ... the filter for the Tokens we want to count
     *   }
     * })
    **/
    count<T extends TokenCountArgs>(
      args?: Subset<T, TokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TokenAggregateArgs>(args: Subset<T, TokenAggregateArgs>): Prisma.PrismaPromise<GetTokenAggregateType<T>>

    /**
     * Group by Token.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TokenGroupByArgs['orderBy'] }
        : { orderBy?: TokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Token model
   */
  readonly fields: TokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Token.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Token model
   */ 
  interface TokenFieldRefs {
    readonly id: FieldRef<"Token", 'String'>
    readonly email: FieldRef<"Token", 'String'>
    readonly token: FieldRef<"Token", 'String'>
    readonly type: FieldRef<"Token", 'TokenType'>
    readonly expiresIn: FieldRef<"Token", 'DateTime'>
    readonly createdAt: FieldRef<"Token", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Token findUnique
   */
  export type TokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token findUniqueOrThrow
   */
  export type TokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token findFirst
   */
  export type TokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token findFirstOrThrow
   */
  export type TokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Filter, which Token to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tokens.
     */
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token findMany
   */
  export type TokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Filter, which Tokens to fetch.
     */
    where?: TokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tokens to fetch.
     */
    orderBy?: TokenOrderByWithRelationInput | TokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tokens.
     */
    cursor?: TokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tokens.
     */
    skip?: number
    distinct?: TokenScalarFieldEnum | TokenScalarFieldEnum[]
  }

  /**
   * Token create
   */
  export type TokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * The data needed to create a Token.
     */
    data: XOR<TokenCreateInput, TokenUncheckedCreateInput>
  }

  /**
   * Token createMany
   */
  export type TokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tokens.
     */
    data: TokenCreateManyInput | TokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Token createManyAndReturn
   */
  export type TokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * The data used to create many Tokens.
     */
    data: TokenCreateManyInput | TokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Token update
   */
  export type TokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * The data needed to update a Token.
     */
    data: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
    /**
     * Choose, which Token to update.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token updateMany
   */
  export type TokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tokens.
     */
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyInput>
    /**
     * Filter which Tokens to update
     */
    where?: TokenWhereInput
    /**
     * Limit how many Tokens to update.
     */
    limit?: number
  }

  /**
   * Token updateManyAndReturn
   */
  export type TokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * The data used to update Tokens.
     */
    data: XOR<TokenUpdateManyMutationInput, TokenUncheckedUpdateManyInput>
    /**
     * Filter which Tokens to update
     */
    where?: TokenWhereInput
    /**
     * Limit how many Tokens to update.
     */
    limit?: number
  }

  /**
   * Token upsert
   */
  export type TokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * The filter to search for the Token to update in case it exists.
     */
    where: TokenWhereUniqueInput
    /**
     * In case the Token found by the `where` argument doesn't exist, create a new Token with this data.
     */
    create: XOR<TokenCreateInput, TokenUncheckedCreateInput>
    /**
     * In case the Token was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TokenUpdateInput, TokenUncheckedUpdateInput>
  }

  /**
   * Token delete
   */
  export type TokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
    /**
     * Filter which Token to delete.
     */
    where: TokenWhereUniqueInput
  }

  /**
   * Token deleteMany
   */
  export type TokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tokens to delete
     */
    where?: TokenWhereInput
    /**
     * Limit how many Tokens to delete.
     */
    limit?: number
  }

  /**
   * Token without action
   */
  export type TokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Token
     */
    select?: TokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Token
     */
    omit?: TokenOmit<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    type: $Enums.TypeProduct | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    slug: string | null
    type: $Enums.TypeProduct | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    type: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    name: string
    slug: string
    type: $Enums.TypeProduct
    createdAt: Date
    updatedAt: Date
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parameters?: boolean | Category$parametersArgs<ExtArgs>
    proportions?: boolean | Category$proportionsArgs<ExtArgs>
    ingredients?: boolean | Category$ingredientsArgs<ExtArgs>
    products?: boolean | Category$productsArgs<ExtArgs>
    variantTypes?: boolean | Category$variantTypesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "type" | "createdAt" | "updatedAt", ExtArgs["result"]["category"]>
  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parameters?: boolean | Category$parametersArgs<ExtArgs>
    proportions?: boolean | Category$proportionsArgs<ExtArgs>
    ingredients?: boolean | Category$ingredientsArgs<ExtArgs>
    products?: boolean | Category$productsArgs<ExtArgs>
    variantTypes?: boolean | Category$variantTypesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      parameters: Prisma.$ParametersPayload<ExtArgs>[]
      proportions: Prisma.$ProportionsPayload<ExtArgs>[]
      ingredients: Prisma.$IngredientPayload<ExtArgs>[]
      products: Prisma.$ProductPayload<ExtArgs>[]
      variantTypes: Prisma.$VariantTypesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      slug: string
      type: $Enums.TypeProduct
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories and returns the data updated in the database.
     * @param {CategoryUpdateManyAndReturnArgs} args - Arguments to update many Categories.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, CategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parameters<T extends Category$parametersArgs<ExtArgs> = {}>(args?: Subset<T, Category$parametersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParametersPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    proportions<T extends Category$proportionsArgs<ExtArgs> = {}>(args?: Subset<T, Category$proportionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProportionsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    ingredients<T extends Category$ingredientsArgs<ExtArgs> = {}>(args?: Subset<T, Category$ingredientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    products<T extends Category$productsArgs<ExtArgs> = {}>(args?: Subset<T, Category$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    variantTypes<T extends Category$variantTypesArgs<ExtArgs> = {}>(args?: Subset<T, Category$variantTypesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VariantTypesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'Int'>
    readonly name: FieldRef<"Category", 'String'>
    readonly slug: FieldRef<"Category", 'String'>
    readonly type: FieldRef<"Category", 'TypeProduct'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
    readonly updatedAt: FieldRef<"Category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category updateManyAndReturn
   */
  export type CategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Category.parameters
   */
  export type Category$parametersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameters
     */
    select?: ParametersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Parameters
     */
    omit?: ParametersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParametersInclude<ExtArgs> | null
    where?: ParametersWhereInput
    orderBy?: ParametersOrderByWithRelationInput | ParametersOrderByWithRelationInput[]
    cursor?: ParametersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParametersScalarFieldEnum | ParametersScalarFieldEnum[]
  }

  /**
   * Category.proportions
   */
  export type Category$proportionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proportions
     */
    select?: ProportionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Proportions
     */
    omit?: ProportionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProportionsInclude<ExtArgs> | null
    where?: ProportionsWhereInput
    orderBy?: ProportionsOrderByWithRelationInput | ProportionsOrderByWithRelationInput[]
    cursor?: ProportionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProportionsScalarFieldEnum | ProportionsScalarFieldEnum[]
  }

  /**
   * Category.ingredients
   */
  export type Category$ingredientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    where?: IngredientWhereInput
    orderBy?: IngredientOrderByWithRelationInput | IngredientOrderByWithRelationInput[]
    cursor?: IngredientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IngredientScalarFieldEnum | IngredientScalarFieldEnum[]
  }

  /**
   * Category.products
   */
  export type Category$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Category.variantTypes
   */
  export type Category$variantTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantTypes
     */
    select?: VariantTypesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VariantTypes
     */
    omit?: VariantTypesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantTypesInclude<ExtArgs> | null
    where?: VariantTypesWhereInput
    orderBy?: VariantTypesOrderByWithRelationInput | VariantTypesOrderByWithRelationInput[]
    cursor?: VariantTypesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VariantTypesScalarFieldEnum | VariantTypesScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
    price: number | null
  }

  export type ProductSumAggregateOutputType = {
    id: number | null
    categoryId: number | null
    price: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    image: string | null
    description: string | null
    categoryId: number | null
    type: $Enums.TypeProduct | null
    price: number | null
  }

  export type ProductMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    image: string | null
    description: string | null
    categoryId: number | null
    type: $Enums.TypeProduct | null
    price: number | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    image: number
    description: number
    categoryId: number
    type: number
    price: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    categoryId?: true
    price?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    categoryId?: true
    price?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    image?: true
    description?: true
    categoryId?: true
    type?: true
    price?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    image?: true
    description?: true
    categoryId?: true
    type?: true
    price?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    image?: true
    description?: true
    categoryId?: true
    type?: true
    price?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    image: string
    description: string | null
    categoryId: number
    type: $Enums.TypeProduct
    price: number | null
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    image?: boolean
    description?: boolean
    categoryId?: boolean
    type?: boolean
    price?: boolean
    ingredients?: boolean | Product$ingredientsArgs<ExtArgs>
    CartItem?: boolean | Product$CartItemArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    productVariant?: boolean | Product$productVariantArgs<ExtArgs>
    subProduct?: boolean | Product$subProductArgs<ExtArgs>
    CartSubProduct?: boolean | Product$CartSubProductArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    image?: boolean
    description?: boolean
    categoryId?: boolean
    type?: boolean
    price?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    image?: boolean
    description?: boolean
    categoryId?: boolean
    type?: boolean
    price?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    image?: boolean
    description?: boolean
    categoryId?: boolean
    type?: boolean
    price?: boolean
  }

  export type ProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt" | "image" | "description" | "categoryId" | "type" | "price", ExtArgs["result"]["product"]>
  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ingredients?: boolean | Product$ingredientsArgs<ExtArgs>
    CartItem?: boolean | Product$CartItemArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    productVariant?: boolean | Product$productVariantArgs<ExtArgs>
    subProduct?: boolean | Product$subProductArgs<ExtArgs>
    CartSubProduct?: boolean | Product$CartSubProductArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }
  export type ProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      ingredients: Prisma.$IngredientPayload<ExtArgs>[]
      CartItem: Prisma.$CartItemPayload<ExtArgs>[]
      category: Prisma.$CategoryPayload<ExtArgs>
      productVariant: Prisma.$ProductVariantPayload<ExtArgs>[]
      subProduct: Prisma.$SubProductPayload<ExtArgs>[]
      CartSubProduct: Prisma.$CartSubProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createdAt: Date
      updatedAt: Date
      image: string
      description: string | null
      categoryId: number
      type: $Enums.TypeProduct
      price: number | null
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {ProductCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `id`
     * const productWithIdOnly = await prisma.product.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products and returns the data updated in the database.
     * @param {ProductUpdateManyAndReturnArgs} args - Arguments to update many Products.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Products and only return the `id`
     * const productWithIdOnly = await prisma.product.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ingredients<T extends Product$ingredientsArgs<ExtArgs> = {}>(args?: Subset<T, Product$ingredientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    CartItem<T extends Product$CartItemArgs<ExtArgs> = {}>(args?: Subset<T, Product$CartItemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    productVariant<T extends Product$productVariantArgs<ExtArgs> = {}>(args?: Subset<T, Product$productVariantArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    subProduct<T extends Product$subProductArgs<ExtArgs> = {}>(args?: Subset<T, Product$subProductArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubProductPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    CartSubProduct<T extends Product$CartSubProductArgs<ExtArgs> = {}>(args?: Subset<T, Product$CartSubProductArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartSubProductPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */ 
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'Int'>
    readonly name: FieldRef<"Product", 'String'>
    readonly createdAt: FieldRef<"Product", 'DateTime'>
    readonly updatedAt: FieldRef<"Product", 'DateTime'>
    readonly image: FieldRef<"Product", 'String'>
    readonly description: FieldRef<"Product", 'String'>
    readonly categoryId: FieldRef<"Product", 'Int'>
    readonly type: FieldRef<"Product", 'TypeProduct'>
    readonly price: FieldRef<"Product", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product createManyAndReturn
   */
  export type ProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product updateManyAndReturn
   */
  export type ProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to delete.
     */
    limit?: number
  }

  /**
   * Product.ingredients
   */
  export type Product$ingredientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    where?: IngredientWhereInput
    orderBy?: IngredientOrderByWithRelationInput | IngredientOrderByWithRelationInput[]
    cursor?: IngredientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IngredientScalarFieldEnum | IngredientScalarFieldEnum[]
  }

  /**
   * Product.CartItem
   */
  export type Product$CartItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    where?: CartItemWhereInput
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    cursor?: CartItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * Product.productVariant
   */
  export type Product$productVariantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    where?: ProductVariantWhereInput
    orderBy?: ProductVariantOrderByWithRelationInput | ProductVariantOrderByWithRelationInput[]
    cursor?: ProductVariantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductVariantScalarFieldEnum | ProductVariantScalarFieldEnum[]
  }

  /**
   * Product.subProduct
   */
  export type Product$subProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubProduct
     */
    select?: SubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubProduct
     */
    omit?: SubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubProductInclude<ExtArgs> | null
    where?: SubProductWhereInput
    orderBy?: SubProductOrderByWithRelationInput | SubProductOrderByWithRelationInput[]
    cursor?: SubProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubProductScalarFieldEnum | SubProductScalarFieldEnum[]
  }

  /**
   * Product.CartSubProduct
   */
  export type Product$CartSubProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartSubProduct
     */
    select?: CartSubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartSubProduct
     */
    omit?: CartSubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartSubProductInclude<ExtArgs> | null
    where?: CartSubProductWhereInput
    orderBy?: CartSubProductOrderByWithRelationInput | CartSubProductOrderByWithRelationInput[]
    cursor?: CartSubProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartSubProductScalarFieldEnum | CartSubProductScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model ProductVariant
   */

  export type AggregateProductVariant = {
    _count: ProductVariantCountAggregateOutputType | null
    _avg: ProductVariantAvgAggregateOutputType | null
    _sum: ProductVariantSumAggregateOutputType | null
    _min: ProductVariantMinAggregateOutputType | null
    _max: ProductVariantMaxAggregateOutputType | null
  }

  export type ProductVariantAvgAggregateOutputType = {
    id: number | null
    parameterId: number | null
    quantity: number | null
    productId: number | null
    priceKit: number | null
  }

  export type ProductVariantSumAggregateOutputType = {
    id: number | null
    parameterId: number | null
    quantity: number | null
    productId: number | null
    priceKit: number | null
  }

  export type ProductVariantMinAggregateOutputType = {
    id: number | null
    parameterId: number | null
    quantity: number | null
    productId: number | null
    image: string | null
    priceKit: number | null
  }

  export type ProductVariantMaxAggregateOutputType = {
    id: number | null
    parameterId: number | null
    quantity: number | null
    productId: number | null
    image: string | null
    priceKit: number | null
  }

  export type ProductVariantCountAggregateOutputType = {
    id: number
    parameterId: number
    quantity: number
    productId: number
    image: number
    priceKit: number
    _all: number
  }


  export type ProductVariantAvgAggregateInputType = {
    id?: true
    parameterId?: true
    quantity?: true
    productId?: true
    priceKit?: true
  }

  export type ProductVariantSumAggregateInputType = {
    id?: true
    parameterId?: true
    quantity?: true
    productId?: true
    priceKit?: true
  }

  export type ProductVariantMinAggregateInputType = {
    id?: true
    parameterId?: true
    quantity?: true
    productId?: true
    image?: true
    priceKit?: true
  }

  export type ProductVariantMaxAggregateInputType = {
    id?: true
    parameterId?: true
    quantity?: true
    productId?: true
    image?: true
    priceKit?: true
  }

  export type ProductVariantCountAggregateInputType = {
    id?: true
    parameterId?: true
    quantity?: true
    productId?: true
    image?: true
    priceKit?: true
    _all?: true
  }

  export type ProductVariantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductVariant to aggregate.
     */
    where?: ProductVariantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductVariants to fetch.
     */
    orderBy?: ProductVariantOrderByWithRelationInput | ProductVariantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductVariantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductVariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductVariants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductVariants
    **/
    _count?: true | ProductVariantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductVariantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductVariantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductVariantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductVariantMaxAggregateInputType
  }

  export type GetProductVariantAggregateType<T extends ProductVariantAggregateArgs> = {
        [P in keyof T & keyof AggregateProductVariant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductVariant[P]>
      : GetScalarType<T[P], AggregateProductVariant[P]>
  }




  export type ProductVariantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductVariantWhereInput
    orderBy?: ProductVariantOrderByWithAggregationInput | ProductVariantOrderByWithAggregationInput[]
    by: ProductVariantScalarFieldEnum[] | ProductVariantScalarFieldEnum
    having?: ProductVariantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductVariantCountAggregateInputType | true
    _avg?: ProductVariantAvgAggregateInputType
    _sum?: ProductVariantSumAggregateInputType
    _min?: ProductVariantMinAggregateInputType
    _max?: ProductVariantMaxAggregateInputType
  }

  export type ProductVariantGroupByOutputType = {
    id: number
    parameterId: number | null
    quantity: number | null
    productId: number
    image: string
    priceKit: number | null
    _count: ProductVariantCountAggregateOutputType | null
    _avg: ProductVariantAvgAggregateOutputType | null
    _sum: ProductVariantSumAggregateOutputType | null
    _min: ProductVariantMinAggregateOutputType | null
    _max: ProductVariantMaxAggregateOutputType | null
  }

  type GetProductVariantGroupByPayload<T extends ProductVariantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductVariantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductVariantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductVariantGroupByOutputType[P]>
            : GetScalarType<T[P], ProductVariantGroupByOutputType[P]>
        }
      >
    >


  export type ProductVariantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parameterId?: boolean
    quantity?: boolean
    productId?: boolean
    image?: boolean
    priceKit?: boolean
    parameter?: boolean | ProductVariant$parameterArgs<ExtArgs>
    sizes?: boolean | ProductVariant$sizesArgs<ExtArgs>
    productAttribute?: boolean | ProductVariant$productAttributeArgs<ExtArgs>
    Product?: boolean | ProductDefaultArgs<ExtArgs>
    subProduct?: boolean | ProductVariant$subProductArgs<ExtArgs>
    parentSubProduct?: boolean | ProductVariant$parentSubProductArgs<ExtArgs>
    CartItem?: boolean | ProductVariant$CartItemArgs<ExtArgs>
    CartSubProduct?: boolean | ProductVariant$CartSubProductArgs<ExtArgs>
    _count?: boolean | ProductVariantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productVariant"]>

  export type ProductVariantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parameterId?: boolean
    quantity?: boolean
    productId?: boolean
    image?: boolean
    priceKit?: boolean
    parameter?: boolean | ProductVariant$parameterArgs<ExtArgs>
    Product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productVariant"]>

  export type ProductVariantSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parameterId?: boolean
    quantity?: boolean
    productId?: boolean
    image?: boolean
    priceKit?: boolean
    parameter?: boolean | ProductVariant$parameterArgs<ExtArgs>
    Product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productVariant"]>

  export type ProductVariantSelectScalar = {
    id?: boolean
    parameterId?: boolean
    quantity?: boolean
    productId?: boolean
    image?: boolean
    priceKit?: boolean
  }

  export type ProductVariantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "parameterId" | "quantity" | "productId" | "image" | "priceKit", ExtArgs["result"]["productVariant"]>
  export type ProductVariantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parameter?: boolean | ProductVariant$parameterArgs<ExtArgs>
    sizes?: boolean | ProductVariant$sizesArgs<ExtArgs>
    productAttribute?: boolean | ProductVariant$productAttributeArgs<ExtArgs>
    Product?: boolean | ProductDefaultArgs<ExtArgs>
    subProduct?: boolean | ProductVariant$subProductArgs<ExtArgs>
    parentSubProduct?: boolean | ProductVariant$parentSubProductArgs<ExtArgs>
    CartItem?: boolean | ProductVariant$CartItemArgs<ExtArgs>
    CartSubProduct?: boolean | ProductVariant$CartSubProductArgs<ExtArgs>
    _count?: boolean | ProductVariantCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductVariantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parameter?: boolean | ProductVariant$parameterArgs<ExtArgs>
    Product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type ProductVariantIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parameter?: boolean | ProductVariant$parameterArgs<ExtArgs>
    Product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $ProductVariantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductVariant"
    objects: {
      parameter: Prisma.$ParametersPayload<ExtArgs> | null
      sizes: Prisma.$SizesPayload<ExtArgs>[]
      productAttribute: Prisma.$ProductAttributePayload<ExtArgs> | null
      Product: Prisma.$ProductPayload<ExtArgs>
      subProduct: Prisma.$SubProductPayload<ExtArgs>[]
      parentSubProduct: Prisma.$SubProductPayload<ExtArgs>[]
      CartItem: Prisma.$CartItemPayload<ExtArgs>[]
      CartSubProduct: Prisma.$CartSubProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      parameterId: number | null
      quantity: number | null
      productId: number
      image: string
      priceKit: number | null
    }, ExtArgs["result"]["productVariant"]>
    composites: {}
  }

  type ProductVariantGetPayload<S extends boolean | null | undefined | ProductVariantDefaultArgs> = $Result.GetResult<Prisma.$ProductVariantPayload, S>

  type ProductVariantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductVariantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductVariantCountAggregateInputType | true
    }

  export interface ProductVariantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductVariant'], meta: { name: 'ProductVariant' } }
    /**
     * Find zero or one ProductVariant that matches the filter.
     * @param {ProductVariantFindUniqueArgs} args - Arguments to find a ProductVariant
     * @example
     * // Get one ProductVariant
     * const productVariant = await prisma.productVariant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductVariantFindUniqueArgs>(args: SelectSubset<T, ProductVariantFindUniqueArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one ProductVariant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductVariantFindUniqueOrThrowArgs} args - Arguments to find a ProductVariant
     * @example
     * // Get one ProductVariant
     * const productVariant = await prisma.productVariant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductVariantFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductVariantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first ProductVariant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantFindFirstArgs} args - Arguments to find a ProductVariant
     * @example
     * // Get one ProductVariant
     * const productVariant = await prisma.productVariant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductVariantFindFirstArgs>(args?: SelectSubset<T, ProductVariantFindFirstArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first ProductVariant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantFindFirstOrThrowArgs} args - Arguments to find a ProductVariant
     * @example
     * // Get one ProductVariant
     * const productVariant = await prisma.productVariant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductVariantFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductVariantFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more ProductVariants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductVariants
     * const productVariants = await prisma.productVariant.findMany()
     * 
     * // Get first 10 ProductVariants
     * const productVariants = await prisma.productVariant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productVariantWithIdOnly = await prisma.productVariant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductVariantFindManyArgs>(args?: SelectSubset<T, ProductVariantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a ProductVariant.
     * @param {ProductVariantCreateArgs} args - Arguments to create a ProductVariant.
     * @example
     * // Create one ProductVariant
     * const ProductVariant = await prisma.productVariant.create({
     *   data: {
     *     // ... data to create a ProductVariant
     *   }
     * })
     * 
     */
    create<T extends ProductVariantCreateArgs>(args: SelectSubset<T, ProductVariantCreateArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many ProductVariants.
     * @param {ProductVariantCreateManyArgs} args - Arguments to create many ProductVariants.
     * @example
     * // Create many ProductVariants
     * const productVariant = await prisma.productVariant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductVariantCreateManyArgs>(args?: SelectSubset<T, ProductVariantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductVariants and returns the data saved in the database.
     * @param {ProductVariantCreateManyAndReturnArgs} args - Arguments to create many ProductVariants.
     * @example
     * // Create many ProductVariants
     * const productVariant = await prisma.productVariant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductVariants and only return the `id`
     * const productVariantWithIdOnly = await prisma.productVariant.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductVariantCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductVariantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a ProductVariant.
     * @param {ProductVariantDeleteArgs} args - Arguments to delete one ProductVariant.
     * @example
     * // Delete one ProductVariant
     * const ProductVariant = await prisma.productVariant.delete({
     *   where: {
     *     // ... filter to delete one ProductVariant
     *   }
     * })
     * 
     */
    delete<T extends ProductVariantDeleteArgs>(args: SelectSubset<T, ProductVariantDeleteArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one ProductVariant.
     * @param {ProductVariantUpdateArgs} args - Arguments to update one ProductVariant.
     * @example
     * // Update one ProductVariant
     * const productVariant = await prisma.productVariant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductVariantUpdateArgs>(args: SelectSubset<T, ProductVariantUpdateArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more ProductVariants.
     * @param {ProductVariantDeleteManyArgs} args - Arguments to filter ProductVariants to delete.
     * @example
     * // Delete a few ProductVariants
     * const { count } = await prisma.productVariant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductVariantDeleteManyArgs>(args?: SelectSubset<T, ProductVariantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductVariants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductVariants
     * const productVariant = await prisma.productVariant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductVariantUpdateManyArgs>(args: SelectSubset<T, ProductVariantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductVariants and returns the data updated in the database.
     * @param {ProductVariantUpdateManyAndReturnArgs} args - Arguments to update many ProductVariants.
     * @example
     * // Update many ProductVariants
     * const productVariant = await prisma.productVariant.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductVariants and only return the `id`
     * const productVariantWithIdOnly = await prisma.productVariant.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductVariantUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductVariantUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one ProductVariant.
     * @param {ProductVariantUpsertArgs} args - Arguments to update or create a ProductVariant.
     * @example
     * // Update or create a ProductVariant
     * const productVariant = await prisma.productVariant.upsert({
     *   create: {
     *     // ... data to create a ProductVariant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductVariant we want to update
     *   }
     * })
     */
    upsert<T extends ProductVariantUpsertArgs>(args: SelectSubset<T, ProductVariantUpsertArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of ProductVariants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantCountArgs} args - Arguments to filter ProductVariants to count.
     * @example
     * // Count the number of ProductVariants
     * const count = await prisma.productVariant.count({
     *   where: {
     *     // ... the filter for the ProductVariants we want to count
     *   }
     * })
    **/
    count<T extends ProductVariantCountArgs>(
      args?: Subset<T, ProductVariantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductVariantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductVariant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductVariantAggregateArgs>(args: Subset<T, ProductVariantAggregateArgs>): Prisma.PrismaPromise<GetProductVariantAggregateType<T>>

    /**
     * Group by ProductVariant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductVariantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductVariantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductVariantGroupByArgs['orderBy'] }
        : { orderBy?: ProductVariantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductVariantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductVariantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductVariant model
   */
  readonly fields: ProductVariantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductVariant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductVariantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parameter<T extends ProductVariant$parameterArgs<ExtArgs> = {}>(args?: Subset<T, ProductVariant$parameterArgs<ExtArgs>>): Prisma__ParametersClient<$Result.GetResult<Prisma.$ParametersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    sizes<T extends ProductVariant$sizesArgs<ExtArgs> = {}>(args?: Subset<T, ProductVariant$sizesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    productAttribute<T extends ProductVariant$productAttributeArgs<ExtArgs> = {}>(args?: Subset<T, ProductVariant$productAttributeArgs<ExtArgs>>): Prisma__ProductAttributeClient<$Result.GetResult<Prisma.$ProductAttributePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    Product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    subProduct<T extends ProductVariant$subProductArgs<ExtArgs> = {}>(args?: Subset<T, ProductVariant$subProductArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubProductPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    parentSubProduct<T extends ProductVariant$parentSubProductArgs<ExtArgs> = {}>(args?: Subset<T, ProductVariant$parentSubProductArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubProductPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    CartItem<T extends ProductVariant$CartItemArgs<ExtArgs> = {}>(args?: Subset<T, ProductVariant$CartItemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    CartSubProduct<T extends ProductVariant$CartSubProductArgs<ExtArgs> = {}>(args?: Subset<T, ProductVariant$CartSubProductArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartSubProductPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductVariant model
   */ 
  interface ProductVariantFieldRefs {
    readonly id: FieldRef<"ProductVariant", 'Int'>
    readonly parameterId: FieldRef<"ProductVariant", 'Int'>
    readonly quantity: FieldRef<"ProductVariant", 'Int'>
    readonly productId: FieldRef<"ProductVariant", 'Int'>
    readonly image: FieldRef<"ProductVariant", 'String'>
    readonly priceKit: FieldRef<"ProductVariant", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ProductVariant findUnique
   */
  export type ProductVariantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * Filter, which ProductVariant to fetch.
     */
    where: ProductVariantWhereUniqueInput
  }

  /**
   * ProductVariant findUniqueOrThrow
   */
  export type ProductVariantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * Filter, which ProductVariant to fetch.
     */
    where: ProductVariantWhereUniqueInput
  }

  /**
   * ProductVariant findFirst
   */
  export type ProductVariantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * Filter, which ProductVariant to fetch.
     */
    where?: ProductVariantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductVariants to fetch.
     */
    orderBy?: ProductVariantOrderByWithRelationInput | ProductVariantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductVariants.
     */
    cursor?: ProductVariantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductVariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductVariants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductVariants.
     */
    distinct?: ProductVariantScalarFieldEnum | ProductVariantScalarFieldEnum[]
  }

  /**
   * ProductVariant findFirstOrThrow
   */
  export type ProductVariantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * Filter, which ProductVariant to fetch.
     */
    where?: ProductVariantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductVariants to fetch.
     */
    orderBy?: ProductVariantOrderByWithRelationInput | ProductVariantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductVariants.
     */
    cursor?: ProductVariantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductVariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductVariants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductVariants.
     */
    distinct?: ProductVariantScalarFieldEnum | ProductVariantScalarFieldEnum[]
  }

  /**
   * ProductVariant findMany
   */
  export type ProductVariantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * Filter, which ProductVariants to fetch.
     */
    where?: ProductVariantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductVariants to fetch.
     */
    orderBy?: ProductVariantOrderByWithRelationInput | ProductVariantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductVariants.
     */
    cursor?: ProductVariantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductVariants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductVariants.
     */
    skip?: number
    distinct?: ProductVariantScalarFieldEnum | ProductVariantScalarFieldEnum[]
  }

  /**
   * ProductVariant create
   */
  export type ProductVariantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductVariant.
     */
    data: XOR<ProductVariantCreateInput, ProductVariantUncheckedCreateInput>
  }

  /**
   * ProductVariant createMany
   */
  export type ProductVariantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductVariants.
     */
    data: ProductVariantCreateManyInput | ProductVariantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductVariant createManyAndReturn
   */
  export type ProductVariantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * The data used to create many ProductVariants.
     */
    data: ProductVariantCreateManyInput | ProductVariantCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductVariant update
   */
  export type ProductVariantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductVariant.
     */
    data: XOR<ProductVariantUpdateInput, ProductVariantUncheckedUpdateInput>
    /**
     * Choose, which ProductVariant to update.
     */
    where: ProductVariantWhereUniqueInput
  }

  /**
   * ProductVariant updateMany
   */
  export type ProductVariantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductVariants.
     */
    data: XOR<ProductVariantUpdateManyMutationInput, ProductVariantUncheckedUpdateManyInput>
    /**
     * Filter which ProductVariants to update
     */
    where?: ProductVariantWhereInput
    /**
     * Limit how many ProductVariants to update.
     */
    limit?: number
  }

  /**
   * ProductVariant updateManyAndReturn
   */
  export type ProductVariantUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * The data used to update ProductVariants.
     */
    data: XOR<ProductVariantUpdateManyMutationInput, ProductVariantUncheckedUpdateManyInput>
    /**
     * Filter which ProductVariants to update
     */
    where?: ProductVariantWhereInput
    /**
     * Limit how many ProductVariants to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductVariant upsert
   */
  export type ProductVariantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductVariant to update in case it exists.
     */
    where: ProductVariantWhereUniqueInput
    /**
     * In case the ProductVariant found by the `where` argument doesn't exist, create a new ProductVariant with this data.
     */
    create: XOR<ProductVariantCreateInput, ProductVariantUncheckedCreateInput>
    /**
     * In case the ProductVariant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductVariantUpdateInput, ProductVariantUncheckedUpdateInput>
  }

  /**
   * ProductVariant delete
   */
  export type ProductVariantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    /**
     * Filter which ProductVariant to delete.
     */
    where: ProductVariantWhereUniqueInput
  }

  /**
   * ProductVariant deleteMany
   */
  export type ProductVariantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductVariants to delete
     */
    where?: ProductVariantWhereInput
    /**
     * Limit how many ProductVariants to delete.
     */
    limit?: number
  }

  /**
   * ProductVariant.parameter
   */
  export type ProductVariant$parameterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameters
     */
    select?: ParametersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Parameters
     */
    omit?: ParametersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParametersInclude<ExtArgs> | null
    where?: ParametersWhereInput
  }

  /**
   * ProductVariant.sizes
   */
  export type ProductVariant$sizesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sizes
     */
    select?: SizesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sizes
     */
    omit?: SizesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizesInclude<ExtArgs> | null
    where?: SizesWhereInput
    orderBy?: SizesOrderByWithRelationInput | SizesOrderByWithRelationInput[]
    cursor?: SizesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SizesScalarFieldEnum | SizesScalarFieldEnum[]
  }

  /**
   * ProductVariant.productAttribute
   */
  export type ProductVariant$productAttributeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAttribute
     */
    select?: ProductAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAttribute
     */
    omit?: ProductAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAttributeInclude<ExtArgs> | null
    where?: ProductAttributeWhereInput
  }

  /**
   * ProductVariant.subProduct
   */
  export type ProductVariant$subProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubProduct
     */
    select?: SubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubProduct
     */
    omit?: SubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubProductInclude<ExtArgs> | null
    where?: SubProductWhereInput
    orderBy?: SubProductOrderByWithRelationInput | SubProductOrderByWithRelationInput[]
    cursor?: SubProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubProductScalarFieldEnum | SubProductScalarFieldEnum[]
  }

  /**
   * ProductVariant.parentSubProduct
   */
  export type ProductVariant$parentSubProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubProduct
     */
    select?: SubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubProduct
     */
    omit?: SubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubProductInclude<ExtArgs> | null
    where?: SubProductWhereInput
    orderBy?: SubProductOrderByWithRelationInput | SubProductOrderByWithRelationInput[]
    cursor?: SubProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubProductScalarFieldEnum | SubProductScalarFieldEnum[]
  }

  /**
   * ProductVariant.CartItem
   */
  export type ProductVariant$CartItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    where?: CartItemWhereInput
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    cursor?: CartItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * ProductVariant.CartSubProduct
   */
  export type ProductVariant$CartSubProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartSubProduct
     */
    select?: CartSubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartSubProduct
     */
    omit?: CartSubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartSubProductInclude<ExtArgs> | null
    where?: CartSubProductWhereInput
    orderBy?: CartSubProductOrderByWithRelationInput | CartSubProductOrderByWithRelationInput[]
    cursor?: CartSubProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartSubProductScalarFieldEnum | CartSubProductScalarFieldEnum[]
  }

  /**
   * ProductVariant without action
   */
  export type ProductVariantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
  }


  /**
   * Model SubProduct
   */

  export type AggregateSubProduct = {
    _count: SubProductCountAggregateOutputType | null
    _avg: SubProductAvgAggregateOutputType | null
    _sum: SubProductSumAggregateOutputType | null
    _min: SubProductMinAggregateOutputType | null
    _max: SubProductMaxAggregateOutputType | null
  }

  export type SubProductAvgAggregateOutputType = {
    id: number | null
    productId: number | null
    variantId: number | null
    parentVariantId: number | null
    subSizeId: number | null
    quantity: number | null
  }

  export type SubProductSumAggregateOutputType = {
    id: number | null
    productId: number | null
    variantId: number | null
    parentVariantId: number | null
    subSizeId: number | null
    quantity: number | null
  }

  export type SubProductMinAggregateOutputType = {
    id: number | null
    productId: number | null
    variantId: number | null
    parentVariantId: number | null
    subSizeId: number | null
    quantity: number | null
    isReplace: boolean | null
    createdAt: Date | null
  }

  export type SubProductMaxAggregateOutputType = {
    id: number | null
    productId: number | null
    variantId: number | null
    parentVariantId: number | null
    subSizeId: number | null
    quantity: number | null
    isReplace: boolean | null
    createdAt: Date | null
  }

  export type SubProductCountAggregateOutputType = {
    id: number
    productId: number
    variantId: number
    parentVariantId: number
    subSizeId: number
    quantity: number
    isReplace: number
    createdAt: number
    _all: number
  }


  export type SubProductAvgAggregateInputType = {
    id?: true
    productId?: true
    variantId?: true
    parentVariantId?: true
    subSizeId?: true
    quantity?: true
  }

  export type SubProductSumAggregateInputType = {
    id?: true
    productId?: true
    variantId?: true
    parentVariantId?: true
    subSizeId?: true
    quantity?: true
  }

  export type SubProductMinAggregateInputType = {
    id?: true
    productId?: true
    variantId?: true
    parentVariantId?: true
    subSizeId?: true
    quantity?: true
    isReplace?: true
    createdAt?: true
  }

  export type SubProductMaxAggregateInputType = {
    id?: true
    productId?: true
    variantId?: true
    parentVariantId?: true
    subSizeId?: true
    quantity?: true
    isReplace?: true
    createdAt?: true
  }

  export type SubProductCountAggregateInputType = {
    id?: true
    productId?: true
    variantId?: true
    parentVariantId?: true
    subSizeId?: true
    quantity?: true
    isReplace?: true
    createdAt?: true
    _all?: true
  }

  export type SubProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubProduct to aggregate.
     */
    where?: SubProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubProducts to fetch.
     */
    orderBy?: SubProductOrderByWithRelationInput | SubProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SubProducts
    **/
    _count?: true | SubProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubProductMaxAggregateInputType
  }

  export type GetSubProductAggregateType<T extends SubProductAggregateArgs> = {
        [P in keyof T & keyof AggregateSubProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubProduct[P]>
      : GetScalarType<T[P], AggregateSubProduct[P]>
  }




  export type SubProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubProductWhereInput
    orderBy?: SubProductOrderByWithAggregationInput | SubProductOrderByWithAggregationInput[]
    by: SubProductScalarFieldEnum[] | SubProductScalarFieldEnum
    having?: SubProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubProductCountAggregateInputType | true
    _avg?: SubProductAvgAggregateInputType
    _sum?: SubProductSumAggregateInputType
    _min?: SubProductMinAggregateInputType
    _max?: SubProductMaxAggregateInputType
  }

  export type SubProductGroupByOutputType = {
    id: number
    productId: number
    variantId: number
    parentVariantId: number
    subSizeId: number
    quantity: number | null
    isReplace: boolean
    createdAt: Date
    _count: SubProductCountAggregateOutputType | null
    _avg: SubProductAvgAggregateOutputType | null
    _sum: SubProductSumAggregateOutputType | null
    _min: SubProductMinAggregateOutputType | null
    _max: SubProductMaxAggregateOutputType | null
  }

  type GetSubProductGroupByPayload<T extends SubProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubProductGroupByOutputType[P]>
            : GetScalarType<T[P], SubProductGroupByOutputType[P]>
        }
      >
    >


  export type SubProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    variantId?: boolean
    parentVariantId?: boolean
    subSizeId?: boolean
    quantity?: boolean
    isReplace?: boolean
    createdAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    variant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    parentVariant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    size?: boolean | SizesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subProduct"]>

  export type SubProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    variantId?: boolean
    parentVariantId?: boolean
    subSizeId?: boolean
    quantity?: boolean
    isReplace?: boolean
    createdAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    variant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    parentVariant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    size?: boolean | SizesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subProduct"]>

  export type SubProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    variantId?: boolean
    parentVariantId?: boolean
    subSizeId?: boolean
    quantity?: boolean
    isReplace?: boolean
    createdAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    variant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    parentVariant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    size?: boolean | SizesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subProduct"]>

  export type SubProductSelectScalar = {
    id?: boolean
    productId?: boolean
    variantId?: boolean
    parentVariantId?: boolean
    subSizeId?: boolean
    quantity?: boolean
    isReplace?: boolean
    createdAt?: boolean
  }

  export type SubProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "productId" | "variantId" | "parentVariantId" | "subSizeId" | "quantity" | "isReplace" | "createdAt", ExtArgs["result"]["subProduct"]>
  export type SubProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    variant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    parentVariant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    size?: boolean | SizesDefaultArgs<ExtArgs>
  }
  export type SubProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    variant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    parentVariant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    size?: boolean | SizesDefaultArgs<ExtArgs>
  }
  export type SubProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    variant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    parentVariant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    size?: boolean | SizesDefaultArgs<ExtArgs>
  }

  export type $SubProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SubProduct"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
      variant: Prisma.$ProductVariantPayload<ExtArgs>
      parentVariant: Prisma.$ProductVariantPayload<ExtArgs>
      size: Prisma.$SizesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      productId: number
      variantId: number
      parentVariantId: number
      subSizeId: number
      quantity: number | null
      isReplace: boolean
      createdAt: Date
    }, ExtArgs["result"]["subProduct"]>
    composites: {}
  }

  type SubProductGetPayload<S extends boolean | null | undefined | SubProductDefaultArgs> = $Result.GetResult<Prisma.$SubProductPayload, S>

  type SubProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubProductCountAggregateInputType | true
    }

  export interface SubProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubProduct'], meta: { name: 'SubProduct' } }
    /**
     * Find zero or one SubProduct that matches the filter.
     * @param {SubProductFindUniqueArgs} args - Arguments to find a SubProduct
     * @example
     * // Get one SubProduct
     * const subProduct = await prisma.subProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubProductFindUniqueArgs>(args: SelectSubset<T, SubProductFindUniqueArgs<ExtArgs>>): Prisma__SubProductClient<$Result.GetResult<Prisma.$SubProductPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one SubProduct that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubProductFindUniqueOrThrowArgs} args - Arguments to find a SubProduct
     * @example
     * // Get one SubProduct
     * const subProduct = await prisma.subProduct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubProductFindUniqueOrThrowArgs>(args: SelectSubset<T, SubProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubProductClient<$Result.GetResult<Prisma.$SubProductPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first SubProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubProductFindFirstArgs} args - Arguments to find a SubProduct
     * @example
     * // Get one SubProduct
     * const subProduct = await prisma.subProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubProductFindFirstArgs>(args?: SelectSubset<T, SubProductFindFirstArgs<ExtArgs>>): Prisma__SubProductClient<$Result.GetResult<Prisma.$SubProductPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first SubProduct that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubProductFindFirstOrThrowArgs} args - Arguments to find a SubProduct
     * @example
     * // Get one SubProduct
     * const subProduct = await prisma.subProduct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubProductFindFirstOrThrowArgs>(args?: SelectSubset<T, SubProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubProductClient<$Result.GetResult<Prisma.$SubProductPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more SubProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubProducts
     * const subProducts = await prisma.subProduct.findMany()
     * 
     * // Get first 10 SubProducts
     * const subProducts = await prisma.subProduct.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subProductWithIdOnly = await prisma.subProduct.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubProductFindManyArgs>(args?: SelectSubset<T, SubProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubProductPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a SubProduct.
     * @param {SubProductCreateArgs} args - Arguments to create a SubProduct.
     * @example
     * // Create one SubProduct
     * const SubProduct = await prisma.subProduct.create({
     *   data: {
     *     // ... data to create a SubProduct
     *   }
     * })
     * 
     */
    create<T extends SubProductCreateArgs>(args: SelectSubset<T, SubProductCreateArgs<ExtArgs>>): Prisma__SubProductClient<$Result.GetResult<Prisma.$SubProductPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many SubProducts.
     * @param {SubProductCreateManyArgs} args - Arguments to create many SubProducts.
     * @example
     * // Create many SubProducts
     * const subProduct = await prisma.subProduct.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubProductCreateManyArgs>(args?: SelectSubset<T, SubProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SubProducts and returns the data saved in the database.
     * @param {SubProductCreateManyAndReturnArgs} args - Arguments to create many SubProducts.
     * @example
     * // Create many SubProducts
     * const subProduct = await prisma.subProduct.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SubProducts and only return the `id`
     * const subProductWithIdOnly = await prisma.subProduct.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubProductCreateManyAndReturnArgs>(args?: SelectSubset<T, SubProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubProductPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a SubProduct.
     * @param {SubProductDeleteArgs} args - Arguments to delete one SubProduct.
     * @example
     * // Delete one SubProduct
     * const SubProduct = await prisma.subProduct.delete({
     *   where: {
     *     // ... filter to delete one SubProduct
     *   }
     * })
     * 
     */
    delete<T extends SubProductDeleteArgs>(args: SelectSubset<T, SubProductDeleteArgs<ExtArgs>>): Prisma__SubProductClient<$Result.GetResult<Prisma.$SubProductPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one SubProduct.
     * @param {SubProductUpdateArgs} args - Arguments to update one SubProduct.
     * @example
     * // Update one SubProduct
     * const subProduct = await prisma.subProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubProductUpdateArgs>(args: SelectSubset<T, SubProductUpdateArgs<ExtArgs>>): Prisma__SubProductClient<$Result.GetResult<Prisma.$SubProductPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more SubProducts.
     * @param {SubProductDeleteManyArgs} args - Arguments to filter SubProducts to delete.
     * @example
     * // Delete a few SubProducts
     * const { count } = await prisma.subProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubProductDeleteManyArgs>(args?: SelectSubset<T, SubProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubProducts
     * const subProduct = await prisma.subProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubProductUpdateManyArgs>(args: SelectSubset<T, SubProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubProducts and returns the data updated in the database.
     * @param {SubProductUpdateManyAndReturnArgs} args - Arguments to update many SubProducts.
     * @example
     * // Update many SubProducts
     * const subProduct = await prisma.subProduct.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SubProducts and only return the `id`
     * const subProductWithIdOnly = await prisma.subProduct.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubProductUpdateManyAndReturnArgs>(args: SelectSubset<T, SubProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubProductPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one SubProduct.
     * @param {SubProductUpsertArgs} args - Arguments to update or create a SubProduct.
     * @example
     * // Update or create a SubProduct
     * const subProduct = await prisma.subProduct.upsert({
     *   create: {
     *     // ... data to create a SubProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubProduct we want to update
     *   }
     * })
     */
    upsert<T extends SubProductUpsertArgs>(args: SelectSubset<T, SubProductUpsertArgs<ExtArgs>>): Prisma__SubProductClient<$Result.GetResult<Prisma.$SubProductPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of SubProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubProductCountArgs} args - Arguments to filter SubProducts to count.
     * @example
     * // Count the number of SubProducts
     * const count = await prisma.subProduct.count({
     *   where: {
     *     // ... the filter for the SubProducts we want to count
     *   }
     * })
    **/
    count<T extends SubProductCountArgs>(
      args?: Subset<T, SubProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubProductAggregateArgs>(args: Subset<T, SubProductAggregateArgs>): Prisma.PrismaPromise<GetSubProductAggregateType<T>>

    /**
     * Group by SubProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubProductGroupByArgs['orderBy'] }
        : { orderBy?: SubProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SubProduct model
   */
  readonly fields: SubProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SubProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    variant<T extends ProductVariantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductVariantDefaultArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    parentVariant<T extends ProductVariantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductVariantDefaultArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    size<T extends SizesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SizesDefaultArgs<ExtArgs>>): Prisma__SizesClient<$Result.GetResult<Prisma.$SizesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SubProduct model
   */ 
  interface SubProductFieldRefs {
    readonly id: FieldRef<"SubProduct", 'Int'>
    readonly productId: FieldRef<"SubProduct", 'Int'>
    readonly variantId: FieldRef<"SubProduct", 'Int'>
    readonly parentVariantId: FieldRef<"SubProduct", 'Int'>
    readonly subSizeId: FieldRef<"SubProduct", 'Int'>
    readonly quantity: FieldRef<"SubProduct", 'Int'>
    readonly isReplace: FieldRef<"SubProduct", 'Boolean'>
    readonly createdAt: FieldRef<"SubProduct", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SubProduct findUnique
   */
  export type SubProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubProduct
     */
    select?: SubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubProduct
     */
    omit?: SubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubProductInclude<ExtArgs> | null
    /**
     * Filter, which SubProduct to fetch.
     */
    where: SubProductWhereUniqueInput
  }

  /**
   * SubProduct findUniqueOrThrow
   */
  export type SubProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubProduct
     */
    select?: SubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubProduct
     */
    omit?: SubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubProductInclude<ExtArgs> | null
    /**
     * Filter, which SubProduct to fetch.
     */
    where: SubProductWhereUniqueInput
  }

  /**
   * SubProduct findFirst
   */
  export type SubProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubProduct
     */
    select?: SubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubProduct
     */
    omit?: SubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubProductInclude<ExtArgs> | null
    /**
     * Filter, which SubProduct to fetch.
     */
    where?: SubProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubProducts to fetch.
     */
    orderBy?: SubProductOrderByWithRelationInput | SubProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubProducts.
     */
    cursor?: SubProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubProducts.
     */
    distinct?: SubProductScalarFieldEnum | SubProductScalarFieldEnum[]
  }

  /**
   * SubProduct findFirstOrThrow
   */
  export type SubProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubProduct
     */
    select?: SubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubProduct
     */
    omit?: SubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubProductInclude<ExtArgs> | null
    /**
     * Filter, which SubProduct to fetch.
     */
    where?: SubProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubProducts to fetch.
     */
    orderBy?: SubProductOrderByWithRelationInput | SubProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubProducts.
     */
    cursor?: SubProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubProducts.
     */
    distinct?: SubProductScalarFieldEnum | SubProductScalarFieldEnum[]
  }

  /**
   * SubProduct findMany
   */
  export type SubProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubProduct
     */
    select?: SubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubProduct
     */
    omit?: SubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubProductInclude<ExtArgs> | null
    /**
     * Filter, which SubProducts to fetch.
     */
    where?: SubProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubProducts to fetch.
     */
    orderBy?: SubProductOrderByWithRelationInput | SubProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SubProducts.
     */
    cursor?: SubProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubProducts.
     */
    skip?: number
    distinct?: SubProductScalarFieldEnum | SubProductScalarFieldEnum[]
  }

  /**
   * SubProduct create
   */
  export type SubProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubProduct
     */
    select?: SubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubProduct
     */
    omit?: SubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubProductInclude<ExtArgs> | null
    /**
     * The data needed to create a SubProduct.
     */
    data: XOR<SubProductCreateInput, SubProductUncheckedCreateInput>
  }

  /**
   * SubProduct createMany
   */
  export type SubProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SubProducts.
     */
    data: SubProductCreateManyInput | SubProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SubProduct createManyAndReturn
   */
  export type SubProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubProduct
     */
    select?: SubProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SubProduct
     */
    omit?: SubProductOmit<ExtArgs> | null
    /**
     * The data used to create many SubProducts.
     */
    data: SubProductCreateManyInput | SubProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SubProduct update
   */
  export type SubProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubProduct
     */
    select?: SubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubProduct
     */
    omit?: SubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubProductInclude<ExtArgs> | null
    /**
     * The data needed to update a SubProduct.
     */
    data: XOR<SubProductUpdateInput, SubProductUncheckedUpdateInput>
    /**
     * Choose, which SubProduct to update.
     */
    where: SubProductWhereUniqueInput
  }

  /**
   * SubProduct updateMany
   */
  export type SubProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SubProducts.
     */
    data: XOR<SubProductUpdateManyMutationInput, SubProductUncheckedUpdateManyInput>
    /**
     * Filter which SubProducts to update
     */
    where?: SubProductWhereInput
    /**
     * Limit how many SubProducts to update.
     */
    limit?: number
  }

  /**
   * SubProduct updateManyAndReturn
   */
  export type SubProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubProduct
     */
    select?: SubProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SubProduct
     */
    omit?: SubProductOmit<ExtArgs> | null
    /**
     * The data used to update SubProducts.
     */
    data: XOR<SubProductUpdateManyMutationInput, SubProductUncheckedUpdateManyInput>
    /**
     * Filter which SubProducts to update
     */
    where?: SubProductWhereInput
    /**
     * Limit how many SubProducts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubProductIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SubProduct upsert
   */
  export type SubProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubProduct
     */
    select?: SubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubProduct
     */
    omit?: SubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubProductInclude<ExtArgs> | null
    /**
     * The filter to search for the SubProduct to update in case it exists.
     */
    where: SubProductWhereUniqueInput
    /**
     * In case the SubProduct found by the `where` argument doesn't exist, create a new SubProduct with this data.
     */
    create: XOR<SubProductCreateInput, SubProductUncheckedCreateInput>
    /**
     * In case the SubProduct was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubProductUpdateInput, SubProductUncheckedUpdateInput>
  }

  /**
   * SubProduct delete
   */
  export type SubProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubProduct
     */
    select?: SubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubProduct
     */
    omit?: SubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubProductInclude<ExtArgs> | null
    /**
     * Filter which SubProduct to delete.
     */
    where: SubProductWhereUniqueInput
  }

  /**
   * SubProduct deleteMany
   */
  export type SubProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubProducts to delete
     */
    where?: SubProductWhereInput
    /**
     * Limit how many SubProducts to delete.
     */
    limit?: number
  }

  /**
   * SubProduct without action
   */
  export type SubProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubProduct
     */
    select?: SubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubProduct
     */
    omit?: SubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubProductInclude<ExtArgs> | null
  }


  /**
   * Model ProductAttribute
   */

  export type AggregateProductAttribute = {
    _count: ProductAttributeCountAggregateOutputType | null
    _avg: ProductAttributeAvgAggregateOutputType | null
    _sum: ProductAttributeSumAggregateOutputType | null
    _min: ProductAttributeMinAggregateOutputType | null
    _max: ProductAttributeMaxAggregateOutputType | null
  }

  export type ProductAttributeAvgAggregateOutputType = {
    id: number | null
    productVariantId: number | null
    variantTypesId: number | null
  }

  export type ProductAttributeSumAggregateOutputType = {
    id: number | null
    productVariantId: number | null
    variantTypesId: number | null
  }

  export type ProductAttributeMinAggregateOutputType = {
    id: number | null
    name: string | null
    productVariantId: number | null
    variantTypesId: number | null
  }

  export type ProductAttributeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    productVariantId: number | null
    variantTypesId: number | null
  }

  export type ProductAttributeCountAggregateOutputType = {
    id: number
    name: number
    productVariantId: number
    variantTypesId: number
    _all: number
  }


  export type ProductAttributeAvgAggregateInputType = {
    id?: true
    productVariantId?: true
    variantTypesId?: true
  }

  export type ProductAttributeSumAggregateInputType = {
    id?: true
    productVariantId?: true
    variantTypesId?: true
  }

  export type ProductAttributeMinAggregateInputType = {
    id?: true
    name?: true
    productVariantId?: true
    variantTypesId?: true
  }

  export type ProductAttributeMaxAggregateInputType = {
    id?: true
    name?: true
    productVariantId?: true
    variantTypesId?: true
  }

  export type ProductAttributeCountAggregateInputType = {
    id?: true
    name?: true
    productVariantId?: true
    variantTypesId?: true
    _all?: true
  }

  export type ProductAttributeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductAttribute to aggregate.
     */
    where?: ProductAttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductAttributes to fetch.
     */
    orderBy?: ProductAttributeOrderByWithRelationInput | ProductAttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductAttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductAttributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductAttributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductAttributes
    **/
    _count?: true | ProductAttributeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAttributeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductAttributeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductAttributeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductAttributeMaxAggregateInputType
  }

  export type GetProductAttributeAggregateType<T extends ProductAttributeAggregateArgs> = {
        [P in keyof T & keyof AggregateProductAttribute]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductAttribute[P]>
      : GetScalarType<T[P], AggregateProductAttribute[P]>
  }




  export type ProductAttributeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductAttributeWhereInput
    orderBy?: ProductAttributeOrderByWithAggregationInput | ProductAttributeOrderByWithAggregationInput[]
    by: ProductAttributeScalarFieldEnum[] | ProductAttributeScalarFieldEnum
    having?: ProductAttributeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductAttributeCountAggregateInputType | true
    _avg?: ProductAttributeAvgAggregateInputType
    _sum?: ProductAttributeSumAggregateInputType
    _min?: ProductAttributeMinAggregateInputType
    _max?: ProductAttributeMaxAggregateInputType
  }

  export type ProductAttributeGroupByOutputType = {
    id: number
    name: string | null
    productVariantId: number
    variantTypesId: number | null
    _count: ProductAttributeCountAggregateOutputType | null
    _avg: ProductAttributeAvgAggregateOutputType | null
    _sum: ProductAttributeSumAggregateOutputType | null
    _min: ProductAttributeMinAggregateOutputType | null
    _max: ProductAttributeMaxAggregateOutputType | null
  }

  type GetProductAttributeGroupByPayload<T extends ProductAttributeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductAttributeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductAttributeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductAttributeGroupByOutputType[P]>
            : GetScalarType<T[P], ProductAttributeGroupByOutputType[P]>
        }
      >
    >


  export type ProductAttributeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    productVariantId?: boolean
    variantTypesId?: boolean
    productVariant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    variantTypes?: boolean | ProductAttribute$variantTypesArgs<ExtArgs>
  }, ExtArgs["result"]["productAttribute"]>

  export type ProductAttributeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    productVariantId?: boolean
    variantTypesId?: boolean
    productVariant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    variantTypes?: boolean | ProductAttribute$variantTypesArgs<ExtArgs>
  }, ExtArgs["result"]["productAttribute"]>

  export type ProductAttributeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    productVariantId?: boolean
    variantTypesId?: boolean
    productVariant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    variantTypes?: boolean | ProductAttribute$variantTypesArgs<ExtArgs>
  }, ExtArgs["result"]["productAttribute"]>

  export type ProductAttributeSelectScalar = {
    id?: boolean
    name?: boolean
    productVariantId?: boolean
    variantTypesId?: boolean
  }

  export type ProductAttributeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "productVariantId" | "variantTypesId", ExtArgs["result"]["productAttribute"]>
  export type ProductAttributeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productVariant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    variantTypes?: boolean | ProductAttribute$variantTypesArgs<ExtArgs>
  }
  export type ProductAttributeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productVariant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    variantTypes?: boolean | ProductAttribute$variantTypesArgs<ExtArgs>
  }
  export type ProductAttributeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productVariant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    variantTypes?: boolean | ProductAttribute$variantTypesArgs<ExtArgs>
  }

  export type $ProductAttributePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductAttribute"
    objects: {
      productVariant: Prisma.$ProductVariantPayload<ExtArgs>
      variantTypes: Prisma.$VariantTypesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string | null
      productVariantId: number
      variantTypesId: number | null
    }, ExtArgs["result"]["productAttribute"]>
    composites: {}
  }

  type ProductAttributeGetPayload<S extends boolean | null | undefined | ProductAttributeDefaultArgs> = $Result.GetResult<Prisma.$ProductAttributePayload, S>

  type ProductAttributeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductAttributeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductAttributeCountAggregateInputType | true
    }

  export interface ProductAttributeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductAttribute'], meta: { name: 'ProductAttribute' } }
    /**
     * Find zero or one ProductAttribute that matches the filter.
     * @param {ProductAttributeFindUniqueArgs} args - Arguments to find a ProductAttribute
     * @example
     * // Get one ProductAttribute
     * const productAttribute = await prisma.productAttribute.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductAttributeFindUniqueArgs>(args: SelectSubset<T, ProductAttributeFindUniqueArgs<ExtArgs>>): Prisma__ProductAttributeClient<$Result.GetResult<Prisma.$ProductAttributePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one ProductAttribute that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductAttributeFindUniqueOrThrowArgs} args - Arguments to find a ProductAttribute
     * @example
     * // Get one ProductAttribute
     * const productAttribute = await prisma.productAttribute.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductAttributeFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductAttributeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductAttributeClient<$Result.GetResult<Prisma.$ProductAttributePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first ProductAttribute that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAttributeFindFirstArgs} args - Arguments to find a ProductAttribute
     * @example
     * // Get one ProductAttribute
     * const productAttribute = await prisma.productAttribute.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductAttributeFindFirstArgs>(args?: SelectSubset<T, ProductAttributeFindFirstArgs<ExtArgs>>): Prisma__ProductAttributeClient<$Result.GetResult<Prisma.$ProductAttributePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first ProductAttribute that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAttributeFindFirstOrThrowArgs} args - Arguments to find a ProductAttribute
     * @example
     * // Get one ProductAttribute
     * const productAttribute = await prisma.productAttribute.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductAttributeFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductAttributeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductAttributeClient<$Result.GetResult<Prisma.$ProductAttributePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more ProductAttributes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAttributeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductAttributes
     * const productAttributes = await prisma.productAttribute.findMany()
     * 
     * // Get first 10 ProductAttributes
     * const productAttributes = await prisma.productAttribute.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productAttributeWithIdOnly = await prisma.productAttribute.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductAttributeFindManyArgs>(args?: SelectSubset<T, ProductAttributeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductAttributePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a ProductAttribute.
     * @param {ProductAttributeCreateArgs} args - Arguments to create a ProductAttribute.
     * @example
     * // Create one ProductAttribute
     * const ProductAttribute = await prisma.productAttribute.create({
     *   data: {
     *     // ... data to create a ProductAttribute
     *   }
     * })
     * 
     */
    create<T extends ProductAttributeCreateArgs>(args: SelectSubset<T, ProductAttributeCreateArgs<ExtArgs>>): Prisma__ProductAttributeClient<$Result.GetResult<Prisma.$ProductAttributePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many ProductAttributes.
     * @param {ProductAttributeCreateManyArgs} args - Arguments to create many ProductAttributes.
     * @example
     * // Create many ProductAttributes
     * const productAttribute = await prisma.productAttribute.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductAttributeCreateManyArgs>(args?: SelectSubset<T, ProductAttributeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductAttributes and returns the data saved in the database.
     * @param {ProductAttributeCreateManyAndReturnArgs} args - Arguments to create many ProductAttributes.
     * @example
     * // Create many ProductAttributes
     * const productAttribute = await prisma.productAttribute.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductAttributes and only return the `id`
     * const productAttributeWithIdOnly = await prisma.productAttribute.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductAttributeCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductAttributeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductAttributePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a ProductAttribute.
     * @param {ProductAttributeDeleteArgs} args - Arguments to delete one ProductAttribute.
     * @example
     * // Delete one ProductAttribute
     * const ProductAttribute = await prisma.productAttribute.delete({
     *   where: {
     *     // ... filter to delete one ProductAttribute
     *   }
     * })
     * 
     */
    delete<T extends ProductAttributeDeleteArgs>(args: SelectSubset<T, ProductAttributeDeleteArgs<ExtArgs>>): Prisma__ProductAttributeClient<$Result.GetResult<Prisma.$ProductAttributePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one ProductAttribute.
     * @param {ProductAttributeUpdateArgs} args - Arguments to update one ProductAttribute.
     * @example
     * // Update one ProductAttribute
     * const productAttribute = await prisma.productAttribute.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductAttributeUpdateArgs>(args: SelectSubset<T, ProductAttributeUpdateArgs<ExtArgs>>): Prisma__ProductAttributeClient<$Result.GetResult<Prisma.$ProductAttributePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more ProductAttributes.
     * @param {ProductAttributeDeleteManyArgs} args - Arguments to filter ProductAttributes to delete.
     * @example
     * // Delete a few ProductAttributes
     * const { count } = await prisma.productAttribute.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductAttributeDeleteManyArgs>(args?: SelectSubset<T, ProductAttributeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductAttributes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAttributeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductAttributes
     * const productAttribute = await prisma.productAttribute.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductAttributeUpdateManyArgs>(args: SelectSubset<T, ProductAttributeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductAttributes and returns the data updated in the database.
     * @param {ProductAttributeUpdateManyAndReturnArgs} args - Arguments to update many ProductAttributes.
     * @example
     * // Update many ProductAttributes
     * const productAttribute = await prisma.productAttribute.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProductAttributes and only return the `id`
     * const productAttributeWithIdOnly = await prisma.productAttribute.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductAttributeUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductAttributeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductAttributePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one ProductAttribute.
     * @param {ProductAttributeUpsertArgs} args - Arguments to update or create a ProductAttribute.
     * @example
     * // Update or create a ProductAttribute
     * const productAttribute = await prisma.productAttribute.upsert({
     *   create: {
     *     // ... data to create a ProductAttribute
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductAttribute we want to update
     *   }
     * })
     */
    upsert<T extends ProductAttributeUpsertArgs>(args: SelectSubset<T, ProductAttributeUpsertArgs<ExtArgs>>): Prisma__ProductAttributeClient<$Result.GetResult<Prisma.$ProductAttributePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of ProductAttributes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAttributeCountArgs} args - Arguments to filter ProductAttributes to count.
     * @example
     * // Count the number of ProductAttributes
     * const count = await prisma.productAttribute.count({
     *   where: {
     *     // ... the filter for the ProductAttributes we want to count
     *   }
     * })
    **/
    count<T extends ProductAttributeCountArgs>(
      args?: Subset<T, ProductAttributeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductAttributeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductAttribute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAttributeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAttributeAggregateArgs>(args: Subset<T, ProductAttributeAggregateArgs>): Prisma.PrismaPromise<GetProductAttributeAggregateType<T>>

    /**
     * Group by ProductAttribute.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAttributeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductAttributeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductAttributeGroupByArgs['orderBy'] }
        : { orderBy?: ProductAttributeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductAttributeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductAttributeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductAttribute model
   */
  readonly fields: ProductAttributeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductAttribute.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductAttributeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    productVariant<T extends ProductVariantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductVariantDefaultArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    variantTypes<T extends ProductAttribute$variantTypesArgs<ExtArgs> = {}>(args?: Subset<T, ProductAttribute$variantTypesArgs<ExtArgs>>): Prisma__VariantTypesClient<$Result.GetResult<Prisma.$VariantTypesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductAttribute model
   */ 
  interface ProductAttributeFieldRefs {
    readonly id: FieldRef<"ProductAttribute", 'Int'>
    readonly name: FieldRef<"ProductAttribute", 'String'>
    readonly productVariantId: FieldRef<"ProductAttribute", 'Int'>
    readonly variantTypesId: FieldRef<"ProductAttribute", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ProductAttribute findUnique
   */
  export type ProductAttributeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAttribute
     */
    select?: ProductAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAttribute
     */
    omit?: ProductAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAttributeInclude<ExtArgs> | null
    /**
     * Filter, which ProductAttribute to fetch.
     */
    where: ProductAttributeWhereUniqueInput
  }

  /**
   * ProductAttribute findUniqueOrThrow
   */
  export type ProductAttributeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAttribute
     */
    select?: ProductAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAttribute
     */
    omit?: ProductAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAttributeInclude<ExtArgs> | null
    /**
     * Filter, which ProductAttribute to fetch.
     */
    where: ProductAttributeWhereUniqueInput
  }

  /**
   * ProductAttribute findFirst
   */
  export type ProductAttributeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAttribute
     */
    select?: ProductAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAttribute
     */
    omit?: ProductAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAttributeInclude<ExtArgs> | null
    /**
     * Filter, which ProductAttribute to fetch.
     */
    where?: ProductAttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductAttributes to fetch.
     */
    orderBy?: ProductAttributeOrderByWithRelationInput | ProductAttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductAttributes.
     */
    cursor?: ProductAttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductAttributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductAttributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductAttributes.
     */
    distinct?: ProductAttributeScalarFieldEnum | ProductAttributeScalarFieldEnum[]
  }

  /**
   * ProductAttribute findFirstOrThrow
   */
  export type ProductAttributeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAttribute
     */
    select?: ProductAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAttribute
     */
    omit?: ProductAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAttributeInclude<ExtArgs> | null
    /**
     * Filter, which ProductAttribute to fetch.
     */
    where?: ProductAttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductAttributes to fetch.
     */
    orderBy?: ProductAttributeOrderByWithRelationInput | ProductAttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductAttributes.
     */
    cursor?: ProductAttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductAttributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductAttributes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductAttributes.
     */
    distinct?: ProductAttributeScalarFieldEnum | ProductAttributeScalarFieldEnum[]
  }

  /**
   * ProductAttribute findMany
   */
  export type ProductAttributeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAttribute
     */
    select?: ProductAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAttribute
     */
    omit?: ProductAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAttributeInclude<ExtArgs> | null
    /**
     * Filter, which ProductAttributes to fetch.
     */
    where?: ProductAttributeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductAttributes to fetch.
     */
    orderBy?: ProductAttributeOrderByWithRelationInput | ProductAttributeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductAttributes.
     */
    cursor?: ProductAttributeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductAttributes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductAttributes.
     */
    skip?: number
    distinct?: ProductAttributeScalarFieldEnum | ProductAttributeScalarFieldEnum[]
  }

  /**
   * ProductAttribute create
   */
  export type ProductAttributeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAttribute
     */
    select?: ProductAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAttribute
     */
    omit?: ProductAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAttributeInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductAttribute.
     */
    data: XOR<ProductAttributeCreateInput, ProductAttributeUncheckedCreateInput>
  }

  /**
   * ProductAttribute createMany
   */
  export type ProductAttributeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductAttributes.
     */
    data: ProductAttributeCreateManyInput | ProductAttributeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductAttribute createManyAndReturn
   */
  export type ProductAttributeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAttribute
     */
    select?: ProductAttributeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAttribute
     */
    omit?: ProductAttributeOmit<ExtArgs> | null
    /**
     * The data used to create many ProductAttributes.
     */
    data: ProductAttributeCreateManyInput | ProductAttributeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAttributeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductAttribute update
   */
  export type ProductAttributeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAttribute
     */
    select?: ProductAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAttribute
     */
    omit?: ProductAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAttributeInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductAttribute.
     */
    data: XOR<ProductAttributeUpdateInput, ProductAttributeUncheckedUpdateInput>
    /**
     * Choose, which ProductAttribute to update.
     */
    where: ProductAttributeWhereUniqueInput
  }

  /**
   * ProductAttribute updateMany
   */
  export type ProductAttributeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductAttributes.
     */
    data: XOR<ProductAttributeUpdateManyMutationInput, ProductAttributeUncheckedUpdateManyInput>
    /**
     * Filter which ProductAttributes to update
     */
    where?: ProductAttributeWhereInput
    /**
     * Limit how many ProductAttributes to update.
     */
    limit?: number
  }

  /**
   * ProductAttribute updateManyAndReturn
   */
  export type ProductAttributeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAttribute
     */
    select?: ProductAttributeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAttribute
     */
    omit?: ProductAttributeOmit<ExtArgs> | null
    /**
     * The data used to update ProductAttributes.
     */
    data: XOR<ProductAttributeUpdateManyMutationInput, ProductAttributeUncheckedUpdateManyInput>
    /**
     * Filter which ProductAttributes to update
     */
    where?: ProductAttributeWhereInput
    /**
     * Limit how many ProductAttributes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAttributeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductAttribute upsert
   */
  export type ProductAttributeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAttribute
     */
    select?: ProductAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAttribute
     */
    omit?: ProductAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAttributeInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductAttribute to update in case it exists.
     */
    where: ProductAttributeWhereUniqueInput
    /**
     * In case the ProductAttribute found by the `where` argument doesn't exist, create a new ProductAttribute with this data.
     */
    create: XOR<ProductAttributeCreateInput, ProductAttributeUncheckedCreateInput>
    /**
     * In case the ProductAttribute was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductAttributeUpdateInput, ProductAttributeUncheckedUpdateInput>
  }

  /**
   * ProductAttribute delete
   */
  export type ProductAttributeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAttribute
     */
    select?: ProductAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAttribute
     */
    omit?: ProductAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAttributeInclude<ExtArgs> | null
    /**
     * Filter which ProductAttribute to delete.
     */
    where: ProductAttributeWhereUniqueInput
  }

  /**
   * ProductAttribute deleteMany
   */
  export type ProductAttributeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductAttributes to delete
     */
    where?: ProductAttributeWhereInput
    /**
     * Limit how many ProductAttributes to delete.
     */
    limit?: number
  }

  /**
   * ProductAttribute.variantTypes
   */
  export type ProductAttribute$variantTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantTypes
     */
    select?: VariantTypesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VariantTypes
     */
    omit?: VariantTypesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantTypesInclude<ExtArgs> | null
    where?: VariantTypesWhereInput
  }

  /**
   * ProductAttribute without action
   */
  export type ProductAttributeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAttribute
     */
    select?: ProductAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAttribute
     */
    omit?: ProductAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAttributeInclude<ExtArgs> | null
  }


  /**
   * Model VariantTypes
   */

  export type AggregateVariantTypes = {
    _count: VariantTypesCountAggregateOutputType | null
    _avg: VariantTypesAvgAggregateOutputType | null
    _sum: VariantTypesSumAggregateOutputType | null
    _min: VariantTypesMinAggregateOutputType | null
    _max: VariantTypesMaxAggregateOutputType | null
  }

  export type VariantTypesAvgAggregateOutputType = {
    id: number | null
  }

  export type VariantTypesSumAggregateOutputType = {
    id: number | null
  }

  export type VariantTypesMinAggregateOutputType = {
    id: number | null
    value: string | null
    typeProduct: $Enums.TypeProduct | null
  }

  export type VariantTypesMaxAggregateOutputType = {
    id: number | null
    value: string | null
    typeProduct: $Enums.TypeProduct | null
  }

  export type VariantTypesCountAggregateOutputType = {
    id: number
    value: number
    typeProduct: number
    _all: number
  }


  export type VariantTypesAvgAggregateInputType = {
    id?: true
  }

  export type VariantTypesSumAggregateInputType = {
    id?: true
  }

  export type VariantTypesMinAggregateInputType = {
    id?: true
    value?: true
    typeProduct?: true
  }

  export type VariantTypesMaxAggregateInputType = {
    id?: true
    value?: true
    typeProduct?: true
  }

  export type VariantTypesCountAggregateInputType = {
    id?: true
    value?: true
    typeProduct?: true
    _all?: true
  }

  export type VariantTypesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VariantTypes to aggregate.
     */
    where?: VariantTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VariantTypes to fetch.
     */
    orderBy?: VariantTypesOrderByWithRelationInput | VariantTypesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VariantTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VariantTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VariantTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VariantTypes
    **/
    _count?: true | VariantTypesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VariantTypesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VariantTypesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VariantTypesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VariantTypesMaxAggregateInputType
  }

  export type GetVariantTypesAggregateType<T extends VariantTypesAggregateArgs> = {
        [P in keyof T & keyof AggregateVariantTypes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVariantTypes[P]>
      : GetScalarType<T[P], AggregateVariantTypes[P]>
  }




  export type VariantTypesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VariantTypesWhereInput
    orderBy?: VariantTypesOrderByWithAggregationInput | VariantTypesOrderByWithAggregationInput[]
    by: VariantTypesScalarFieldEnum[] | VariantTypesScalarFieldEnum
    having?: VariantTypesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VariantTypesCountAggregateInputType | true
    _avg?: VariantTypesAvgAggregateInputType
    _sum?: VariantTypesSumAggregateInputType
    _min?: VariantTypesMinAggregateInputType
    _max?: VariantTypesMaxAggregateInputType
  }

  export type VariantTypesGroupByOutputType = {
    id: number
    value: string
    typeProduct: $Enums.TypeProduct
    _count: VariantTypesCountAggregateOutputType | null
    _avg: VariantTypesAvgAggregateOutputType | null
    _sum: VariantTypesSumAggregateOutputType | null
    _min: VariantTypesMinAggregateOutputType | null
    _max: VariantTypesMaxAggregateOutputType | null
  }

  type GetVariantTypesGroupByPayload<T extends VariantTypesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VariantTypesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VariantTypesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VariantTypesGroupByOutputType[P]>
            : GetScalarType<T[P], VariantTypesGroupByOutputType[P]>
        }
      >
    >


  export type VariantTypesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    value?: boolean
    typeProduct?: boolean
    categories?: boolean | VariantTypes$categoriesArgs<ExtArgs>
    productAttribute?: boolean | VariantTypes$productAttributeArgs<ExtArgs>
    _count?: boolean | VariantTypesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["variantTypes"]>

  export type VariantTypesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    value?: boolean
    typeProduct?: boolean
  }, ExtArgs["result"]["variantTypes"]>

  export type VariantTypesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    value?: boolean
    typeProduct?: boolean
  }, ExtArgs["result"]["variantTypes"]>

  export type VariantTypesSelectScalar = {
    id?: boolean
    value?: boolean
    typeProduct?: boolean
  }

  export type VariantTypesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "value" | "typeProduct", ExtArgs["result"]["variantTypes"]>
  export type VariantTypesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | VariantTypes$categoriesArgs<ExtArgs>
    productAttribute?: boolean | VariantTypes$productAttributeArgs<ExtArgs>
    _count?: boolean | VariantTypesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VariantTypesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type VariantTypesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $VariantTypesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VariantTypes"
    objects: {
      categories: Prisma.$CategoryPayload<ExtArgs>[]
      productAttribute: Prisma.$ProductAttributePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      value: string
      typeProduct: $Enums.TypeProduct
    }, ExtArgs["result"]["variantTypes"]>
    composites: {}
  }

  type VariantTypesGetPayload<S extends boolean | null | undefined | VariantTypesDefaultArgs> = $Result.GetResult<Prisma.$VariantTypesPayload, S>

  type VariantTypesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VariantTypesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VariantTypesCountAggregateInputType | true
    }

  export interface VariantTypesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VariantTypes'], meta: { name: 'VariantTypes' } }
    /**
     * Find zero or one VariantTypes that matches the filter.
     * @param {VariantTypesFindUniqueArgs} args - Arguments to find a VariantTypes
     * @example
     * // Get one VariantTypes
     * const variantTypes = await prisma.variantTypes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VariantTypesFindUniqueArgs>(args: SelectSubset<T, VariantTypesFindUniqueArgs<ExtArgs>>): Prisma__VariantTypesClient<$Result.GetResult<Prisma.$VariantTypesPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one VariantTypes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VariantTypesFindUniqueOrThrowArgs} args - Arguments to find a VariantTypes
     * @example
     * // Get one VariantTypes
     * const variantTypes = await prisma.variantTypes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VariantTypesFindUniqueOrThrowArgs>(args: SelectSubset<T, VariantTypesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VariantTypesClient<$Result.GetResult<Prisma.$VariantTypesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first VariantTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariantTypesFindFirstArgs} args - Arguments to find a VariantTypes
     * @example
     * // Get one VariantTypes
     * const variantTypes = await prisma.variantTypes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VariantTypesFindFirstArgs>(args?: SelectSubset<T, VariantTypesFindFirstArgs<ExtArgs>>): Prisma__VariantTypesClient<$Result.GetResult<Prisma.$VariantTypesPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first VariantTypes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariantTypesFindFirstOrThrowArgs} args - Arguments to find a VariantTypes
     * @example
     * // Get one VariantTypes
     * const variantTypes = await prisma.variantTypes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VariantTypesFindFirstOrThrowArgs>(args?: SelectSubset<T, VariantTypesFindFirstOrThrowArgs<ExtArgs>>): Prisma__VariantTypesClient<$Result.GetResult<Prisma.$VariantTypesPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more VariantTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariantTypesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VariantTypes
     * const variantTypes = await prisma.variantTypes.findMany()
     * 
     * // Get first 10 VariantTypes
     * const variantTypes = await prisma.variantTypes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const variantTypesWithIdOnly = await prisma.variantTypes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VariantTypesFindManyArgs>(args?: SelectSubset<T, VariantTypesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VariantTypesPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a VariantTypes.
     * @param {VariantTypesCreateArgs} args - Arguments to create a VariantTypes.
     * @example
     * // Create one VariantTypes
     * const VariantTypes = await prisma.variantTypes.create({
     *   data: {
     *     // ... data to create a VariantTypes
     *   }
     * })
     * 
     */
    create<T extends VariantTypesCreateArgs>(args: SelectSubset<T, VariantTypesCreateArgs<ExtArgs>>): Prisma__VariantTypesClient<$Result.GetResult<Prisma.$VariantTypesPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many VariantTypes.
     * @param {VariantTypesCreateManyArgs} args - Arguments to create many VariantTypes.
     * @example
     * // Create many VariantTypes
     * const variantTypes = await prisma.variantTypes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VariantTypesCreateManyArgs>(args?: SelectSubset<T, VariantTypesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VariantTypes and returns the data saved in the database.
     * @param {VariantTypesCreateManyAndReturnArgs} args - Arguments to create many VariantTypes.
     * @example
     * // Create many VariantTypes
     * const variantTypes = await prisma.variantTypes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VariantTypes and only return the `id`
     * const variantTypesWithIdOnly = await prisma.variantTypes.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VariantTypesCreateManyAndReturnArgs>(args?: SelectSubset<T, VariantTypesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VariantTypesPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a VariantTypes.
     * @param {VariantTypesDeleteArgs} args - Arguments to delete one VariantTypes.
     * @example
     * // Delete one VariantTypes
     * const VariantTypes = await prisma.variantTypes.delete({
     *   where: {
     *     // ... filter to delete one VariantTypes
     *   }
     * })
     * 
     */
    delete<T extends VariantTypesDeleteArgs>(args: SelectSubset<T, VariantTypesDeleteArgs<ExtArgs>>): Prisma__VariantTypesClient<$Result.GetResult<Prisma.$VariantTypesPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one VariantTypes.
     * @param {VariantTypesUpdateArgs} args - Arguments to update one VariantTypes.
     * @example
     * // Update one VariantTypes
     * const variantTypes = await prisma.variantTypes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VariantTypesUpdateArgs>(args: SelectSubset<T, VariantTypesUpdateArgs<ExtArgs>>): Prisma__VariantTypesClient<$Result.GetResult<Prisma.$VariantTypesPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more VariantTypes.
     * @param {VariantTypesDeleteManyArgs} args - Arguments to filter VariantTypes to delete.
     * @example
     * // Delete a few VariantTypes
     * const { count } = await prisma.variantTypes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VariantTypesDeleteManyArgs>(args?: SelectSubset<T, VariantTypesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VariantTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariantTypesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VariantTypes
     * const variantTypes = await prisma.variantTypes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VariantTypesUpdateManyArgs>(args: SelectSubset<T, VariantTypesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VariantTypes and returns the data updated in the database.
     * @param {VariantTypesUpdateManyAndReturnArgs} args - Arguments to update many VariantTypes.
     * @example
     * // Update many VariantTypes
     * const variantTypes = await prisma.variantTypes.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VariantTypes and only return the `id`
     * const variantTypesWithIdOnly = await prisma.variantTypes.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VariantTypesUpdateManyAndReturnArgs>(args: SelectSubset<T, VariantTypesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VariantTypesPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one VariantTypes.
     * @param {VariantTypesUpsertArgs} args - Arguments to update or create a VariantTypes.
     * @example
     * // Update or create a VariantTypes
     * const variantTypes = await prisma.variantTypes.upsert({
     *   create: {
     *     // ... data to create a VariantTypes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VariantTypes we want to update
     *   }
     * })
     */
    upsert<T extends VariantTypesUpsertArgs>(args: SelectSubset<T, VariantTypesUpsertArgs<ExtArgs>>): Prisma__VariantTypesClient<$Result.GetResult<Prisma.$VariantTypesPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of VariantTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariantTypesCountArgs} args - Arguments to filter VariantTypes to count.
     * @example
     * // Count the number of VariantTypes
     * const count = await prisma.variantTypes.count({
     *   where: {
     *     // ... the filter for the VariantTypes we want to count
     *   }
     * })
    **/
    count<T extends VariantTypesCountArgs>(
      args?: Subset<T, VariantTypesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VariantTypesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VariantTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariantTypesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VariantTypesAggregateArgs>(args: Subset<T, VariantTypesAggregateArgs>): Prisma.PrismaPromise<GetVariantTypesAggregateType<T>>

    /**
     * Group by VariantTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VariantTypesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VariantTypesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VariantTypesGroupByArgs['orderBy'] }
        : { orderBy?: VariantTypesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VariantTypesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVariantTypesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VariantTypes model
   */
  readonly fields: VariantTypesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VariantTypes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VariantTypesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    categories<T extends VariantTypes$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, VariantTypes$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    productAttribute<T extends VariantTypes$productAttributeArgs<ExtArgs> = {}>(args?: Subset<T, VariantTypes$productAttributeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductAttributePayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VariantTypes model
   */ 
  interface VariantTypesFieldRefs {
    readonly id: FieldRef<"VariantTypes", 'Int'>
    readonly value: FieldRef<"VariantTypes", 'String'>
    readonly typeProduct: FieldRef<"VariantTypes", 'TypeProduct'>
  }
    

  // Custom InputTypes
  /**
   * VariantTypes findUnique
   */
  export type VariantTypesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantTypes
     */
    select?: VariantTypesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VariantTypes
     */
    omit?: VariantTypesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantTypesInclude<ExtArgs> | null
    /**
     * Filter, which VariantTypes to fetch.
     */
    where: VariantTypesWhereUniqueInput
  }

  /**
   * VariantTypes findUniqueOrThrow
   */
  export type VariantTypesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantTypes
     */
    select?: VariantTypesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VariantTypes
     */
    omit?: VariantTypesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantTypesInclude<ExtArgs> | null
    /**
     * Filter, which VariantTypes to fetch.
     */
    where: VariantTypesWhereUniqueInput
  }

  /**
   * VariantTypes findFirst
   */
  export type VariantTypesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantTypes
     */
    select?: VariantTypesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VariantTypes
     */
    omit?: VariantTypesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantTypesInclude<ExtArgs> | null
    /**
     * Filter, which VariantTypes to fetch.
     */
    where?: VariantTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VariantTypes to fetch.
     */
    orderBy?: VariantTypesOrderByWithRelationInput | VariantTypesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VariantTypes.
     */
    cursor?: VariantTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VariantTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VariantTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VariantTypes.
     */
    distinct?: VariantTypesScalarFieldEnum | VariantTypesScalarFieldEnum[]
  }

  /**
   * VariantTypes findFirstOrThrow
   */
  export type VariantTypesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantTypes
     */
    select?: VariantTypesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VariantTypes
     */
    omit?: VariantTypesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantTypesInclude<ExtArgs> | null
    /**
     * Filter, which VariantTypes to fetch.
     */
    where?: VariantTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VariantTypes to fetch.
     */
    orderBy?: VariantTypesOrderByWithRelationInput | VariantTypesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VariantTypes.
     */
    cursor?: VariantTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VariantTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VariantTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VariantTypes.
     */
    distinct?: VariantTypesScalarFieldEnum | VariantTypesScalarFieldEnum[]
  }

  /**
   * VariantTypes findMany
   */
  export type VariantTypesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantTypes
     */
    select?: VariantTypesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VariantTypes
     */
    omit?: VariantTypesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantTypesInclude<ExtArgs> | null
    /**
     * Filter, which VariantTypes to fetch.
     */
    where?: VariantTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VariantTypes to fetch.
     */
    orderBy?: VariantTypesOrderByWithRelationInput | VariantTypesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VariantTypes.
     */
    cursor?: VariantTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VariantTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VariantTypes.
     */
    skip?: number
    distinct?: VariantTypesScalarFieldEnum | VariantTypesScalarFieldEnum[]
  }

  /**
   * VariantTypes create
   */
  export type VariantTypesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantTypes
     */
    select?: VariantTypesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VariantTypes
     */
    omit?: VariantTypesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantTypesInclude<ExtArgs> | null
    /**
     * The data needed to create a VariantTypes.
     */
    data: XOR<VariantTypesCreateInput, VariantTypesUncheckedCreateInput>
  }

  /**
   * VariantTypes createMany
   */
  export type VariantTypesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VariantTypes.
     */
    data: VariantTypesCreateManyInput | VariantTypesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VariantTypes createManyAndReturn
   */
  export type VariantTypesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantTypes
     */
    select?: VariantTypesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VariantTypes
     */
    omit?: VariantTypesOmit<ExtArgs> | null
    /**
     * The data used to create many VariantTypes.
     */
    data: VariantTypesCreateManyInput | VariantTypesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VariantTypes update
   */
  export type VariantTypesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantTypes
     */
    select?: VariantTypesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VariantTypes
     */
    omit?: VariantTypesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantTypesInclude<ExtArgs> | null
    /**
     * The data needed to update a VariantTypes.
     */
    data: XOR<VariantTypesUpdateInput, VariantTypesUncheckedUpdateInput>
    /**
     * Choose, which VariantTypes to update.
     */
    where: VariantTypesWhereUniqueInput
  }

  /**
   * VariantTypes updateMany
   */
  export type VariantTypesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VariantTypes.
     */
    data: XOR<VariantTypesUpdateManyMutationInput, VariantTypesUncheckedUpdateManyInput>
    /**
     * Filter which VariantTypes to update
     */
    where?: VariantTypesWhereInput
    /**
     * Limit how many VariantTypes to update.
     */
    limit?: number
  }

  /**
   * VariantTypes updateManyAndReturn
   */
  export type VariantTypesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantTypes
     */
    select?: VariantTypesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VariantTypes
     */
    omit?: VariantTypesOmit<ExtArgs> | null
    /**
     * The data used to update VariantTypes.
     */
    data: XOR<VariantTypesUpdateManyMutationInput, VariantTypesUncheckedUpdateManyInput>
    /**
     * Filter which VariantTypes to update
     */
    where?: VariantTypesWhereInput
    /**
     * Limit how many VariantTypes to update.
     */
    limit?: number
  }

  /**
   * VariantTypes upsert
   */
  export type VariantTypesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantTypes
     */
    select?: VariantTypesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VariantTypes
     */
    omit?: VariantTypesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantTypesInclude<ExtArgs> | null
    /**
     * The filter to search for the VariantTypes to update in case it exists.
     */
    where: VariantTypesWhereUniqueInput
    /**
     * In case the VariantTypes found by the `where` argument doesn't exist, create a new VariantTypes with this data.
     */
    create: XOR<VariantTypesCreateInput, VariantTypesUncheckedCreateInput>
    /**
     * In case the VariantTypes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VariantTypesUpdateInput, VariantTypesUncheckedUpdateInput>
  }

  /**
   * VariantTypes delete
   */
  export type VariantTypesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantTypes
     */
    select?: VariantTypesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VariantTypes
     */
    omit?: VariantTypesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantTypesInclude<ExtArgs> | null
    /**
     * Filter which VariantTypes to delete.
     */
    where: VariantTypesWhereUniqueInput
  }

  /**
   * VariantTypes deleteMany
   */
  export type VariantTypesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VariantTypes to delete
     */
    where?: VariantTypesWhereInput
    /**
     * Limit how many VariantTypes to delete.
     */
    limit?: number
  }

  /**
   * VariantTypes.categories
   */
  export type VariantTypes$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * VariantTypes.productAttribute
   */
  export type VariantTypes$productAttributeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductAttribute
     */
    select?: ProductAttributeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductAttribute
     */
    omit?: ProductAttributeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductAttributeInclude<ExtArgs> | null
    where?: ProductAttributeWhereInput
    orderBy?: ProductAttributeOrderByWithRelationInput | ProductAttributeOrderByWithRelationInput[]
    cursor?: ProductAttributeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductAttributeScalarFieldEnum | ProductAttributeScalarFieldEnum[]
  }

  /**
   * VariantTypes without action
   */
  export type VariantTypesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VariantTypes
     */
    select?: VariantTypesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VariantTypes
     */
    omit?: VariantTypesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VariantTypesInclude<ExtArgs> | null
  }


  /**
   * Model Parameters
   */

  export type AggregateParameters = {
    _count: ParametersCountAggregateOutputType | null
    _avg: ParametersAvgAggregateOutputType | null
    _sum: ParametersSumAggregateOutputType | null
    _min: ParametersMinAggregateOutputType | null
    _max: ParametersMaxAggregateOutputType | null
  }

  export type ParametersAvgAggregateOutputType = {
    id: number | null
  }

  export type ParametersSumAggregateOutputType = {
    id: number | null
  }

  export type ParametersMinAggregateOutputType = {
    id: number | null
    parameter: string | null
  }

  export type ParametersMaxAggregateOutputType = {
    id: number | null
    parameter: string | null
  }

  export type ParametersCountAggregateOutputType = {
    id: number
    parameter: number
    _all: number
  }


  export type ParametersAvgAggregateInputType = {
    id?: true
  }

  export type ParametersSumAggregateInputType = {
    id?: true
  }

  export type ParametersMinAggregateInputType = {
    id?: true
    parameter?: true
  }

  export type ParametersMaxAggregateInputType = {
    id?: true
    parameter?: true
  }

  export type ParametersCountAggregateInputType = {
    id?: true
    parameter?: true
    _all?: true
  }

  export type ParametersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Parameters to aggregate.
     */
    where?: ParametersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parameters to fetch.
     */
    orderBy?: ParametersOrderByWithRelationInput | ParametersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParametersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parameters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parameters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Parameters
    **/
    _count?: true | ParametersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParametersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParametersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParametersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParametersMaxAggregateInputType
  }

  export type GetParametersAggregateType<T extends ParametersAggregateArgs> = {
        [P in keyof T & keyof AggregateParameters]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParameters[P]>
      : GetScalarType<T[P], AggregateParameters[P]>
  }




  export type ParametersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParametersWhereInput
    orderBy?: ParametersOrderByWithAggregationInput | ParametersOrderByWithAggregationInput[]
    by: ParametersScalarFieldEnum[] | ParametersScalarFieldEnum
    having?: ParametersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParametersCountAggregateInputType | true
    _avg?: ParametersAvgAggregateInputType
    _sum?: ParametersSumAggregateInputType
    _min?: ParametersMinAggregateInputType
    _max?: ParametersMaxAggregateInputType
  }

  export type ParametersGroupByOutputType = {
    id: number
    parameter: string
    _count: ParametersCountAggregateOutputType | null
    _avg: ParametersAvgAggregateOutputType | null
    _sum: ParametersSumAggregateOutputType | null
    _min: ParametersMinAggregateOutputType | null
    _max: ParametersMaxAggregateOutputType | null
  }

  type GetParametersGroupByPayload<T extends ParametersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParametersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParametersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParametersGroupByOutputType[P]>
            : GetScalarType<T[P], ParametersGroupByOutputType[P]>
        }
      >
    >


  export type ParametersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parameter?: boolean
    categories?: boolean | Parameters$categoriesArgs<ExtArgs>
    ProductVariant?: boolean | Parameters$ProductVariantArgs<ExtArgs>
    _count?: boolean | ParametersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parameters"]>

  export type ParametersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parameter?: boolean
  }, ExtArgs["result"]["parameters"]>

  export type ParametersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parameter?: boolean
  }, ExtArgs["result"]["parameters"]>

  export type ParametersSelectScalar = {
    id?: boolean
    parameter?: boolean
  }

  export type ParametersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "parameter", ExtArgs["result"]["parameters"]>
  export type ParametersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | Parameters$categoriesArgs<ExtArgs>
    ProductVariant?: boolean | Parameters$ProductVariantArgs<ExtArgs>
    _count?: boolean | ParametersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ParametersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ParametersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ParametersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Parameters"
    objects: {
      categories: Prisma.$CategoryPayload<ExtArgs>[]
      ProductVariant: Prisma.$ProductVariantPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      parameter: string
    }, ExtArgs["result"]["parameters"]>
    composites: {}
  }

  type ParametersGetPayload<S extends boolean | null | undefined | ParametersDefaultArgs> = $Result.GetResult<Prisma.$ParametersPayload, S>

  type ParametersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ParametersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ParametersCountAggregateInputType | true
    }

  export interface ParametersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Parameters'], meta: { name: 'Parameters' } }
    /**
     * Find zero or one Parameters that matches the filter.
     * @param {ParametersFindUniqueArgs} args - Arguments to find a Parameters
     * @example
     * // Get one Parameters
     * const parameters = await prisma.parameters.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ParametersFindUniqueArgs>(args: SelectSubset<T, ParametersFindUniqueArgs<ExtArgs>>): Prisma__ParametersClient<$Result.GetResult<Prisma.$ParametersPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Parameters that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ParametersFindUniqueOrThrowArgs} args - Arguments to find a Parameters
     * @example
     * // Get one Parameters
     * const parameters = await prisma.parameters.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ParametersFindUniqueOrThrowArgs>(args: SelectSubset<T, ParametersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ParametersClient<$Result.GetResult<Prisma.$ParametersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Parameters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametersFindFirstArgs} args - Arguments to find a Parameters
     * @example
     * // Get one Parameters
     * const parameters = await prisma.parameters.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ParametersFindFirstArgs>(args?: SelectSubset<T, ParametersFindFirstArgs<ExtArgs>>): Prisma__ParametersClient<$Result.GetResult<Prisma.$ParametersPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Parameters that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametersFindFirstOrThrowArgs} args - Arguments to find a Parameters
     * @example
     * // Get one Parameters
     * const parameters = await prisma.parameters.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ParametersFindFirstOrThrowArgs>(args?: SelectSubset<T, ParametersFindFirstOrThrowArgs<ExtArgs>>): Prisma__ParametersClient<$Result.GetResult<Prisma.$ParametersPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Parameters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Parameters
     * const parameters = await prisma.parameters.findMany()
     * 
     * // Get first 10 Parameters
     * const parameters = await prisma.parameters.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const parametersWithIdOnly = await prisma.parameters.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ParametersFindManyArgs>(args?: SelectSubset<T, ParametersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParametersPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Parameters.
     * @param {ParametersCreateArgs} args - Arguments to create a Parameters.
     * @example
     * // Create one Parameters
     * const Parameters = await prisma.parameters.create({
     *   data: {
     *     // ... data to create a Parameters
     *   }
     * })
     * 
     */
    create<T extends ParametersCreateArgs>(args: SelectSubset<T, ParametersCreateArgs<ExtArgs>>): Prisma__ParametersClient<$Result.GetResult<Prisma.$ParametersPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Parameters.
     * @param {ParametersCreateManyArgs} args - Arguments to create many Parameters.
     * @example
     * // Create many Parameters
     * const parameters = await prisma.parameters.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ParametersCreateManyArgs>(args?: SelectSubset<T, ParametersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Parameters and returns the data saved in the database.
     * @param {ParametersCreateManyAndReturnArgs} args - Arguments to create many Parameters.
     * @example
     * // Create many Parameters
     * const parameters = await prisma.parameters.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Parameters and only return the `id`
     * const parametersWithIdOnly = await prisma.parameters.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ParametersCreateManyAndReturnArgs>(args?: SelectSubset<T, ParametersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParametersPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Parameters.
     * @param {ParametersDeleteArgs} args - Arguments to delete one Parameters.
     * @example
     * // Delete one Parameters
     * const Parameters = await prisma.parameters.delete({
     *   where: {
     *     // ... filter to delete one Parameters
     *   }
     * })
     * 
     */
    delete<T extends ParametersDeleteArgs>(args: SelectSubset<T, ParametersDeleteArgs<ExtArgs>>): Prisma__ParametersClient<$Result.GetResult<Prisma.$ParametersPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Parameters.
     * @param {ParametersUpdateArgs} args - Arguments to update one Parameters.
     * @example
     * // Update one Parameters
     * const parameters = await prisma.parameters.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ParametersUpdateArgs>(args: SelectSubset<T, ParametersUpdateArgs<ExtArgs>>): Prisma__ParametersClient<$Result.GetResult<Prisma.$ParametersPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Parameters.
     * @param {ParametersDeleteManyArgs} args - Arguments to filter Parameters to delete.
     * @example
     * // Delete a few Parameters
     * const { count } = await prisma.parameters.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ParametersDeleteManyArgs>(args?: SelectSubset<T, ParametersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Parameters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Parameters
     * const parameters = await prisma.parameters.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ParametersUpdateManyArgs>(args: SelectSubset<T, ParametersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Parameters and returns the data updated in the database.
     * @param {ParametersUpdateManyAndReturnArgs} args - Arguments to update many Parameters.
     * @example
     * // Update many Parameters
     * const parameters = await prisma.parameters.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Parameters and only return the `id`
     * const parametersWithIdOnly = await prisma.parameters.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ParametersUpdateManyAndReturnArgs>(args: SelectSubset<T, ParametersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParametersPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Parameters.
     * @param {ParametersUpsertArgs} args - Arguments to update or create a Parameters.
     * @example
     * // Update or create a Parameters
     * const parameters = await prisma.parameters.upsert({
     *   create: {
     *     // ... data to create a Parameters
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Parameters we want to update
     *   }
     * })
     */
    upsert<T extends ParametersUpsertArgs>(args: SelectSubset<T, ParametersUpsertArgs<ExtArgs>>): Prisma__ParametersClient<$Result.GetResult<Prisma.$ParametersPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Parameters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametersCountArgs} args - Arguments to filter Parameters to count.
     * @example
     * // Count the number of Parameters
     * const count = await prisma.parameters.count({
     *   where: {
     *     // ... the filter for the Parameters we want to count
     *   }
     * })
    **/
    count<T extends ParametersCountArgs>(
      args?: Subset<T, ParametersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParametersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Parameters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParametersAggregateArgs>(args: Subset<T, ParametersAggregateArgs>): Prisma.PrismaPromise<GetParametersAggregateType<T>>

    /**
     * Group by Parameters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParametersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParametersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParametersGroupByArgs['orderBy'] }
        : { orderBy?: ParametersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParametersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParametersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Parameters model
   */
  readonly fields: ParametersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Parameters.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParametersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    categories<T extends Parameters$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Parameters$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    ProductVariant<T extends Parameters$ProductVariantArgs<ExtArgs> = {}>(args?: Subset<T, Parameters$ProductVariantArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Parameters model
   */ 
  interface ParametersFieldRefs {
    readonly id: FieldRef<"Parameters", 'Int'>
    readonly parameter: FieldRef<"Parameters", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Parameters findUnique
   */
  export type ParametersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameters
     */
    select?: ParametersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Parameters
     */
    omit?: ParametersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParametersInclude<ExtArgs> | null
    /**
     * Filter, which Parameters to fetch.
     */
    where: ParametersWhereUniqueInput
  }

  /**
   * Parameters findUniqueOrThrow
   */
  export type ParametersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameters
     */
    select?: ParametersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Parameters
     */
    omit?: ParametersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParametersInclude<ExtArgs> | null
    /**
     * Filter, which Parameters to fetch.
     */
    where: ParametersWhereUniqueInput
  }

  /**
   * Parameters findFirst
   */
  export type ParametersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameters
     */
    select?: ParametersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Parameters
     */
    omit?: ParametersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParametersInclude<ExtArgs> | null
    /**
     * Filter, which Parameters to fetch.
     */
    where?: ParametersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parameters to fetch.
     */
    orderBy?: ParametersOrderByWithRelationInput | ParametersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parameters.
     */
    cursor?: ParametersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parameters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parameters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parameters.
     */
    distinct?: ParametersScalarFieldEnum | ParametersScalarFieldEnum[]
  }

  /**
   * Parameters findFirstOrThrow
   */
  export type ParametersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameters
     */
    select?: ParametersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Parameters
     */
    omit?: ParametersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParametersInclude<ExtArgs> | null
    /**
     * Filter, which Parameters to fetch.
     */
    where?: ParametersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parameters to fetch.
     */
    orderBy?: ParametersOrderByWithRelationInput | ParametersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parameters.
     */
    cursor?: ParametersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parameters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parameters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parameters.
     */
    distinct?: ParametersScalarFieldEnum | ParametersScalarFieldEnum[]
  }

  /**
   * Parameters findMany
   */
  export type ParametersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameters
     */
    select?: ParametersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Parameters
     */
    omit?: ParametersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParametersInclude<ExtArgs> | null
    /**
     * Filter, which Parameters to fetch.
     */
    where?: ParametersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parameters to fetch.
     */
    orderBy?: ParametersOrderByWithRelationInput | ParametersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Parameters.
     */
    cursor?: ParametersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parameters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parameters.
     */
    skip?: number
    distinct?: ParametersScalarFieldEnum | ParametersScalarFieldEnum[]
  }

  /**
   * Parameters create
   */
  export type ParametersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameters
     */
    select?: ParametersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Parameters
     */
    omit?: ParametersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParametersInclude<ExtArgs> | null
    /**
     * The data needed to create a Parameters.
     */
    data: XOR<ParametersCreateInput, ParametersUncheckedCreateInput>
  }

  /**
   * Parameters createMany
   */
  export type ParametersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Parameters.
     */
    data: ParametersCreateManyInput | ParametersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Parameters createManyAndReturn
   */
  export type ParametersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameters
     */
    select?: ParametersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Parameters
     */
    omit?: ParametersOmit<ExtArgs> | null
    /**
     * The data used to create many Parameters.
     */
    data: ParametersCreateManyInput | ParametersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Parameters update
   */
  export type ParametersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameters
     */
    select?: ParametersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Parameters
     */
    omit?: ParametersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParametersInclude<ExtArgs> | null
    /**
     * The data needed to update a Parameters.
     */
    data: XOR<ParametersUpdateInput, ParametersUncheckedUpdateInput>
    /**
     * Choose, which Parameters to update.
     */
    where: ParametersWhereUniqueInput
  }

  /**
   * Parameters updateMany
   */
  export type ParametersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Parameters.
     */
    data: XOR<ParametersUpdateManyMutationInput, ParametersUncheckedUpdateManyInput>
    /**
     * Filter which Parameters to update
     */
    where?: ParametersWhereInput
    /**
     * Limit how many Parameters to update.
     */
    limit?: number
  }

  /**
   * Parameters updateManyAndReturn
   */
  export type ParametersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameters
     */
    select?: ParametersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Parameters
     */
    omit?: ParametersOmit<ExtArgs> | null
    /**
     * The data used to update Parameters.
     */
    data: XOR<ParametersUpdateManyMutationInput, ParametersUncheckedUpdateManyInput>
    /**
     * Filter which Parameters to update
     */
    where?: ParametersWhereInput
    /**
     * Limit how many Parameters to update.
     */
    limit?: number
  }

  /**
   * Parameters upsert
   */
  export type ParametersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameters
     */
    select?: ParametersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Parameters
     */
    omit?: ParametersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParametersInclude<ExtArgs> | null
    /**
     * The filter to search for the Parameters to update in case it exists.
     */
    where: ParametersWhereUniqueInput
    /**
     * In case the Parameters found by the `where` argument doesn't exist, create a new Parameters with this data.
     */
    create: XOR<ParametersCreateInput, ParametersUncheckedCreateInput>
    /**
     * In case the Parameters was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParametersUpdateInput, ParametersUncheckedUpdateInput>
  }

  /**
   * Parameters delete
   */
  export type ParametersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameters
     */
    select?: ParametersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Parameters
     */
    omit?: ParametersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParametersInclude<ExtArgs> | null
    /**
     * Filter which Parameters to delete.
     */
    where: ParametersWhereUniqueInput
  }

  /**
   * Parameters deleteMany
   */
  export type ParametersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Parameters to delete
     */
    where?: ParametersWhereInput
    /**
     * Limit how many Parameters to delete.
     */
    limit?: number
  }

  /**
   * Parameters.categories
   */
  export type Parameters$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Parameters.ProductVariant
   */
  export type Parameters$ProductVariantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    where?: ProductVariantWhereInput
    orderBy?: ProductVariantOrderByWithRelationInput | ProductVariantOrderByWithRelationInput[]
    cursor?: ProductVariantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductVariantScalarFieldEnum | ProductVariantScalarFieldEnum[]
  }

  /**
   * Parameters without action
   */
  export type ParametersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parameters
     */
    select?: ParametersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Parameters
     */
    omit?: ParametersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParametersInclude<ExtArgs> | null
  }


  /**
   * Model Proportions
   */

  export type AggregateProportions = {
    _count: ProportionsCountAggregateOutputType | null
    _avg: ProportionsAvgAggregateOutputType | null
    _sum: ProportionsSumAggregateOutputType | null
    _min: ProportionsMinAggregateOutputType | null
    _max: ProportionsMaxAggregateOutputType | null
  }

  export type ProportionsAvgAggregateOutputType = {
    id: number | null
  }

  export type ProportionsSumAggregateOutputType = {
    id: number | null
  }

  export type ProportionsMinAggregateOutputType = {
    id: number | null
    value: string | null
  }

  export type ProportionsMaxAggregateOutputType = {
    id: number | null
    value: string | null
  }

  export type ProportionsCountAggregateOutputType = {
    id: number
    value: number
    _all: number
  }


  export type ProportionsAvgAggregateInputType = {
    id?: true
  }

  export type ProportionsSumAggregateInputType = {
    id?: true
  }

  export type ProportionsMinAggregateInputType = {
    id?: true
    value?: true
  }

  export type ProportionsMaxAggregateInputType = {
    id?: true
    value?: true
  }

  export type ProportionsCountAggregateInputType = {
    id?: true
    value?: true
    _all?: true
  }

  export type ProportionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Proportions to aggregate.
     */
    where?: ProportionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proportions to fetch.
     */
    orderBy?: ProportionsOrderByWithRelationInput | ProportionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProportionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proportions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proportions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Proportions
    **/
    _count?: true | ProportionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProportionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProportionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProportionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProportionsMaxAggregateInputType
  }

  export type GetProportionsAggregateType<T extends ProportionsAggregateArgs> = {
        [P in keyof T & keyof AggregateProportions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProportions[P]>
      : GetScalarType<T[P], AggregateProportions[P]>
  }




  export type ProportionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProportionsWhereInput
    orderBy?: ProportionsOrderByWithAggregationInput | ProportionsOrderByWithAggregationInput[]
    by: ProportionsScalarFieldEnum[] | ProportionsScalarFieldEnum
    having?: ProportionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProportionsCountAggregateInputType | true
    _avg?: ProportionsAvgAggregateInputType
    _sum?: ProportionsSumAggregateInputType
    _min?: ProportionsMinAggregateInputType
    _max?: ProportionsMaxAggregateInputType
  }

  export type ProportionsGroupByOutputType = {
    id: number
    value: string
    _count: ProportionsCountAggregateOutputType | null
    _avg: ProportionsAvgAggregateOutputType | null
    _sum: ProportionsSumAggregateOutputType | null
    _min: ProportionsMinAggregateOutputType | null
    _max: ProportionsMaxAggregateOutputType | null
  }

  type GetProportionsGroupByPayload<T extends ProportionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProportionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProportionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProportionsGroupByOutputType[P]>
            : GetScalarType<T[P], ProportionsGroupByOutputType[P]>
        }
      >
    >


  export type ProportionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    value?: boolean
    categories?: boolean | Proportions$categoriesArgs<ExtArgs>
    sizes?: boolean | Proportions$sizesArgs<ExtArgs>
    _count?: boolean | ProportionsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["proportions"]>

  export type ProportionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    value?: boolean
  }, ExtArgs["result"]["proportions"]>

  export type ProportionsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    value?: boolean
  }, ExtArgs["result"]["proportions"]>

  export type ProportionsSelectScalar = {
    id?: boolean
    value?: boolean
  }

  export type ProportionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "value", ExtArgs["result"]["proportions"]>
  export type ProportionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | Proportions$categoriesArgs<ExtArgs>
    sizes?: boolean | Proportions$sizesArgs<ExtArgs>
    _count?: boolean | ProportionsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProportionsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProportionsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProportionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Proportions"
    objects: {
      categories: Prisma.$CategoryPayload<ExtArgs>[]
      sizes: Prisma.$SizesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      value: string
    }, ExtArgs["result"]["proportions"]>
    composites: {}
  }

  type ProportionsGetPayload<S extends boolean | null | undefined | ProportionsDefaultArgs> = $Result.GetResult<Prisma.$ProportionsPayload, S>

  type ProportionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProportionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProportionsCountAggregateInputType | true
    }

  export interface ProportionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Proportions'], meta: { name: 'Proportions' } }
    /**
     * Find zero or one Proportions that matches the filter.
     * @param {ProportionsFindUniqueArgs} args - Arguments to find a Proportions
     * @example
     * // Get one Proportions
     * const proportions = await prisma.proportions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProportionsFindUniqueArgs>(args: SelectSubset<T, ProportionsFindUniqueArgs<ExtArgs>>): Prisma__ProportionsClient<$Result.GetResult<Prisma.$ProportionsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Proportions that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProportionsFindUniqueOrThrowArgs} args - Arguments to find a Proportions
     * @example
     * // Get one Proportions
     * const proportions = await prisma.proportions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProportionsFindUniqueOrThrowArgs>(args: SelectSubset<T, ProportionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProportionsClient<$Result.GetResult<Prisma.$ProportionsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Proportions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProportionsFindFirstArgs} args - Arguments to find a Proportions
     * @example
     * // Get one Proportions
     * const proportions = await prisma.proportions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProportionsFindFirstArgs>(args?: SelectSubset<T, ProportionsFindFirstArgs<ExtArgs>>): Prisma__ProportionsClient<$Result.GetResult<Prisma.$ProportionsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Proportions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProportionsFindFirstOrThrowArgs} args - Arguments to find a Proportions
     * @example
     * // Get one Proportions
     * const proportions = await prisma.proportions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProportionsFindFirstOrThrowArgs>(args?: SelectSubset<T, ProportionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProportionsClient<$Result.GetResult<Prisma.$ProportionsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Proportions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProportionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Proportions
     * const proportions = await prisma.proportions.findMany()
     * 
     * // Get first 10 Proportions
     * const proportions = await prisma.proportions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const proportionsWithIdOnly = await prisma.proportions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProportionsFindManyArgs>(args?: SelectSubset<T, ProportionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProportionsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Proportions.
     * @param {ProportionsCreateArgs} args - Arguments to create a Proportions.
     * @example
     * // Create one Proportions
     * const Proportions = await prisma.proportions.create({
     *   data: {
     *     // ... data to create a Proportions
     *   }
     * })
     * 
     */
    create<T extends ProportionsCreateArgs>(args: SelectSubset<T, ProportionsCreateArgs<ExtArgs>>): Prisma__ProportionsClient<$Result.GetResult<Prisma.$ProportionsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Proportions.
     * @param {ProportionsCreateManyArgs} args - Arguments to create many Proportions.
     * @example
     * // Create many Proportions
     * const proportions = await prisma.proportions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProportionsCreateManyArgs>(args?: SelectSubset<T, ProportionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Proportions and returns the data saved in the database.
     * @param {ProportionsCreateManyAndReturnArgs} args - Arguments to create many Proportions.
     * @example
     * // Create many Proportions
     * const proportions = await prisma.proportions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Proportions and only return the `id`
     * const proportionsWithIdOnly = await prisma.proportions.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProportionsCreateManyAndReturnArgs>(args?: SelectSubset<T, ProportionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProportionsPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Proportions.
     * @param {ProportionsDeleteArgs} args - Arguments to delete one Proportions.
     * @example
     * // Delete one Proportions
     * const Proportions = await prisma.proportions.delete({
     *   where: {
     *     // ... filter to delete one Proportions
     *   }
     * })
     * 
     */
    delete<T extends ProportionsDeleteArgs>(args: SelectSubset<T, ProportionsDeleteArgs<ExtArgs>>): Prisma__ProportionsClient<$Result.GetResult<Prisma.$ProportionsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Proportions.
     * @param {ProportionsUpdateArgs} args - Arguments to update one Proportions.
     * @example
     * // Update one Proportions
     * const proportions = await prisma.proportions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProportionsUpdateArgs>(args: SelectSubset<T, ProportionsUpdateArgs<ExtArgs>>): Prisma__ProportionsClient<$Result.GetResult<Prisma.$ProportionsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Proportions.
     * @param {ProportionsDeleteManyArgs} args - Arguments to filter Proportions to delete.
     * @example
     * // Delete a few Proportions
     * const { count } = await prisma.proportions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProportionsDeleteManyArgs>(args?: SelectSubset<T, ProportionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Proportions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProportionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Proportions
     * const proportions = await prisma.proportions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProportionsUpdateManyArgs>(args: SelectSubset<T, ProportionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Proportions and returns the data updated in the database.
     * @param {ProportionsUpdateManyAndReturnArgs} args - Arguments to update many Proportions.
     * @example
     * // Update many Proportions
     * const proportions = await prisma.proportions.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Proportions and only return the `id`
     * const proportionsWithIdOnly = await prisma.proportions.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProportionsUpdateManyAndReturnArgs>(args: SelectSubset<T, ProportionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProportionsPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Proportions.
     * @param {ProportionsUpsertArgs} args - Arguments to update or create a Proportions.
     * @example
     * // Update or create a Proportions
     * const proportions = await prisma.proportions.upsert({
     *   create: {
     *     // ... data to create a Proportions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Proportions we want to update
     *   }
     * })
     */
    upsert<T extends ProportionsUpsertArgs>(args: SelectSubset<T, ProportionsUpsertArgs<ExtArgs>>): Prisma__ProportionsClient<$Result.GetResult<Prisma.$ProportionsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Proportions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProportionsCountArgs} args - Arguments to filter Proportions to count.
     * @example
     * // Count the number of Proportions
     * const count = await prisma.proportions.count({
     *   where: {
     *     // ... the filter for the Proportions we want to count
     *   }
     * })
    **/
    count<T extends ProportionsCountArgs>(
      args?: Subset<T, ProportionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProportionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Proportions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProportionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProportionsAggregateArgs>(args: Subset<T, ProportionsAggregateArgs>): Prisma.PrismaPromise<GetProportionsAggregateType<T>>

    /**
     * Group by Proportions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProportionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProportionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProportionsGroupByArgs['orderBy'] }
        : { orderBy?: ProportionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProportionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProportionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Proportions model
   */
  readonly fields: ProportionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Proportions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProportionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    categories<T extends Proportions$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Proportions$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    sizes<T extends Proportions$sizesArgs<ExtArgs> = {}>(args?: Subset<T, Proportions$sizesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Proportions model
   */ 
  interface ProportionsFieldRefs {
    readonly id: FieldRef<"Proportions", 'Int'>
    readonly value: FieldRef<"Proportions", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Proportions findUnique
   */
  export type ProportionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proportions
     */
    select?: ProportionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Proportions
     */
    omit?: ProportionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProportionsInclude<ExtArgs> | null
    /**
     * Filter, which Proportions to fetch.
     */
    where: ProportionsWhereUniqueInput
  }

  /**
   * Proportions findUniqueOrThrow
   */
  export type ProportionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proportions
     */
    select?: ProportionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Proportions
     */
    omit?: ProportionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProportionsInclude<ExtArgs> | null
    /**
     * Filter, which Proportions to fetch.
     */
    where: ProportionsWhereUniqueInput
  }

  /**
   * Proportions findFirst
   */
  export type ProportionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proportions
     */
    select?: ProportionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Proportions
     */
    omit?: ProportionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProportionsInclude<ExtArgs> | null
    /**
     * Filter, which Proportions to fetch.
     */
    where?: ProportionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proportions to fetch.
     */
    orderBy?: ProportionsOrderByWithRelationInput | ProportionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Proportions.
     */
    cursor?: ProportionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proportions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proportions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Proportions.
     */
    distinct?: ProportionsScalarFieldEnum | ProportionsScalarFieldEnum[]
  }

  /**
   * Proportions findFirstOrThrow
   */
  export type ProportionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proportions
     */
    select?: ProportionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Proportions
     */
    omit?: ProportionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProportionsInclude<ExtArgs> | null
    /**
     * Filter, which Proportions to fetch.
     */
    where?: ProportionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proportions to fetch.
     */
    orderBy?: ProportionsOrderByWithRelationInput | ProportionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Proportions.
     */
    cursor?: ProportionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proportions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proportions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Proportions.
     */
    distinct?: ProportionsScalarFieldEnum | ProportionsScalarFieldEnum[]
  }

  /**
   * Proportions findMany
   */
  export type ProportionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proportions
     */
    select?: ProportionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Proportions
     */
    omit?: ProportionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProportionsInclude<ExtArgs> | null
    /**
     * Filter, which Proportions to fetch.
     */
    where?: ProportionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proportions to fetch.
     */
    orderBy?: ProportionsOrderByWithRelationInput | ProportionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Proportions.
     */
    cursor?: ProportionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proportions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proportions.
     */
    skip?: number
    distinct?: ProportionsScalarFieldEnum | ProportionsScalarFieldEnum[]
  }

  /**
   * Proportions create
   */
  export type ProportionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proportions
     */
    select?: ProportionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Proportions
     */
    omit?: ProportionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProportionsInclude<ExtArgs> | null
    /**
     * The data needed to create a Proportions.
     */
    data: XOR<ProportionsCreateInput, ProportionsUncheckedCreateInput>
  }

  /**
   * Proportions createMany
   */
  export type ProportionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Proportions.
     */
    data: ProportionsCreateManyInput | ProportionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Proportions createManyAndReturn
   */
  export type ProportionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proportions
     */
    select?: ProportionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Proportions
     */
    omit?: ProportionsOmit<ExtArgs> | null
    /**
     * The data used to create many Proportions.
     */
    data: ProportionsCreateManyInput | ProportionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Proportions update
   */
  export type ProportionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proportions
     */
    select?: ProportionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Proportions
     */
    omit?: ProportionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProportionsInclude<ExtArgs> | null
    /**
     * The data needed to update a Proportions.
     */
    data: XOR<ProportionsUpdateInput, ProportionsUncheckedUpdateInput>
    /**
     * Choose, which Proportions to update.
     */
    where: ProportionsWhereUniqueInput
  }

  /**
   * Proportions updateMany
   */
  export type ProportionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Proportions.
     */
    data: XOR<ProportionsUpdateManyMutationInput, ProportionsUncheckedUpdateManyInput>
    /**
     * Filter which Proportions to update
     */
    where?: ProportionsWhereInput
    /**
     * Limit how many Proportions to update.
     */
    limit?: number
  }

  /**
   * Proportions updateManyAndReturn
   */
  export type ProportionsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proportions
     */
    select?: ProportionsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Proportions
     */
    omit?: ProportionsOmit<ExtArgs> | null
    /**
     * The data used to update Proportions.
     */
    data: XOR<ProportionsUpdateManyMutationInput, ProportionsUncheckedUpdateManyInput>
    /**
     * Filter which Proportions to update
     */
    where?: ProportionsWhereInput
    /**
     * Limit how many Proportions to update.
     */
    limit?: number
  }

  /**
   * Proportions upsert
   */
  export type ProportionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proportions
     */
    select?: ProportionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Proportions
     */
    omit?: ProportionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProportionsInclude<ExtArgs> | null
    /**
     * The filter to search for the Proportions to update in case it exists.
     */
    where: ProportionsWhereUniqueInput
    /**
     * In case the Proportions found by the `where` argument doesn't exist, create a new Proportions with this data.
     */
    create: XOR<ProportionsCreateInput, ProportionsUncheckedCreateInput>
    /**
     * In case the Proportions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProportionsUpdateInput, ProportionsUncheckedUpdateInput>
  }

  /**
   * Proportions delete
   */
  export type ProportionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proportions
     */
    select?: ProportionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Proportions
     */
    omit?: ProportionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProportionsInclude<ExtArgs> | null
    /**
     * Filter which Proportions to delete.
     */
    where: ProportionsWhereUniqueInput
  }

  /**
   * Proportions deleteMany
   */
  export type ProportionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Proportions to delete
     */
    where?: ProportionsWhereInput
    /**
     * Limit how many Proportions to delete.
     */
    limit?: number
  }

  /**
   * Proportions.categories
   */
  export type Proportions$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Proportions.sizes
   */
  export type Proportions$sizesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sizes
     */
    select?: SizesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sizes
     */
    omit?: SizesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizesInclude<ExtArgs> | null
    where?: SizesWhereInput
    orderBy?: SizesOrderByWithRelationInput | SizesOrderByWithRelationInput[]
    cursor?: SizesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SizesScalarFieldEnum | SizesScalarFieldEnum[]
  }

  /**
   * Proportions without action
   */
  export type ProportionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proportions
     */
    select?: ProportionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Proportions
     */
    omit?: ProportionsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProportionsInclude<ExtArgs> | null
  }


  /**
   * Model Sizes
   */

  export type AggregateSizes = {
    _count: SizesCountAggregateOutputType | null
    _avg: SizesAvgAggregateOutputType | null
    _sum: SizesSumAggregateOutputType | null
    _min: SizesMinAggregateOutputType | null
    _max: SizesMaxAggregateOutputType | null
  }

  export type SizesAvgAggregateOutputType = {
    id: number | null
    proportionId: number | null
    price: number | null
    productVariantId: number | null
    quantity: number | null
  }

  export type SizesSumAggregateOutputType = {
    id: number | null
    proportionId: number | null
    price: number | null
    productVariantId: number | null
    quantity: number | null
  }

  export type SizesMinAggregateOutputType = {
    id: number | null
    proportionId: number | null
    price: number | null
    weight: string | null
    productVariantId: number | null
    quantity: number | null
  }

  export type SizesMaxAggregateOutputType = {
    id: number | null
    proportionId: number | null
    price: number | null
    weight: string | null
    productVariantId: number | null
    quantity: number | null
  }

  export type SizesCountAggregateOutputType = {
    id: number
    proportionId: number
    price: number
    weight: number
    productVariantId: number
    quantity: number
    _all: number
  }


  export type SizesAvgAggregateInputType = {
    id?: true
    proportionId?: true
    price?: true
    productVariantId?: true
    quantity?: true
  }

  export type SizesSumAggregateInputType = {
    id?: true
    proportionId?: true
    price?: true
    productVariantId?: true
    quantity?: true
  }

  export type SizesMinAggregateInputType = {
    id?: true
    proportionId?: true
    price?: true
    weight?: true
    productVariantId?: true
    quantity?: true
  }

  export type SizesMaxAggregateInputType = {
    id?: true
    proportionId?: true
    price?: true
    weight?: true
    productVariantId?: true
    quantity?: true
  }

  export type SizesCountAggregateInputType = {
    id?: true
    proportionId?: true
    price?: true
    weight?: true
    productVariantId?: true
    quantity?: true
    _all?: true
  }

  export type SizesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sizes to aggregate.
     */
    where?: SizesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sizes to fetch.
     */
    orderBy?: SizesOrderByWithRelationInput | SizesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SizesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sizes
    **/
    _count?: true | SizesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SizesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SizesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SizesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SizesMaxAggregateInputType
  }

  export type GetSizesAggregateType<T extends SizesAggregateArgs> = {
        [P in keyof T & keyof AggregateSizes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSizes[P]>
      : GetScalarType<T[P], AggregateSizes[P]>
  }




  export type SizesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SizesWhereInput
    orderBy?: SizesOrderByWithAggregationInput | SizesOrderByWithAggregationInput[]
    by: SizesScalarFieldEnum[] | SizesScalarFieldEnum
    having?: SizesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SizesCountAggregateInputType | true
    _avg?: SizesAvgAggregateInputType
    _sum?: SizesSumAggregateInputType
    _min?: SizesMinAggregateInputType
    _max?: SizesMaxAggregateInputType
  }

  export type SizesGroupByOutputType = {
    id: number
    proportionId: number
    price: number
    weight: string | null
    productVariantId: number
    quantity: number | null
    _count: SizesCountAggregateOutputType | null
    _avg: SizesAvgAggregateOutputType | null
    _sum: SizesSumAggregateOutputType | null
    _min: SizesMinAggregateOutputType | null
    _max: SizesMaxAggregateOutputType | null
  }

  type GetSizesGroupByPayload<T extends SizesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SizesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SizesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SizesGroupByOutputType[P]>
            : GetScalarType<T[P], SizesGroupByOutputType[P]>
        }
      >
    >


  export type SizesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    proportionId?: boolean
    price?: boolean
    weight?: boolean
    productVariantId?: boolean
    quantity?: boolean
    proportion?: boolean | ProportionsDefaultArgs<ExtArgs>
    ingredients?: boolean | Sizes$ingredientsArgs<ExtArgs>
    productVariant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    SubProduct?: boolean | Sizes$SubProductArgs<ExtArgs>
    CartItem?: boolean | Sizes$CartItemArgs<ExtArgs>
    CartSubProduct?: boolean | Sizes$CartSubProductArgs<ExtArgs>
    _count?: boolean | SizesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sizes"]>

  export type SizesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    proportionId?: boolean
    price?: boolean
    weight?: boolean
    productVariantId?: boolean
    quantity?: boolean
    proportion?: boolean | ProportionsDefaultArgs<ExtArgs>
    productVariant?: boolean | ProductVariantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sizes"]>

  export type SizesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    proportionId?: boolean
    price?: boolean
    weight?: boolean
    productVariantId?: boolean
    quantity?: boolean
    proportion?: boolean | ProportionsDefaultArgs<ExtArgs>
    productVariant?: boolean | ProductVariantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sizes"]>

  export type SizesSelectScalar = {
    id?: boolean
    proportionId?: boolean
    price?: boolean
    weight?: boolean
    productVariantId?: boolean
    quantity?: boolean
  }

  export type SizesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "proportionId" | "price" | "weight" | "productVariantId" | "quantity", ExtArgs["result"]["sizes"]>
  export type SizesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proportion?: boolean | ProportionsDefaultArgs<ExtArgs>
    ingredients?: boolean | Sizes$ingredientsArgs<ExtArgs>
    productVariant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    SubProduct?: boolean | Sizes$SubProductArgs<ExtArgs>
    CartItem?: boolean | Sizes$CartItemArgs<ExtArgs>
    CartSubProduct?: boolean | Sizes$CartSubProductArgs<ExtArgs>
    _count?: boolean | SizesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SizesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proportion?: boolean | ProportionsDefaultArgs<ExtArgs>
    productVariant?: boolean | ProductVariantDefaultArgs<ExtArgs>
  }
  export type SizesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proportion?: boolean | ProportionsDefaultArgs<ExtArgs>
    productVariant?: boolean | ProductVariantDefaultArgs<ExtArgs>
  }

  export type $SizesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sizes"
    objects: {
      proportion: Prisma.$ProportionsPayload<ExtArgs>
      ingredients: Prisma.$IngredientPayload<ExtArgs>[]
      productVariant: Prisma.$ProductVariantPayload<ExtArgs>
      SubProduct: Prisma.$SubProductPayload<ExtArgs>[]
      CartItem: Prisma.$CartItemPayload<ExtArgs>[]
      CartSubProduct: Prisma.$CartSubProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      proportionId: number
      price: number
      weight: string | null
      productVariantId: number
      quantity: number | null
    }, ExtArgs["result"]["sizes"]>
    composites: {}
  }

  type SizesGetPayload<S extends boolean | null | undefined | SizesDefaultArgs> = $Result.GetResult<Prisma.$SizesPayload, S>

  type SizesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SizesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SizesCountAggregateInputType | true
    }

  export interface SizesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sizes'], meta: { name: 'Sizes' } }
    /**
     * Find zero or one Sizes that matches the filter.
     * @param {SizesFindUniqueArgs} args - Arguments to find a Sizes
     * @example
     * // Get one Sizes
     * const sizes = await prisma.sizes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SizesFindUniqueArgs>(args: SelectSubset<T, SizesFindUniqueArgs<ExtArgs>>): Prisma__SizesClient<$Result.GetResult<Prisma.$SizesPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Sizes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SizesFindUniqueOrThrowArgs} args - Arguments to find a Sizes
     * @example
     * // Get one Sizes
     * const sizes = await prisma.sizes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SizesFindUniqueOrThrowArgs>(args: SelectSubset<T, SizesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SizesClient<$Result.GetResult<Prisma.$SizesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Sizes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizesFindFirstArgs} args - Arguments to find a Sizes
     * @example
     * // Get one Sizes
     * const sizes = await prisma.sizes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SizesFindFirstArgs>(args?: SelectSubset<T, SizesFindFirstArgs<ExtArgs>>): Prisma__SizesClient<$Result.GetResult<Prisma.$SizesPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Sizes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizesFindFirstOrThrowArgs} args - Arguments to find a Sizes
     * @example
     * // Get one Sizes
     * const sizes = await prisma.sizes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SizesFindFirstOrThrowArgs>(args?: SelectSubset<T, SizesFindFirstOrThrowArgs<ExtArgs>>): Prisma__SizesClient<$Result.GetResult<Prisma.$SizesPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Sizes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sizes
     * const sizes = await prisma.sizes.findMany()
     * 
     * // Get first 10 Sizes
     * const sizes = await prisma.sizes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sizesWithIdOnly = await prisma.sizes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SizesFindManyArgs>(args?: SelectSubset<T, SizesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizesPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Sizes.
     * @param {SizesCreateArgs} args - Arguments to create a Sizes.
     * @example
     * // Create one Sizes
     * const Sizes = await prisma.sizes.create({
     *   data: {
     *     // ... data to create a Sizes
     *   }
     * })
     * 
     */
    create<T extends SizesCreateArgs>(args: SelectSubset<T, SizesCreateArgs<ExtArgs>>): Prisma__SizesClient<$Result.GetResult<Prisma.$SizesPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Sizes.
     * @param {SizesCreateManyArgs} args - Arguments to create many Sizes.
     * @example
     * // Create many Sizes
     * const sizes = await prisma.sizes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SizesCreateManyArgs>(args?: SelectSubset<T, SizesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sizes and returns the data saved in the database.
     * @param {SizesCreateManyAndReturnArgs} args - Arguments to create many Sizes.
     * @example
     * // Create many Sizes
     * const sizes = await prisma.sizes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sizes and only return the `id`
     * const sizesWithIdOnly = await prisma.sizes.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SizesCreateManyAndReturnArgs>(args?: SelectSubset<T, SizesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizesPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Sizes.
     * @param {SizesDeleteArgs} args - Arguments to delete one Sizes.
     * @example
     * // Delete one Sizes
     * const Sizes = await prisma.sizes.delete({
     *   where: {
     *     // ... filter to delete one Sizes
     *   }
     * })
     * 
     */
    delete<T extends SizesDeleteArgs>(args: SelectSubset<T, SizesDeleteArgs<ExtArgs>>): Prisma__SizesClient<$Result.GetResult<Prisma.$SizesPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Sizes.
     * @param {SizesUpdateArgs} args - Arguments to update one Sizes.
     * @example
     * // Update one Sizes
     * const sizes = await prisma.sizes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SizesUpdateArgs>(args: SelectSubset<T, SizesUpdateArgs<ExtArgs>>): Prisma__SizesClient<$Result.GetResult<Prisma.$SizesPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Sizes.
     * @param {SizesDeleteManyArgs} args - Arguments to filter Sizes to delete.
     * @example
     * // Delete a few Sizes
     * const { count } = await prisma.sizes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SizesDeleteManyArgs>(args?: SelectSubset<T, SizesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sizes
     * const sizes = await prisma.sizes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SizesUpdateManyArgs>(args: SelectSubset<T, SizesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sizes and returns the data updated in the database.
     * @param {SizesUpdateManyAndReturnArgs} args - Arguments to update many Sizes.
     * @example
     * // Update many Sizes
     * const sizes = await prisma.sizes.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sizes and only return the `id`
     * const sizesWithIdOnly = await prisma.sizes.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SizesUpdateManyAndReturnArgs>(args: SelectSubset<T, SizesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizesPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Sizes.
     * @param {SizesUpsertArgs} args - Arguments to update or create a Sizes.
     * @example
     * // Update or create a Sizes
     * const sizes = await prisma.sizes.upsert({
     *   create: {
     *     // ... data to create a Sizes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sizes we want to update
     *   }
     * })
     */
    upsert<T extends SizesUpsertArgs>(args: SelectSubset<T, SizesUpsertArgs<ExtArgs>>): Prisma__SizesClient<$Result.GetResult<Prisma.$SizesPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Sizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizesCountArgs} args - Arguments to filter Sizes to count.
     * @example
     * // Count the number of Sizes
     * const count = await prisma.sizes.count({
     *   where: {
     *     // ... the filter for the Sizes we want to count
     *   }
     * })
    **/
    count<T extends SizesCountArgs>(
      args?: Subset<T, SizesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SizesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SizesAggregateArgs>(args: Subset<T, SizesAggregateArgs>): Prisma.PrismaPromise<GetSizesAggregateType<T>>

    /**
     * Group by Sizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SizesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SizesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SizesGroupByArgs['orderBy'] }
        : { orderBy?: SizesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SizesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSizesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sizes model
   */
  readonly fields: SizesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sizes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SizesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    proportion<T extends ProportionsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProportionsDefaultArgs<ExtArgs>>): Prisma__ProportionsClient<$Result.GetResult<Prisma.$ProportionsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    ingredients<T extends Sizes$ingredientsArgs<ExtArgs> = {}>(args?: Subset<T, Sizes$ingredientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    productVariant<T extends ProductVariantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductVariantDefaultArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    SubProduct<T extends Sizes$SubProductArgs<ExtArgs> = {}>(args?: Subset<T, Sizes$SubProductArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubProductPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    CartItem<T extends Sizes$CartItemArgs<ExtArgs> = {}>(args?: Subset<T, Sizes$CartItemArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    CartSubProduct<T extends Sizes$CartSubProductArgs<ExtArgs> = {}>(args?: Subset<T, Sizes$CartSubProductArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartSubProductPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sizes model
   */ 
  interface SizesFieldRefs {
    readonly id: FieldRef<"Sizes", 'Int'>
    readonly proportionId: FieldRef<"Sizes", 'Int'>
    readonly price: FieldRef<"Sizes", 'Int'>
    readonly weight: FieldRef<"Sizes", 'String'>
    readonly productVariantId: FieldRef<"Sizes", 'Int'>
    readonly quantity: FieldRef<"Sizes", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Sizes findUnique
   */
  export type SizesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sizes
     */
    select?: SizesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sizes
     */
    omit?: SizesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizesInclude<ExtArgs> | null
    /**
     * Filter, which Sizes to fetch.
     */
    where: SizesWhereUniqueInput
  }

  /**
   * Sizes findUniqueOrThrow
   */
  export type SizesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sizes
     */
    select?: SizesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sizes
     */
    omit?: SizesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizesInclude<ExtArgs> | null
    /**
     * Filter, which Sizes to fetch.
     */
    where: SizesWhereUniqueInput
  }

  /**
   * Sizes findFirst
   */
  export type SizesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sizes
     */
    select?: SizesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sizes
     */
    omit?: SizesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizesInclude<ExtArgs> | null
    /**
     * Filter, which Sizes to fetch.
     */
    where?: SizesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sizes to fetch.
     */
    orderBy?: SizesOrderByWithRelationInput | SizesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sizes.
     */
    cursor?: SizesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sizes.
     */
    distinct?: SizesScalarFieldEnum | SizesScalarFieldEnum[]
  }

  /**
   * Sizes findFirstOrThrow
   */
  export type SizesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sizes
     */
    select?: SizesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sizes
     */
    omit?: SizesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizesInclude<ExtArgs> | null
    /**
     * Filter, which Sizes to fetch.
     */
    where?: SizesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sizes to fetch.
     */
    orderBy?: SizesOrderByWithRelationInput | SizesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sizes.
     */
    cursor?: SizesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sizes.
     */
    distinct?: SizesScalarFieldEnum | SizesScalarFieldEnum[]
  }

  /**
   * Sizes findMany
   */
  export type SizesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sizes
     */
    select?: SizesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sizes
     */
    omit?: SizesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizesInclude<ExtArgs> | null
    /**
     * Filter, which Sizes to fetch.
     */
    where?: SizesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sizes to fetch.
     */
    orderBy?: SizesOrderByWithRelationInput | SizesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sizes.
     */
    cursor?: SizesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sizes.
     */
    skip?: number
    distinct?: SizesScalarFieldEnum | SizesScalarFieldEnum[]
  }

  /**
   * Sizes create
   */
  export type SizesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sizes
     */
    select?: SizesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sizes
     */
    omit?: SizesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizesInclude<ExtArgs> | null
    /**
     * The data needed to create a Sizes.
     */
    data: XOR<SizesCreateInput, SizesUncheckedCreateInput>
  }

  /**
   * Sizes createMany
   */
  export type SizesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sizes.
     */
    data: SizesCreateManyInput | SizesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sizes createManyAndReturn
   */
  export type SizesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sizes
     */
    select?: SizesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sizes
     */
    omit?: SizesOmit<ExtArgs> | null
    /**
     * The data used to create many Sizes.
     */
    data: SizesCreateManyInput | SizesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sizes update
   */
  export type SizesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sizes
     */
    select?: SizesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sizes
     */
    omit?: SizesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizesInclude<ExtArgs> | null
    /**
     * The data needed to update a Sizes.
     */
    data: XOR<SizesUpdateInput, SizesUncheckedUpdateInput>
    /**
     * Choose, which Sizes to update.
     */
    where: SizesWhereUniqueInput
  }

  /**
   * Sizes updateMany
   */
  export type SizesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sizes.
     */
    data: XOR<SizesUpdateManyMutationInput, SizesUncheckedUpdateManyInput>
    /**
     * Filter which Sizes to update
     */
    where?: SizesWhereInput
    /**
     * Limit how many Sizes to update.
     */
    limit?: number
  }

  /**
   * Sizes updateManyAndReturn
   */
  export type SizesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sizes
     */
    select?: SizesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Sizes
     */
    omit?: SizesOmit<ExtArgs> | null
    /**
     * The data used to update Sizes.
     */
    data: XOR<SizesUpdateManyMutationInput, SizesUncheckedUpdateManyInput>
    /**
     * Filter which Sizes to update
     */
    where?: SizesWhereInput
    /**
     * Limit how many Sizes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Sizes upsert
   */
  export type SizesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sizes
     */
    select?: SizesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sizes
     */
    omit?: SizesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizesInclude<ExtArgs> | null
    /**
     * The filter to search for the Sizes to update in case it exists.
     */
    where: SizesWhereUniqueInput
    /**
     * In case the Sizes found by the `where` argument doesn't exist, create a new Sizes with this data.
     */
    create: XOR<SizesCreateInput, SizesUncheckedCreateInput>
    /**
     * In case the Sizes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SizesUpdateInput, SizesUncheckedUpdateInput>
  }

  /**
   * Sizes delete
   */
  export type SizesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sizes
     */
    select?: SizesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sizes
     */
    omit?: SizesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizesInclude<ExtArgs> | null
    /**
     * Filter which Sizes to delete.
     */
    where: SizesWhereUniqueInput
  }

  /**
   * Sizes deleteMany
   */
  export type SizesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sizes to delete
     */
    where?: SizesWhereInput
    /**
     * Limit how many Sizes to delete.
     */
    limit?: number
  }

  /**
   * Sizes.ingredients
   */
  export type Sizes$ingredientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    where?: IngredientWhereInput
    orderBy?: IngredientOrderByWithRelationInput | IngredientOrderByWithRelationInput[]
    cursor?: IngredientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IngredientScalarFieldEnum | IngredientScalarFieldEnum[]
  }

  /**
   * Sizes.SubProduct
   */
  export type Sizes$SubProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubProduct
     */
    select?: SubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubProduct
     */
    omit?: SubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubProductInclude<ExtArgs> | null
    where?: SubProductWhereInput
    orderBy?: SubProductOrderByWithRelationInput | SubProductOrderByWithRelationInput[]
    cursor?: SubProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubProductScalarFieldEnum | SubProductScalarFieldEnum[]
  }

  /**
   * Sizes.CartItem
   */
  export type Sizes$CartItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    where?: CartItemWhereInput
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    cursor?: CartItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * Sizes.CartSubProduct
   */
  export type Sizes$CartSubProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartSubProduct
     */
    select?: CartSubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartSubProduct
     */
    omit?: CartSubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartSubProductInclude<ExtArgs> | null
    where?: CartSubProductWhereInput
    orderBy?: CartSubProductOrderByWithRelationInput | CartSubProductOrderByWithRelationInput[]
    cursor?: CartSubProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartSubProductScalarFieldEnum | CartSubProductScalarFieldEnum[]
  }

  /**
   * Sizes without action
   */
  export type SizesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sizes
     */
    select?: SizesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sizes
     */
    omit?: SizesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizesInclude<ExtArgs> | null
  }


  /**
   * Model Ingredient
   */

  export type AggregateIngredient = {
    _count: IngredientCountAggregateOutputType | null
    _avg: IngredientAvgAggregateOutputType | null
    _sum: IngredientSumAggregateOutputType | null
    _min: IngredientMinAggregateOutputType | null
    _max: IngredientMaxAggregateOutputType | null
  }

  export type IngredientAvgAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type IngredientSumAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type IngredientMinAggregateOutputType = {
    id: number | null
    name: string | null
    price: number | null
    createdAt: Date | null
    updatedAt: Date | null
    image: string | null
  }

  export type IngredientMaxAggregateOutputType = {
    id: number | null
    name: string | null
    price: number | null
    createdAt: Date | null
    updatedAt: Date | null
    image: string | null
  }

  export type IngredientCountAggregateOutputType = {
    id: number
    name: number
    price: number
    createdAt: number
    updatedAt: number
    image: number
    _all: number
  }


  export type IngredientAvgAggregateInputType = {
    id?: true
    price?: true
  }

  export type IngredientSumAggregateInputType = {
    id?: true
    price?: true
  }

  export type IngredientMinAggregateInputType = {
    id?: true
    name?: true
    price?: true
    createdAt?: true
    updatedAt?: true
    image?: true
  }

  export type IngredientMaxAggregateInputType = {
    id?: true
    name?: true
    price?: true
    createdAt?: true
    updatedAt?: true
    image?: true
  }

  export type IngredientCountAggregateInputType = {
    id?: true
    name?: true
    price?: true
    createdAt?: true
    updatedAt?: true
    image?: true
    _all?: true
  }

  export type IngredientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ingredient to aggregate.
     */
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     */
    orderBy?: IngredientOrderByWithRelationInput | IngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ingredients
    **/
    _count?: true | IngredientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IngredientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IngredientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IngredientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IngredientMaxAggregateInputType
  }

  export type GetIngredientAggregateType<T extends IngredientAggregateArgs> = {
        [P in keyof T & keyof AggregateIngredient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIngredient[P]>
      : GetScalarType<T[P], AggregateIngredient[P]>
  }




  export type IngredientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IngredientWhereInput
    orderBy?: IngredientOrderByWithAggregationInput | IngredientOrderByWithAggregationInput[]
    by: IngredientScalarFieldEnum[] | IngredientScalarFieldEnum
    having?: IngredientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IngredientCountAggregateInputType | true
    _avg?: IngredientAvgAggregateInputType
    _sum?: IngredientSumAggregateInputType
    _min?: IngredientMinAggregateInputType
    _max?: IngredientMaxAggregateInputType
  }

  export type IngredientGroupByOutputType = {
    id: number
    name: string
    price: number
    createdAt: Date
    updatedAt: Date
    image: string
    _count: IngredientCountAggregateOutputType | null
    _avg: IngredientAvgAggregateOutputType | null
    _sum: IngredientSumAggregateOutputType | null
    _min: IngredientMinAggregateOutputType | null
    _max: IngredientMaxAggregateOutputType | null
  }

  type GetIngredientGroupByPayload<T extends IngredientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IngredientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IngredientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IngredientGroupByOutputType[P]>
            : GetScalarType<T[P], IngredientGroupByOutputType[P]>
        }
      >
    >


  export type IngredientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    image?: boolean
    categories?: boolean | Ingredient$categoriesArgs<ExtArgs>
    sizes?: boolean | Ingredient$sizesArgs<ExtArgs>
    product?: boolean | Ingredient$productArgs<ExtArgs>
    cartItems?: boolean | Ingredient$cartItemsArgs<ExtArgs>
    _count?: boolean | IngredientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ingredient"]>

  export type IngredientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    image?: boolean
  }, ExtArgs["result"]["ingredient"]>

  export type IngredientSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    image?: boolean
  }, ExtArgs["result"]["ingredient"]>

  export type IngredientSelectScalar = {
    id?: boolean
    name?: boolean
    price?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    image?: boolean
  }

  export type IngredientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "price" | "createdAt" | "updatedAt" | "image", ExtArgs["result"]["ingredient"]>
  export type IngredientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | Ingredient$categoriesArgs<ExtArgs>
    sizes?: boolean | Ingredient$sizesArgs<ExtArgs>
    product?: boolean | Ingredient$productArgs<ExtArgs>
    cartItems?: boolean | Ingredient$cartItemsArgs<ExtArgs>
    _count?: boolean | IngredientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type IngredientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type IngredientIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $IngredientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ingredient"
    objects: {
      categories: Prisma.$CategoryPayload<ExtArgs>[]
      sizes: Prisma.$SizesPayload<ExtArgs>[]
      product: Prisma.$ProductPayload<ExtArgs>[]
      cartItems: Prisma.$CartItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      price: number
      createdAt: Date
      updatedAt: Date
      image: string
    }, ExtArgs["result"]["ingredient"]>
    composites: {}
  }

  type IngredientGetPayload<S extends boolean | null | undefined | IngredientDefaultArgs> = $Result.GetResult<Prisma.$IngredientPayload, S>

  type IngredientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<IngredientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: IngredientCountAggregateInputType | true
    }

  export interface IngredientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ingredient'], meta: { name: 'Ingredient' } }
    /**
     * Find zero or one Ingredient that matches the filter.
     * @param {IngredientFindUniqueArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IngredientFindUniqueArgs>(args: SelectSubset<T, IngredientFindUniqueArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Ingredient that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {IngredientFindUniqueOrThrowArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IngredientFindUniqueOrThrowArgs>(args: SelectSubset<T, IngredientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Ingredient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientFindFirstArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IngredientFindFirstArgs>(args?: SelectSubset<T, IngredientFindFirstArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Ingredient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientFindFirstOrThrowArgs} args - Arguments to find a Ingredient
     * @example
     * // Get one Ingredient
     * const ingredient = await prisma.ingredient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IngredientFindFirstOrThrowArgs>(args?: SelectSubset<T, IngredientFindFirstOrThrowArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Ingredients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ingredients
     * const ingredients = await prisma.ingredient.findMany()
     * 
     * // Get first 10 Ingredients
     * const ingredients = await prisma.ingredient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ingredientWithIdOnly = await prisma.ingredient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IngredientFindManyArgs>(args?: SelectSubset<T, IngredientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Ingredient.
     * @param {IngredientCreateArgs} args - Arguments to create a Ingredient.
     * @example
     * // Create one Ingredient
     * const Ingredient = await prisma.ingredient.create({
     *   data: {
     *     // ... data to create a Ingredient
     *   }
     * })
     * 
     */
    create<T extends IngredientCreateArgs>(args: SelectSubset<T, IngredientCreateArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Ingredients.
     * @param {IngredientCreateManyArgs} args - Arguments to create many Ingredients.
     * @example
     * // Create many Ingredients
     * const ingredient = await prisma.ingredient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IngredientCreateManyArgs>(args?: SelectSubset<T, IngredientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ingredients and returns the data saved in the database.
     * @param {IngredientCreateManyAndReturnArgs} args - Arguments to create many Ingredients.
     * @example
     * // Create many Ingredients
     * const ingredient = await prisma.ingredient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ingredients and only return the `id`
     * const ingredientWithIdOnly = await prisma.ingredient.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IngredientCreateManyAndReturnArgs>(args?: SelectSubset<T, IngredientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Ingredient.
     * @param {IngredientDeleteArgs} args - Arguments to delete one Ingredient.
     * @example
     * // Delete one Ingredient
     * const Ingredient = await prisma.ingredient.delete({
     *   where: {
     *     // ... filter to delete one Ingredient
     *   }
     * })
     * 
     */
    delete<T extends IngredientDeleteArgs>(args: SelectSubset<T, IngredientDeleteArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Ingredient.
     * @param {IngredientUpdateArgs} args - Arguments to update one Ingredient.
     * @example
     * // Update one Ingredient
     * const ingredient = await prisma.ingredient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IngredientUpdateArgs>(args: SelectSubset<T, IngredientUpdateArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Ingredients.
     * @param {IngredientDeleteManyArgs} args - Arguments to filter Ingredients to delete.
     * @example
     * // Delete a few Ingredients
     * const { count } = await prisma.ingredient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IngredientDeleteManyArgs>(args?: SelectSubset<T, IngredientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ingredients
     * const ingredient = await prisma.ingredient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IngredientUpdateManyArgs>(args: SelectSubset<T, IngredientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ingredients and returns the data updated in the database.
     * @param {IngredientUpdateManyAndReturnArgs} args - Arguments to update many Ingredients.
     * @example
     * // Update many Ingredients
     * const ingredient = await prisma.ingredient.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ingredients and only return the `id`
     * const ingredientWithIdOnly = await prisma.ingredient.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends IngredientUpdateManyAndReturnArgs>(args: SelectSubset<T, IngredientUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Ingredient.
     * @param {IngredientUpsertArgs} args - Arguments to update or create a Ingredient.
     * @example
     * // Update or create a Ingredient
     * const ingredient = await prisma.ingredient.upsert({
     *   create: {
     *     // ... data to create a Ingredient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ingredient we want to update
     *   }
     * })
     */
    upsert<T extends IngredientUpsertArgs>(args: SelectSubset<T, IngredientUpsertArgs<ExtArgs>>): Prisma__IngredientClient<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Ingredients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientCountArgs} args - Arguments to filter Ingredients to count.
     * @example
     * // Count the number of Ingredients
     * const count = await prisma.ingredient.count({
     *   where: {
     *     // ... the filter for the Ingredients we want to count
     *   }
     * })
    **/
    count<T extends IngredientCountArgs>(
      args?: Subset<T, IngredientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IngredientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ingredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IngredientAggregateArgs>(args: Subset<T, IngredientAggregateArgs>): Prisma.PrismaPromise<GetIngredientAggregateType<T>>

    /**
     * Group by Ingredient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IngredientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IngredientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IngredientGroupByArgs['orderBy'] }
        : { orderBy?: IngredientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IngredientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIngredientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ingredient model
   */
  readonly fields: IngredientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ingredient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IngredientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    categories<T extends Ingredient$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Ingredient$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    sizes<T extends Ingredient$sizesArgs<ExtArgs> = {}>(args?: Subset<T, Ingredient$sizesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SizesPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    product<T extends Ingredient$productArgs<ExtArgs> = {}>(args?: Subset<T, Ingredient$productArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    cartItems<T extends Ingredient$cartItemsArgs<ExtArgs> = {}>(args?: Subset<T, Ingredient$cartItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ingredient model
   */ 
  interface IngredientFieldRefs {
    readonly id: FieldRef<"Ingredient", 'Int'>
    readonly name: FieldRef<"Ingredient", 'String'>
    readonly price: FieldRef<"Ingredient", 'Int'>
    readonly createdAt: FieldRef<"Ingredient", 'DateTime'>
    readonly updatedAt: FieldRef<"Ingredient", 'DateTime'>
    readonly image: FieldRef<"Ingredient", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Ingredient findUnique
   */
  export type IngredientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter, which Ingredient to fetch.
     */
    where: IngredientWhereUniqueInput
  }

  /**
   * Ingredient findUniqueOrThrow
   */
  export type IngredientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter, which Ingredient to fetch.
     */
    where: IngredientWhereUniqueInput
  }

  /**
   * Ingredient findFirst
   */
  export type IngredientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter, which Ingredient to fetch.
     */
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     */
    orderBy?: IngredientOrderByWithRelationInput | IngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ingredients.
     */
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ingredients.
     */
    distinct?: IngredientScalarFieldEnum | IngredientScalarFieldEnum[]
  }

  /**
   * Ingredient findFirstOrThrow
   */
  export type IngredientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter, which Ingredient to fetch.
     */
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     */
    orderBy?: IngredientOrderByWithRelationInput | IngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ingredients.
     */
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ingredients.
     */
    distinct?: IngredientScalarFieldEnum | IngredientScalarFieldEnum[]
  }

  /**
   * Ingredient findMany
   */
  export type IngredientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter, which Ingredients to fetch.
     */
    where?: IngredientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ingredients to fetch.
     */
    orderBy?: IngredientOrderByWithRelationInput | IngredientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ingredients.
     */
    cursor?: IngredientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ingredients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ingredients.
     */
    skip?: number
    distinct?: IngredientScalarFieldEnum | IngredientScalarFieldEnum[]
  }

  /**
   * Ingredient create
   */
  export type IngredientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * The data needed to create a Ingredient.
     */
    data: XOR<IngredientCreateInput, IngredientUncheckedCreateInput>
  }

  /**
   * Ingredient createMany
   */
  export type IngredientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ingredients.
     */
    data: IngredientCreateManyInput | IngredientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ingredient createManyAndReturn
   */
  export type IngredientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * The data used to create many Ingredients.
     */
    data: IngredientCreateManyInput | IngredientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ingredient update
   */
  export type IngredientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * The data needed to update a Ingredient.
     */
    data: XOR<IngredientUpdateInput, IngredientUncheckedUpdateInput>
    /**
     * Choose, which Ingredient to update.
     */
    where: IngredientWhereUniqueInput
  }

  /**
   * Ingredient updateMany
   */
  export type IngredientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ingredients.
     */
    data: XOR<IngredientUpdateManyMutationInput, IngredientUncheckedUpdateManyInput>
    /**
     * Filter which Ingredients to update
     */
    where?: IngredientWhereInput
    /**
     * Limit how many Ingredients to update.
     */
    limit?: number
  }

  /**
   * Ingredient updateManyAndReturn
   */
  export type IngredientUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * The data used to update Ingredients.
     */
    data: XOR<IngredientUpdateManyMutationInput, IngredientUncheckedUpdateManyInput>
    /**
     * Filter which Ingredients to update
     */
    where?: IngredientWhereInput
    /**
     * Limit how many Ingredients to update.
     */
    limit?: number
  }

  /**
   * Ingredient upsert
   */
  export type IngredientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * The filter to search for the Ingredient to update in case it exists.
     */
    where: IngredientWhereUniqueInput
    /**
     * In case the Ingredient found by the `where` argument doesn't exist, create a new Ingredient with this data.
     */
    create: XOR<IngredientCreateInput, IngredientUncheckedCreateInput>
    /**
     * In case the Ingredient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IngredientUpdateInput, IngredientUncheckedUpdateInput>
  }

  /**
   * Ingredient delete
   */
  export type IngredientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    /**
     * Filter which Ingredient to delete.
     */
    where: IngredientWhereUniqueInput
  }

  /**
   * Ingredient deleteMany
   */
  export type IngredientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ingredients to delete
     */
    where?: IngredientWhereInput
    /**
     * Limit how many Ingredients to delete.
     */
    limit?: number
  }

  /**
   * Ingredient.categories
   */
  export type Ingredient$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Ingredient.sizes
   */
  export type Ingredient$sizesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sizes
     */
    select?: SizesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sizes
     */
    omit?: SizesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizesInclude<ExtArgs> | null
    where?: SizesWhereInput
    orderBy?: SizesOrderByWithRelationInput | SizesOrderByWithRelationInput[]
    cursor?: SizesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SizesScalarFieldEnum | SizesScalarFieldEnum[]
  }

  /**
   * Ingredient.product
   */
  export type Ingredient$productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Ingredient.cartItems
   */
  export type Ingredient$cartItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    where?: CartItemWhereInput
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    cursor?: CartItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * Ingredient without action
   */
  export type IngredientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
  }


  /**
   * Model Cart
   */

  export type AggregateCart = {
    _count: CartCountAggregateOutputType | null
    _avg: CartAvgAggregateOutputType | null
    _sum: CartSumAggregateOutputType | null
    _min: CartMinAggregateOutputType | null
    _max: CartMaxAggregateOutputType | null
  }

  export type CartAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    totalAmount: number | null
    amountGoods: number | null
  }

  export type CartSumAggregateOutputType = {
    id: number | null
    userId: number | null
    totalAmount: number | null
    amountGoods: number | null
  }

  export type CartMinAggregateOutputType = {
    id: number | null
    userId: number | null
    totalAmount: number | null
    createdAt: Date | null
    updatedAt: Date | null
    amountGoods: number | null
  }

  export type CartMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    totalAmount: number | null
    createdAt: Date | null
    updatedAt: Date | null
    amountGoods: number | null
  }

  export type CartCountAggregateOutputType = {
    id: number
    userId: number
    totalAmount: number
    createdAt: number
    updatedAt: number
    amountGoods: number
    _all: number
  }


  export type CartAvgAggregateInputType = {
    id?: true
    userId?: true
    totalAmount?: true
    amountGoods?: true
  }

  export type CartSumAggregateInputType = {
    id?: true
    userId?: true
    totalAmount?: true
    amountGoods?: true
  }

  export type CartMinAggregateInputType = {
    id?: true
    userId?: true
    totalAmount?: true
    createdAt?: true
    updatedAt?: true
    amountGoods?: true
  }

  export type CartMaxAggregateInputType = {
    id?: true
    userId?: true
    totalAmount?: true
    createdAt?: true
    updatedAt?: true
    amountGoods?: true
  }

  export type CartCountAggregateInputType = {
    id?: true
    userId?: true
    totalAmount?: true
    createdAt?: true
    updatedAt?: true
    amountGoods?: true
    _all?: true
  }

  export type CartAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cart to aggregate.
     */
    where?: CartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carts to fetch.
     */
    orderBy?: CartOrderByWithRelationInput | CartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Carts
    **/
    _count?: true | CartCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CartAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CartSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CartMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CartMaxAggregateInputType
  }

  export type GetCartAggregateType<T extends CartAggregateArgs> = {
        [P in keyof T & keyof AggregateCart]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCart[P]>
      : GetScalarType<T[P], AggregateCart[P]>
  }




  export type CartGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartWhereInput
    orderBy?: CartOrderByWithAggregationInput | CartOrderByWithAggregationInput[]
    by: CartScalarFieldEnum[] | CartScalarFieldEnum
    having?: CartScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CartCountAggregateInputType | true
    _avg?: CartAvgAggregateInputType
    _sum?: CartSumAggregateInputType
    _min?: CartMinAggregateInputType
    _max?: CartMaxAggregateInputType
  }

  export type CartGroupByOutputType = {
    id: number
    userId: number
    totalAmount: number
    createdAt: Date
    updatedAt: Date
    amountGoods: number
    _count: CartCountAggregateOutputType | null
    _avg: CartAvgAggregateOutputType | null
    _sum: CartSumAggregateOutputType | null
    _min: CartMinAggregateOutputType | null
    _max: CartMaxAggregateOutputType | null
  }

  type GetCartGroupByPayload<T extends CartGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CartGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CartGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CartGroupByOutputType[P]>
            : GetScalarType<T[P], CartGroupByOutputType[P]>
        }
      >
    >


  export type CartSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    totalAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    amountGoods?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    items?: boolean | Cart$itemsArgs<ExtArgs>
    _count?: boolean | CartCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cart"]>

  export type CartSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    totalAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    amountGoods?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cart"]>

  export type CartSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    totalAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    amountGoods?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cart"]>

  export type CartSelectScalar = {
    id?: boolean
    userId?: boolean
    totalAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    amountGoods?: boolean
  }

  export type CartOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "totalAmount" | "createdAt" | "updatedAt" | "amountGoods", ExtArgs["result"]["cart"]>
  export type CartInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    items?: boolean | Cart$itemsArgs<ExtArgs>
    _count?: boolean | CartCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CartIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CartIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CartPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cart"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      items: Prisma.$CartItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      totalAmount: number
      createdAt: Date
      updatedAt: Date
      amountGoods: number
    }, ExtArgs["result"]["cart"]>
    composites: {}
  }

  type CartGetPayload<S extends boolean | null | undefined | CartDefaultArgs> = $Result.GetResult<Prisma.$CartPayload, S>

  type CartCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CartFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CartCountAggregateInputType | true
    }

  export interface CartDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cart'], meta: { name: 'Cart' } }
    /**
     * Find zero or one Cart that matches the filter.
     * @param {CartFindUniqueArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CartFindUniqueArgs>(args: SelectSubset<T, CartFindUniqueArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Cart that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CartFindUniqueOrThrowArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CartFindUniqueOrThrowArgs>(args: SelectSubset<T, CartFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Cart that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartFindFirstArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CartFindFirstArgs>(args?: SelectSubset<T, CartFindFirstArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Cart that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartFindFirstOrThrowArgs} args - Arguments to find a Cart
     * @example
     * // Get one Cart
     * const cart = await prisma.cart.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CartFindFirstOrThrowArgs>(args?: SelectSubset<T, CartFindFirstOrThrowArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Carts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Carts
     * const carts = await prisma.cart.findMany()
     * 
     * // Get first 10 Carts
     * const carts = await prisma.cart.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cartWithIdOnly = await prisma.cart.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CartFindManyArgs>(args?: SelectSubset<T, CartFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Cart.
     * @param {CartCreateArgs} args - Arguments to create a Cart.
     * @example
     * // Create one Cart
     * const Cart = await prisma.cart.create({
     *   data: {
     *     // ... data to create a Cart
     *   }
     * })
     * 
     */
    create<T extends CartCreateArgs>(args: SelectSubset<T, CartCreateArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Carts.
     * @param {CartCreateManyArgs} args - Arguments to create many Carts.
     * @example
     * // Create many Carts
     * const cart = await prisma.cart.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CartCreateManyArgs>(args?: SelectSubset<T, CartCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Carts and returns the data saved in the database.
     * @param {CartCreateManyAndReturnArgs} args - Arguments to create many Carts.
     * @example
     * // Create many Carts
     * const cart = await prisma.cart.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Carts and only return the `id`
     * const cartWithIdOnly = await prisma.cart.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CartCreateManyAndReturnArgs>(args?: SelectSubset<T, CartCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Cart.
     * @param {CartDeleteArgs} args - Arguments to delete one Cart.
     * @example
     * // Delete one Cart
     * const Cart = await prisma.cart.delete({
     *   where: {
     *     // ... filter to delete one Cart
     *   }
     * })
     * 
     */
    delete<T extends CartDeleteArgs>(args: SelectSubset<T, CartDeleteArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Cart.
     * @param {CartUpdateArgs} args - Arguments to update one Cart.
     * @example
     * // Update one Cart
     * const cart = await prisma.cart.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CartUpdateArgs>(args: SelectSubset<T, CartUpdateArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Carts.
     * @param {CartDeleteManyArgs} args - Arguments to filter Carts to delete.
     * @example
     * // Delete a few Carts
     * const { count } = await prisma.cart.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CartDeleteManyArgs>(args?: SelectSubset<T, CartDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Carts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Carts
     * const cart = await prisma.cart.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CartUpdateManyArgs>(args: SelectSubset<T, CartUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Carts and returns the data updated in the database.
     * @param {CartUpdateManyAndReturnArgs} args - Arguments to update many Carts.
     * @example
     * // Update many Carts
     * const cart = await prisma.cart.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Carts and only return the `id`
     * const cartWithIdOnly = await prisma.cart.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CartUpdateManyAndReturnArgs>(args: SelectSubset<T, CartUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Cart.
     * @param {CartUpsertArgs} args - Arguments to update or create a Cart.
     * @example
     * // Update or create a Cart
     * const cart = await prisma.cart.upsert({
     *   create: {
     *     // ... data to create a Cart
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cart we want to update
     *   }
     * })
     */
    upsert<T extends CartUpsertArgs>(args: SelectSubset<T, CartUpsertArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Carts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartCountArgs} args - Arguments to filter Carts to count.
     * @example
     * // Count the number of Carts
     * const count = await prisma.cart.count({
     *   where: {
     *     // ... the filter for the Carts we want to count
     *   }
     * })
    **/
    count<T extends CartCountArgs>(
      args?: Subset<T, CartCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CartCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CartAggregateArgs>(args: Subset<T, CartAggregateArgs>): Prisma.PrismaPromise<GetCartAggregateType<T>>

    /**
     * Group by Cart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CartGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CartGroupByArgs['orderBy'] }
        : { orderBy?: CartGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCartGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cart model
   */
  readonly fields: CartFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cart.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CartClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    items<T extends Cart$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Cart$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cart model
   */ 
  interface CartFieldRefs {
    readonly id: FieldRef<"Cart", 'Int'>
    readonly userId: FieldRef<"Cart", 'Int'>
    readonly totalAmount: FieldRef<"Cart", 'Int'>
    readonly createdAt: FieldRef<"Cart", 'DateTime'>
    readonly updatedAt: FieldRef<"Cart", 'DateTime'>
    readonly amountGoods: FieldRef<"Cart", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Cart findUnique
   */
  export type CartFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * Filter, which Cart to fetch.
     */
    where: CartWhereUniqueInput
  }

  /**
   * Cart findUniqueOrThrow
   */
  export type CartFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * Filter, which Cart to fetch.
     */
    where: CartWhereUniqueInput
  }

  /**
   * Cart findFirst
   */
  export type CartFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * Filter, which Cart to fetch.
     */
    where?: CartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carts to fetch.
     */
    orderBy?: CartOrderByWithRelationInput | CartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carts.
     */
    cursor?: CartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Carts.
     */
    distinct?: CartScalarFieldEnum | CartScalarFieldEnum[]
  }

  /**
   * Cart findFirstOrThrow
   */
  export type CartFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * Filter, which Cart to fetch.
     */
    where?: CartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carts to fetch.
     */
    orderBy?: CartOrderByWithRelationInput | CartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carts.
     */
    cursor?: CartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Carts.
     */
    distinct?: CartScalarFieldEnum | CartScalarFieldEnum[]
  }

  /**
   * Cart findMany
   */
  export type CartFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * Filter, which Carts to fetch.
     */
    where?: CartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carts to fetch.
     */
    orderBy?: CartOrderByWithRelationInput | CartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Carts.
     */
    cursor?: CartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carts.
     */
    skip?: number
    distinct?: CartScalarFieldEnum | CartScalarFieldEnum[]
  }

  /**
   * Cart create
   */
  export type CartCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * The data needed to create a Cart.
     */
    data: XOR<CartCreateInput, CartUncheckedCreateInput>
  }

  /**
   * Cart createMany
   */
  export type CartCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Carts.
     */
    data: CartCreateManyInput | CartCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cart createManyAndReturn
   */
  export type CartCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * The data used to create many Carts.
     */
    data: CartCreateManyInput | CartCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Cart update
   */
  export type CartUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * The data needed to update a Cart.
     */
    data: XOR<CartUpdateInput, CartUncheckedUpdateInput>
    /**
     * Choose, which Cart to update.
     */
    where: CartWhereUniqueInput
  }

  /**
   * Cart updateMany
   */
  export type CartUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Carts.
     */
    data: XOR<CartUpdateManyMutationInput, CartUncheckedUpdateManyInput>
    /**
     * Filter which Carts to update
     */
    where?: CartWhereInput
    /**
     * Limit how many Carts to update.
     */
    limit?: number
  }

  /**
   * Cart updateManyAndReturn
   */
  export type CartUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * The data used to update Carts.
     */
    data: XOR<CartUpdateManyMutationInput, CartUncheckedUpdateManyInput>
    /**
     * Filter which Carts to update
     */
    where?: CartWhereInput
    /**
     * Limit how many Carts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Cart upsert
   */
  export type CartUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * The filter to search for the Cart to update in case it exists.
     */
    where: CartWhereUniqueInput
    /**
     * In case the Cart found by the `where` argument doesn't exist, create a new Cart with this data.
     */
    create: XOR<CartCreateInput, CartUncheckedCreateInput>
    /**
     * In case the Cart was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CartUpdateInput, CartUncheckedUpdateInput>
  }

  /**
   * Cart delete
   */
  export type CartDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
    /**
     * Filter which Cart to delete.
     */
    where: CartWhereUniqueInput
  }

  /**
   * Cart deleteMany
   */
  export type CartDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Carts to delete
     */
    where?: CartWhereInput
    /**
     * Limit how many Carts to delete.
     */
    limit?: number
  }

  /**
   * Cart.items
   */
  export type Cart$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    where?: CartItemWhereInput
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    cursor?: CartItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * Cart without action
   */
  export type CartDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cart
     */
    select?: CartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cart
     */
    omit?: CartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartInclude<ExtArgs> | null
  }


  /**
   * Model CartItem
   */

  export type AggregateCartItem = {
    _count: CartItemCountAggregateOutputType | null
    _avg: CartItemAvgAggregateOutputType | null
    _sum: CartItemSumAggregateOutputType | null
    _min: CartItemMinAggregateOutputType | null
    _max: CartItemMaxAggregateOutputType | null
  }

  export type CartItemAvgAggregateOutputType = {
    id: number | null
    cartId: number | null
    productVariantId: number | null
    productId: number | null
    sizeId: number | null
    quantity: number | null
  }

  export type CartItemSumAggregateOutputType = {
    id: number | null
    cartId: number | null
    productVariantId: number | null
    productId: number | null
    sizeId: number | null
    quantity: number | null
  }

  export type CartItemMinAggregateOutputType = {
    id: number | null
    cartId: number | null
    productVariantId: number | null
    productId: number | null
    sizeId: number | null
    quantity: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CartItemMaxAggregateOutputType = {
    id: number | null
    cartId: number | null
    productVariantId: number | null
    productId: number | null
    sizeId: number | null
    quantity: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CartItemCountAggregateOutputType = {
    id: number
    cartId: number
    productVariantId: number
    productId: number
    sizeId: number
    quantity: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CartItemAvgAggregateInputType = {
    id?: true
    cartId?: true
    productVariantId?: true
    productId?: true
    sizeId?: true
    quantity?: true
  }

  export type CartItemSumAggregateInputType = {
    id?: true
    cartId?: true
    productVariantId?: true
    productId?: true
    sizeId?: true
    quantity?: true
  }

  export type CartItemMinAggregateInputType = {
    id?: true
    cartId?: true
    productVariantId?: true
    productId?: true
    sizeId?: true
    quantity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CartItemMaxAggregateInputType = {
    id?: true
    cartId?: true
    productVariantId?: true
    productId?: true
    sizeId?: true
    quantity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CartItemCountAggregateInputType = {
    id?: true
    cartId?: true
    productVariantId?: true
    productId?: true
    sizeId?: true
    quantity?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CartItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CartItem to aggregate.
     */
    where?: CartItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartItems to fetch.
     */
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CartItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CartItems
    **/
    _count?: true | CartItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CartItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CartItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CartItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CartItemMaxAggregateInputType
  }

  export type GetCartItemAggregateType<T extends CartItemAggregateArgs> = {
        [P in keyof T & keyof AggregateCartItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCartItem[P]>
      : GetScalarType<T[P], AggregateCartItem[P]>
  }




  export type CartItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartItemWhereInput
    orderBy?: CartItemOrderByWithAggregationInput | CartItemOrderByWithAggregationInput[]
    by: CartItemScalarFieldEnum[] | CartItemScalarFieldEnum
    having?: CartItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CartItemCountAggregateInputType | true
    _avg?: CartItemAvgAggregateInputType
    _sum?: CartItemSumAggregateInputType
    _min?: CartItemMinAggregateInputType
    _max?: CartItemMaxAggregateInputType
  }

  export type CartItemGroupByOutputType = {
    id: number
    cartId: number
    productVariantId: number | null
    productId: number
    sizeId: number | null
    quantity: number
    createdAt: Date
    updatedAt: Date
    _count: CartItemCountAggregateOutputType | null
    _avg: CartItemAvgAggregateOutputType | null
    _sum: CartItemSumAggregateOutputType | null
    _min: CartItemMinAggregateOutputType | null
    _max: CartItemMaxAggregateOutputType | null
  }

  type GetCartItemGroupByPayload<T extends CartItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CartItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CartItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CartItemGroupByOutputType[P]>
            : GetScalarType<T[P], CartItemGroupByOutputType[P]>
        }
      >
    >


  export type CartItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cartId?: boolean
    productVariantId?: boolean
    productId?: boolean
    sizeId?: boolean
    quantity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    cart?: boolean | CartDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    productVariant?: boolean | CartItem$productVariantArgs<ExtArgs>
    size?: boolean | CartItem$sizeArgs<ExtArgs>
    ingredients?: boolean | CartItem$ingredientsArgs<ExtArgs>
    cartSubProduct?: boolean | CartItem$cartSubProductArgs<ExtArgs>
    _count?: boolean | CartItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cartItem"]>

  export type CartItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cartId?: boolean
    productVariantId?: boolean
    productId?: boolean
    sizeId?: boolean
    quantity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    cart?: boolean | CartDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    productVariant?: boolean | CartItem$productVariantArgs<ExtArgs>
    size?: boolean | CartItem$sizeArgs<ExtArgs>
  }, ExtArgs["result"]["cartItem"]>

  export type CartItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cartId?: boolean
    productVariantId?: boolean
    productId?: boolean
    sizeId?: boolean
    quantity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    cart?: boolean | CartDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    productVariant?: boolean | CartItem$productVariantArgs<ExtArgs>
    size?: boolean | CartItem$sizeArgs<ExtArgs>
  }, ExtArgs["result"]["cartItem"]>

  export type CartItemSelectScalar = {
    id?: boolean
    cartId?: boolean
    productVariantId?: boolean
    productId?: boolean
    sizeId?: boolean
    quantity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CartItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cartId" | "productVariantId" | "productId" | "sizeId" | "quantity" | "createdAt" | "updatedAt", ExtArgs["result"]["cartItem"]>
  export type CartItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cart?: boolean | CartDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    productVariant?: boolean | CartItem$productVariantArgs<ExtArgs>
    size?: boolean | CartItem$sizeArgs<ExtArgs>
    ingredients?: boolean | CartItem$ingredientsArgs<ExtArgs>
    cartSubProduct?: boolean | CartItem$cartSubProductArgs<ExtArgs>
    _count?: boolean | CartItemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CartItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cart?: boolean | CartDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    productVariant?: boolean | CartItem$productVariantArgs<ExtArgs>
    size?: boolean | CartItem$sizeArgs<ExtArgs>
  }
  export type CartItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cart?: boolean | CartDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
    productVariant?: boolean | CartItem$productVariantArgs<ExtArgs>
    size?: boolean | CartItem$sizeArgs<ExtArgs>
  }

  export type $CartItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CartItem"
    objects: {
      cart: Prisma.$CartPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
      productVariant: Prisma.$ProductVariantPayload<ExtArgs> | null
      size: Prisma.$SizesPayload<ExtArgs> | null
      ingredients: Prisma.$IngredientPayload<ExtArgs>[]
      cartSubProduct: Prisma.$CartSubProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      cartId: number
      productVariantId: number | null
      productId: number
      sizeId: number | null
      quantity: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["cartItem"]>
    composites: {}
  }

  type CartItemGetPayload<S extends boolean | null | undefined | CartItemDefaultArgs> = $Result.GetResult<Prisma.$CartItemPayload, S>

  type CartItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CartItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CartItemCountAggregateInputType | true
    }

  export interface CartItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CartItem'], meta: { name: 'CartItem' } }
    /**
     * Find zero or one CartItem that matches the filter.
     * @param {CartItemFindUniqueArgs} args - Arguments to find a CartItem
     * @example
     * // Get one CartItem
     * const cartItem = await prisma.cartItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CartItemFindUniqueArgs>(args: SelectSubset<T, CartItemFindUniqueArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one CartItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CartItemFindUniqueOrThrowArgs} args - Arguments to find a CartItem
     * @example
     * // Get one CartItem
     * const cartItem = await prisma.cartItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CartItemFindUniqueOrThrowArgs>(args: SelectSubset<T, CartItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first CartItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemFindFirstArgs} args - Arguments to find a CartItem
     * @example
     * // Get one CartItem
     * const cartItem = await prisma.cartItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CartItemFindFirstArgs>(args?: SelectSubset<T, CartItemFindFirstArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first CartItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemFindFirstOrThrowArgs} args - Arguments to find a CartItem
     * @example
     * // Get one CartItem
     * const cartItem = await prisma.cartItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CartItemFindFirstOrThrowArgs>(args?: SelectSubset<T, CartItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more CartItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CartItems
     * const cartItems = await prisma.cartItem.findMany()
     * 
     * // Get first 10 CartItems
     * const cartItems = await prisma.cartItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cartItemWithIdOnly = await prisma.cartItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CartItemFindManyArgs>(args?: SelectSubset<T, CartItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a CartItem.
     * @param {CartItemCreateArgs} args - Arguments to create a CartItem.
     * @example
     * // Create one CartItem
     * const CartItem = await prisma.cartItem.create({
     *   data: {
     *     // ... data to create a CartItem
     *   }
     * })
     * 
     */
    create<T extends CartItemCreateArgs>(args: SelectSubset<T, CartItemCreateArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many CartItems.
     * @param {CartItemCreateManyArgs} args - Arguments to create many CartItems.
     * @example
     * // Create many CartItems
     * const cartItem = await prisma.cartItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CartItemCreateManyArgs>(args?: SelectSubset<T, CartItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CartItems and returns the data saved in the database.
     * @param {CartItemCreateManyAndReturnArgs} args - Arguments to create many CartItems.
     * @example
     * // Create many CartItems
     * const cartItem = await prisma.cartItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CartItems and only return the `id`
     * const cartItemWithIdOnly = await prisma.cartItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CartItemCreateManyAndReturnArgs>(args?: SelectSubset<T, CartItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a CartItem.
     * @param {CartItemDeleteArgs} args - Arguments to delete one CartItem.
     * @example
     * // Delete one CartItem
     * const CartItem = await prisma.cartItem.delete({
     *   where: {
     *     // ... filter to delete one CartItem
     *   }
     * })
     * 
     */
    delete<T extends CartItemDeleteArgs>(args: SelectSubset<T, CartItemDeleteArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one CartItem.
     * @param {CartItemUpdateArgs} args - Arguments to update one CartItem.
     * @example
     * // Update one CartItem
     * const cartItem = await prisma.cartItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CartItemUpdateArgs>(args: SelectSubset<T, CartItemUpdateArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more CartItems.
     * @param {CartItemDeleteManyArgs} args - Arguments to filter CartItems to delete.
     * @example
     * // Delete a few CartItems
     * const { count } = await prisma.cartItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CartItemDeleteManyArgs>(args?: SelectSubset<T, CartItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CartItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CartItems
     * const cartItem = await prisma.cartItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CartItemUpdateManyArgs>(args: SelectSubset<T, CartItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CartItems and returns the data updated in the database.
     * @param {CartItemUpdateManyAndReturnArgs} args - Arguments to update many CartItems.
     * @example
     * // Update many CartItems
     * const cartItem = await prisma.cartItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CartItems and only return the `id`
     * const cartItemWithIdOnly = await prisma.cartItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CartItemUpdateManyAndReturnArgs>(args: SelectSubset<T, CartItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one CartItem.
     * @param {CartItemUpsertArgs} args - Arguments to update or create a CartItem.
     * @example
     * // Update or create a CartItem
     * const cartItem = await prisma.cartItem.upsert({
     *   create: {
     *     // ... data to create a CartItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CartItem we want to update
     *   }
     * })
     */
    upsert<T extends CartItemUpsertArgs>(args: SelectSubset<T, CartItemUpsertArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of CartItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemCountArgs} args - Arguments to filter CartItems to count.
     * @example
     * // Count the number of CartItems
     * const count = await prisma.cartItem.count({
     *   where: {
     *     // ... the filter for the CartItems we want to count
     *   }
     * })
    **/
    count<T extends CartItemCountArgs>(
      args?: Subset<T, CartItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CartItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CartItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CartItemAggregateArgs>(args: Subset<T, CartItemAggregateArgs>): Prisma.PrismaPromise<GetCartItemAggregateType<T>>

    /**
     * Group by CartItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CartItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CartItemGroupByArgs['orderBy'] }
        : { orderBy?: CartItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CartItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCartItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CartItem model
   */
  readonly fields: CartItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CartItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CartItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cart<T extends CartDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CartDefaultArgs<ExtArgs>>): Prisma__CartClient<$Result.GetResult<Prisma.$CartPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    productVariant<T extends CartItem$productVariantArgs<ExtArgs> = {}>(args?: Subset<T, CartItem$productVariantArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    size<T extends CartItem$sizeArgs<ExtArgs> = {}>(args?: Subset<T, CartItem$sizeArgs<ExtArgs>>): Prisma__SizesClient<$Result.GetResult<Prisma.$SizesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | null, null, ExtArgs, ClientOptions>
    ingredients<T extends CartItem$ingredientsArgs<ExtArgs> = {}>(args?: Subset<T, CartItem$ingredientsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IngredientPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    cartSubProduct<T extends CartItem$cartSubProductArgs<ExtArgs> = {}>(args?: Subset<T, CartItem$cartSubProductArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartSubProductPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CartItem model
   */ 
  interface CartItemFieldRefs {
    readonly id: FieldRef<"CartItem", 'Int'>
    readonly cartId: FieldRef<"CartItem", 'Int'>
    readonly productVariantId: FieldRef<"CartItem", 'Int'>
    readonly productId: FieldRef<"CartItem", 'Int'>
    readonly sizeId: FieldRef<"CartItem", 'Int'>
    readonly quantity: FieldRef<"CartItem", 'Int'>
    readonly createdAt: FieldRef<"CartItem", 'DateTime'>
    readonly updatedAt: FieldRef<"CartItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CartItem findUnique
   */
  export type CartItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter, which CartItem to fetch.
     */
    where: CartItemWhereUniqueInput
  }

  /**
   * CartItem findUniqueOrThrow
   */
  export type CartItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter, which CartItem to fetch.
     */
    where: CartItemWhereUniqueInput
  }

  /**
   * CartItem findFirst
   */
  export type CartItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter, which CartItem to fetch.
     */
    where?: CartItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartItems to fetch.
     */
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CartItems.
     */
    cursor?: CartItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CartItems.
     */
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * CartItem findFirstOrThrow
   */
  export type CartItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter, which CartItem to fetch.
     */
    where?: CartItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartItems to fetch.
     */
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CartItems.
     */
    cursor?: CartItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CartItems.
     */
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * CartItem findMany
   */
  export type CartItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter, which CartItems to fetch.
     */
    where?: CartItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartItems to fetch.
     */
    orderBy?: CartItemOrderByWithRelationInput | CartItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CartItems.
     */
    cursor?: CartItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartItems.
     */
    skip?: number
    distinct?: CartItemScalarFieldEnum | CartItemScalarFieldEnum[]
  }

  /**
   * CartItem create
   */
  export type CartItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * The data needed to create a CartItem.
     */
    data: XOR<CartItemCreateInput, CartItemUncheckedCreateInput>
  }

  /**
   * CartItem createMany
   */
  export type CartItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CartItems.
     */
    data: CartItemCreateManyInput | CartItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CartItem createManyAndReturn
   */
  export type CartItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * The data used to create many CartItems.
     */
    data: CartItemCreateManyInput | CartItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CartItem update
   */
  export type CartItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * The data needed to update a CartItem.
     */
    data: XOR<CartItemUpdateInput, CartItemUncheckedUpdateInput>
    /**
     * Choose, which CartItem to update.
     */
    where: CartItemWhereUniqueInput
  }

  /**
   * CartItem updateMany
   */
  export type CartItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CartItems.
     */
    data: XOR<CartItemUpdateManyMutationInput, CartItemUncheckedUpdateManyInput>
    /**
     * Filter which CartItems to update
     */
    where?: CartItemWhereInput
    /**
     * Limit how many CartItems to update.
     */
    limit?: number
  }

  /**
   * CartItem updateManyAndReturn
   */
  export type CartItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * The data used to update CartItems.
     */
    data: XOR<CartItemUpdateManyMutationInput, CartItemUncheckedUpdateManyInput>
    /**
     * Filter which CartItems to update
     */
    where?: CartItemWhereInput
    /**
     * Limit how many CartItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CartItem upsert
   */
  export type CartItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * The filter to search for the CartItem to update in case it exists.
     */
    where: CartItemWhereUniqueInput
    /**
     * In case the CartItem found by the `where` argument doesn't exist, create a new CartItem with this data.
     */
    create: XOR<CartItemCreateInput, CartItemUncheckedCreateInput>
    /**
     * In case the CartItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CartItemUpdateInput, CartItemUncheckedUpdateInput>
  }

  /**
   * CartItem delete
   */
  export type CartItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
    /**
     * Filter which CartItem to delete.
     */
    where: CartItemWhereUniqueInput
  }

  /**
   * CartItem deleteMany
   */
  export type CartItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CartItems to delete
     */
    where?: CartItemWhereInput
    /**
     * Limit how many CartItems to delete.
     */
    limit?: number
  }

  /**
   * CartItem.productVariant
   */
  export type CartItem$productVariantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductVariant
     */
    select?: ProductVariantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductVariant
     */
    omit?: ProductVariantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductVariantInclude<ExtArgs> | null
    where?: ProductVariantWhereInput
  }

  /**
   * CartItem.size
   */
  export type CartItem$sizeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sizes
     */
    select?: SizesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sizes
     */
    omit?: SizesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SizesInclude<ExtArgs> | null
    where?: SizesWhereInput
  }

  /**
   * CartItem.ingredients
   */
  export type CartItem$ingredientsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ingredient
     */
    select?: IngredientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Ingredient
     */
    omit?: IngredientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IngredientInclude<ExtArgs> | null
    where?: IngredientWhereInput
    orderBy?: IngredientOrderByWithRelationInput | IngredientOrderByWithRelationInput[]
    cursor?: IngredientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IngredientScalarFieldEnum | IngredientScalarFieldEnum[]
  }

  /**
   * CartItem.cartSubProduct
   */
  export type CartItem$cartSubProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartSubProduct
     */
    select?: CartSubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartSubProduct
     */
    omit?: CartSubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartSubProductInclude<ExtArgs> | null
    where?: CartSubProductWhereInput
    orderBy?: CartSubProductOrderByWithRelationInput | CartSubProductOrderByWithRelationInput[]
    cursor?: CartSubProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CartSubProductScalarFieldEnum | CartSubProductScalarFieldEnum[]
  }

  /**
   * CartItem without action
   */
  export type CartItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartItem
     */
    select?: CartItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartItem
     */
    omit?: CartItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartItemInclude<ExtArgs> | null
  }


  /**
   * Model CartSubProduct
   */

  export type AggregateCartSubProduct = {
    _count: CartSubProductCountAggregateOutputType | null
    _avg: CartSubProductAvgAggregateOutputType | null
    _sum: CartSubProductSumAggregateOutputType | null
    _min: CartSubProductMinAggregateOutputType | null
    _max: CartSubProductMaxAggregateOutputType | null
  }

  export type CartSubProductAvgAggregateOutputType = {
    id: number | null
    subProductId: number | null
    sizeId: number | null
    variantId: number | null
    cartItemId: number | null
    index: number | null
  }

  export type CartSubProductSumAggregateOutputType = {
    id: number | null
    subProductId: number | null
    sizeId: number | null
    variantId: number | null
    cartItemId: number | null
    index: number | null
  }

  export type CartSubProductMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    subProductId: number | null
    sizeId: number | null
    variantId: number | null
    cartItemId: number | null
    index: number | null
  }

  export type CartSubProductMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    updatedAt: Date | null
    subProductId: number | null
    sizeId: number | null
    variantId: number | null
    cartItemId: number | null
    index: number | null
  }

  export type CartSubProductCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    subProductId: number
    sizeId: number
    variantId: number
    cartItemId: number
    index: number
    _all: number
  }


  export type CartSubProductAvgAggregateInputType = {
    id?: true
    subProductId?: true
    sizeId?: true
    variantId?: true
    cartItemId?: true
    index?: true
  }

  export type CartSubProductSumAggregateInputType = {
    id?: true
    subProductId?: true
    sizeId?: true
    variantId?: true
    cartItemId?: true
    index?: true
  }

  export type CartSubProductMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    subProductId?: true
    sizeId?: true
    variantId?: true
    cartItemId?: true
    index?: true
  }

  export type CartSubProductMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    subProductId?: true
    sizeId?: true
    variantId?: true
    cartItemId?: true
    index?: true
  }

  export type CartSubProductCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    subProductId?: true
    sizeId?: true
    variantId?: true
    cartItemId?: true
    index?: true
    _all?: true
  }

  export type CartSubProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CartSubProduct to aggregate.
     */
    where?: CartSubProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartSubProducts to fetch.
     */
    orderBy?: CartSubProductOrderByWithRelationInput | CartSubProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CartSubProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartSubProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartSubProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CartSubProducts
    **/
    _count?: true | CartSubProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CartSubProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CartSubProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CartSubProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CartSubProductMaxAggregateInputType
  }

  export type GetCartSubProductAggregateType<T extends CartSubProductAggregateArgs> = {
        [P in keyof T & keyof AggregateCartSubProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCartSubProduct[P]>
      : GetScalarType<T[P], AggregateCartSubProduct[P]>
  }




  export type CartSubProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CartSubProductWhereInput
    orderBy?: CartSubProductOrderByWithAggregationInput | CartSubProductOrderByWithAggregationInput[]
    by: CartSubProductScalarFieldEnum[] | CartSubProductScalarFieldEnum
    having?: CartSubProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CartSubProductCountAggregateInputType | true
    _avg?: CartSubProductAvgAggregateInputType
    _sum?: CartSubProductSumAggregateInputType
    _min?: CartSubProductMinAggregateInputType
    _max?: CartSubProductMaxAggregateInputType
  }

  export type CartSubProductGroupByOutputType = {
    id: number
    createdAt: Date
    updatedAt: Date
    subProductId: number
    sizeId: number
    variantId: number
    cartItemId: number
    index: number
    _count: CartSubProductCountAggregateOutputType | null
    _avg: CartSubProductAvgAggregateOutputType | null
    _sum: CartSubProductSumAggregateOutputType | null
    _min: CartSubProductMinAggregateOutputType | null
    _max: CartSubProductMaxAggregateOutputType | null
  }

  type GetCartSubProductGroupByPayload<T extends CartSubProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CartSubProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CartSubProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CartSubProductGroupByOutputType[P]>
            : GetScalarType<T[P], CartSubProductGroupByOutputType[P]>
        }
      >
    >


  export type CartSubProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subProductId?: boolean
    sizeId?: boolean
    variantId?: boolean
    cartItemId?: boolean
    index?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    variant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    size?: boolean | SizesDefaultArgs<ExtArgs>
    cartItem?: boolean | CartItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cartSubProduct"]>

  export type CartSubProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subProductId?: boolean
    sizeId?: boolean
    variantId?: boolean
    cartItemId?: boolean
    index?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    variant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    size?: boolean | SizesDefaultArgs<ExtArgs>
    cartItem?: boolean | CartItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cartSubProduct"]>

  export type CartSubProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subProductId?: boolean
    sizeId?: boolean
    variantId?: boolean
    cartItemId?: boolean
    index?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    variant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    size?: boolean | SizesDefaultArgs<ExtArgs>
    cartItem?: boolean | CartItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cartSubProduct"]>

  export type CartSubProductSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subProductId?: boolean
    sizeId?: boolean
    variantId?: boolean
    cartItemId?: boolean
    index?: boolean
  }

  export type CartSubProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "subProductId" | "sizeId" | "variantId" | "cartItemId" | "index", ExtArgs["result"]["cartSubProduct"]>
  export type CartSubProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    variant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    size?: boolean | SizesDefaultArgs<ExtArgs>
    cartItem?: boolean | CartItemDefaultArgs<ExtArgs>
  }
  export type CartSubProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    variant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    size?: boolean | SizesDefaultArgs<ExtArgs>
    cartItem?: boolean | CartItemDefaultArgs<ExtArgs>
  }
  export type CartSubProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    variant?: boolean | ProductVariantDefaultArgs<ExtArgs>
    size?: boolean | SizesDefaultArgs<ExtArgs>
    cartItem?: boolean | CartItemDefaultArgs<ExtArgs>
  }

  export type $CartSubProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CartSubProduct"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
      variant: Prisma.$ProductVariantPayload<ExtArgs>
      size: Prisma.$SizesPayload<ExtArgs>
      cartItem: Prisma.$CartItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      updatedAt: Date
      subProductId: number
      sizeId: number
      variantId: number
      cartItemId: number
      index: number
    }, ExtArgs["result"]["cartSubProduct"]>
    composites: {}
  }

  type CartSubProductGetPayload<S extends boolean | null | undefined | CartSubProductDefaultArgs> = $Result.GetResult<Prisma.$CartSubProductPayload, S>

  type CartSubProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CartSubProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CartSubProductCountAggregateInputType | true
    }

  export interface CartSubProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CartSubProduct'], meta: { name: 'CartSubProduct' } }
    /**
     * Find zero or one CartSubProduct that matches the filter.
     * @param {CartSubProductFindUniqueArgs} args - Arguments to find a CartSubProduct
     * @example
     * // Get one CartSubProduct
     * const cartSubProduct = await prisma.cartSubProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CartSubProductFindUniqueArgs>(args: SelectSubset<T, CartSubProductFindUniqueArgs<ExtArgs>>): Prisma__CartSubProductClient<$Result.GetResult<Prisma.$CartSubProductPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one CartSubProduct that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CartSubProductFindUniqueOrThrowArgs} args - Arguments to find a CartSubProduct
     * @example
     * // Get one CartSubProduct
     * const cartSubProduct = await prisma.cartSubProduct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CartSubProductFindUniqueOrThrowArgs>(args: SelectSubset<T, CartSubProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CartSubProductClient<$Result.GetResult<Prisma.$CartSubProductPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first CartSubProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartSubProductFindFirstArgs} args - Arguments to find a CartSubProduct
     * @example
     * // Get one CartSubProduct
     * const cartSubProduct = await prisma.cartSubProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CartSubProductFindFirstArgs>(args?: SelectSubset<T, CartSubProductFindFirstArgs<ExtArgs>>): Prisma__CartSubProductClient<$Result.GetResult<Prisma.$CartSubProductPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first CartSubProduct that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartSubProductFindFirstOrThrowArgs} args - Arguments to find a CartSubProduct
     * @example
     * // Get one CartSubProduct
     * const cartSubProduct = await prisma.cartSubProduct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CartSubProductFindFirstOrThrowArgs>(args?: SelectSubset<T, CartSubProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__CartSubProductClient<$Result.GetResult<Prisma.$CartSubProductPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more CartSubProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartSubProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CartSubProducts
     * const cartSubProducts = await prisma.cartSubProduct.findMany()
     * 
     * // Get first 10 CartSubProducts
     * const cartSubProducts = await prisma.cartSubProduct.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cartSubProductWithIdOnly = await prisma.cartSubProduct.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CartSubProductFindManyArgs>(args?: SelectSubset<T, CartSubProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartSubProductPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a CartSubProduct.
     * @param {CartSubProductCreateArgs} args - Arguments to create a CartSubProduct.
     * @example
     * // Create one CartSubProduct
     * const CartSubProduct = await prisma.cartSubProduct.create({
     *   data: {
     *     // ... data to create a CartSubProduct
     *   }
     * })
     * 
     */
    create<T extends CartSubProductCreateArgs>(args: SelectSubset<T, CartSubProductCreateArgs<ExtArgs>>): Prisma__CartSubProductClient<$Result.GetResult<Prisma.$CartSubProductPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many CartSubProducts.
     * @param {CartSubProductCreateManyArgs} args - Arguments to create many CartSubProducts.
     * @example
     * // Create many CartSubProducts
     * const cartSubProduct = await prisma.cartSubProduct.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CartSubProductCreateManyArgs>(args?: SelectSubset<T, CartSubProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CartSubProducts and returns the data saved in the database.
     * @param {CartSubProductCreateManyAndReturnArgs} args - Arguments to create many CartSubProducts.
     * @example
     * // Create many CartSubProducts
     * const cartSubProduct = await prisma.cartSubProduct.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CartSubProducts and only return the `id`
     * const cartSubProductWithIdOnly = await prisma.cartSubProduct.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CartSubProductCreateManyAndReturnArgs>(args?: SelectSubset<T, CartSubProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartSubProductPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a CartSubProduct.
     * @param {CartSubProductDeleteArgs} args - Arguments to delete one CartSubProduct.
     * @example
     * // Delete one CartSubProduct
     * const CartSubProduct = await prisma.cartSubProduct.delete({
     *   where: {
     *     // ... filter to delete one CartSubProduct
     *   }
     * })
     * 
     */
    delete<T extends CartSubProductDeleteArgs>(args: SelectSubset<T, CartSubProductDeleteArgs<ExtArgs>>): Prisma__CartSubProductClient<$Result.GetResult<Prisma.$CartSubProductPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one CartSubProduct.
     * @param {CartSubProductUpdateArgs} args - Arguments to update one CartSubProduct.
     * @example
     * // Update one CartSubProduct
     * const cartSubProduct = await prisma.cartSubProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CartSubProductUpdateArgs>(args: SelectSubset<T, CartSubProductUpdateArgs<ExtArgs>>): Prisma__CartSubProductClient<$Result.GetResult<Prisma.$CartSubProductPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more CartSubProducts.
     * @param {CartSubProductDeleteManyArgs} args - Arguments to filter CartSubProducts to delete.
     * @example
     * // Delete a few CartSubProducts
     * const { count } = await prisma.cartSubProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CartSubProductDeleteManyArgs>(args?: SelectSubset<T, CartSubProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CartSubProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartSubProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CartSubProducts
     * const cartSubProduct = await prisma.cartSubProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CartSubProductUpdateManyArgs>(args: SelectSubset<T, CartSubProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CartSubProducts and returns the data updated in the database.
     * @param {CartSubProductUpdateManyAndReturnArgs} args - Arguments to update many CartSubProducts.
     * @example
     * // Update many CartSubProducts
     * const cartSubProduct = await prisma.cartSubProduct.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CartSubProducts and only return the `id`
     * const cartSubProductWithIdOnly = await prisma.cartSubProduct.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CartSubProductUpdateManyAndReturnArgs>(args: SelectSubset<T, CartSubProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CartSubProductPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one CartSubProduct.
     * @param {CartSubProductUpsertArgs} args - Arguments to update or create a CartSubProduct.
     * @example
     * // Update or create a CartSubProduct
     * const cartSubProduct = await prisma.cartSubProduct.upsert({
     *   create: {
     *     // ... data to create a CartSubProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CartSubProduct we want to update
     *   }
     * })
     */
    upsert<T extends CartSubProductUpsertArgs>(args: SelectSubset<T, CartSubProductUpsertArgs<ExtArgs>>): Prisma__CartSubProductClient<$Result.GetResult<Prisma.$CartSubProductPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of CartSubProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartSubProductCountArgs} args - Arguments to filter CartSubProducts to count.
     * @example
     * // Count the number of CartSubProducts
     * const count = await prisma.cartSubProduct.count({
     *   where: {
     *     // ... the filter for the CartSubProducts we want to count
     *   }
     * })
    **/
    count<T extends CartSubProductCountArgs>(
      args?: Subset<T, CartSubProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CartSubProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CartSubProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartSubProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CartSubProductAggregateArgs>(args: Subset<T, CartSubProductAggregateArgs>): Prisma.PrismaPromise<GetCartSubProductAggregateType<T>>

    /**
     * Group by CartSubProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CartSubProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CartSubProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CartSubProductGroupByArgs['orderBy'] }
        : { orderBy?: CartSubProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CartSubProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCartSubProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CartSubProduct model
   */
  readonly fields: CartSubProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CartSubProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CartSubProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    variant<T extends ProductVariantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductVariantDefaultArgs<ExtArgs>>): Prisma__ProductVariantClient<$Result.GetResult<Prisma.$ProductVariantPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    size<T extends SizesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SizesDefaultArgs<ExtArgs>>): Prisma__SizesClient<$Result.GetResult<Prisma.$SizesPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    cartItem<T extends CartItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CartItemDefaultArgs<ExtArgs>>): Prisma__CartItemClient<$Result.GetResult<Prisma.$CartItemPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CartSubProduct model
   */ 
  interface CartSubProductFieldRefs {
    readonly id: FieldRef<"CartSubProduct", 'Int'>
    readonly createdAt: FieldRef<"CartSubProduct", 'DateTime'>
    readonly updatedAt: FieldRef<"CartSubProduct", 'DateTime'>
    readonly subProductId: FieldRef<"CartSubProduct", 'Int'>
    readonly sizeId: FieldRef<"CartSubProduct", 'Int'>
    readonly variantId: FieldRef<"CartSubProduct", 'Int'>
    readonly cartItemId: FieldRef<"CartSubProduct", 'Int'>
    readonly index: FieldRef<"CartSubProduct", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * CartSubProduct findUnique
   */
  export type CartSubProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartSubProduct
     */
    select?: CartSubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartSubProduct
     */
    omit?: CartSubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartSubProductInclude<ExtArgs> | null
    /**
     * Filter, which CartSubProduct to fetch.
     */
    where: CartSubProductWhereUniqueInput
  }

  /**
   * CartSubProduct findUniqueOrThrow
   */
  export type CartSubProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartSubProduct
     */
    select?: CartSubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartSubProduct
     */
    omit?: CartSubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartSubProductInclude<ExtArgs> | null
    /**
     * Filter, which CartSubProduct to fetch.
     */
    where: CartSubProductWhereUniqueInput
  }

  /**
   * CartSubProduct findFirst
   */
  export type CartSubProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartSubProduct
     */
    select?: CartSubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartSubProduct
     */
    omit?: CartSubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartSubProductInclude<ExtArgs> | null
    /**
     * Filter, which CartSubProduct to fetch.
     */
    where?: CartSubProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartSubProducts to fetch.
     */
    orderBy?: CartSubProductOrderByWithRelationInput | CartSubProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CartSubProducts.
     */
    cursor?: CartSubProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartSubProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartSubProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CartSubProducts.
     */
    distinct?: CartSubProductScalarFieldEnum | CartSubProductScalarFieldEnum[]
  }

  /**
   * CartSubProduct findFirstOrThrow
   */
  export type CartSubProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartSubProduct
     */
    select?: CartSubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartSubProduct
     */
    omit?: CartSubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartSubProductInclude<ExtArgs> | null
    /**
     * Filter, which CartSubProduct to fetch.
     */
    where?: CartSubProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartSubProducts to fetch.
     */
    orderBy?: CartSubProductOrderByWithRelationInput | CartSubProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CartSubProducts.
     */
    cursor?: CartSubProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartSubProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartSubProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CartSubProducts.
     */
    distinct?: CartSubProductScalarFieldEnum | CartSubProductScalarFieldEnum[]
  }

  /**
   * CartSubProduct findMany
   */
  export type CartSubProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartSubProduct
     */
    select?: CartSubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartSubProduct
     */
    omit?: CartSubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartSubProductInclude<ExtArgs> | null
    /**
     * Filter, which CartSubProducts to fetch.
     */
    where?: CartSubProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CartSubProducts to fetch.
     */
    orderBy?: CartSubProductOrderByWithRelationInput | CartSubProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CartSubProducts.
     */
    cursor?: CartSubProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CartSubProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CartSubProducts.
     */
    skip?: number
    distinct?: CartSubProductScalarFieldEnum | CartSubProductScalarFieldEnum[]
  }

  /**
   * CartSubProduct create
   */
  export type CartSubProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartSubProduct
     */
    select?: CartSubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartSubProduct
     */
    omit?: CartSubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartSubProductInclude<ExtArgs> | null
    /**
     * The data needed to create a CartSubProduct.
     */
    data: XOR<CartSubProductCreateInput, CartSubProductUncheckedCreateInput>
  }

  /**
   * CartSubProduct createMany
   */
  export type CartSubProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CartSubProducts.
     */
    data: CartSubProductCreateManyInput | CartSubProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CartSubProduct createManyAndReturn
   */
  export type CartSubProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartSubProduct
     */
    select?: CartSubProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CartSubProduct
     */
    omit?: CartSubProductOmit<ExtArgs> | null
    /**
     * The data used to create many CartSubProducts.
     */
    data: CartSubProductCreateManyInput | CartSubProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartSubProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CartSubProduct update
   */
  export type CartSubProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartSubProduct
     */
    select?: CartSubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartSubProduct
     */
    omit?: CartSubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartSubProductInclude<ExtArgs> | null
    /**
     * The data needed to update a CartSubProduct.
     */
    data: XOR<CartSubProductUpdateInput, CartSubProductUncheckedUpdateInput>
    /**
     * Choose, which CartSubProduct to update.
     */
    where: CartSubProductWhereUniqueInput
  }

  /**
   * CartSubProduct updateMany
   */
  export type CartSubProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CartSubProducts.
     */
    data: XOR<CartSubProductUpdateManyMutationInput, CartSubProductUncheckedUpdateManyInput>
    /**
     * Filter which CartSubProducts to update
     */
    where?: CartSubProductWhereInput
    /**
     * Limit how many CartSubProducts to update.
     */
    limit?: number
  }

  /**
   * CartSubProduct updateManyAndReturn
   */
  export type CartSubProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartSubProduct
     */
    select?: CartSubProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CartSubProduct
     */
    omit?: CartSubProductOmit<ExtArgs> | null
    /**
     * The data used to update CartSubProducts.
     */
    data: XOR<CartSubProductUpdateManyMutationInput, CartSubProductUncheckedUpdateManyInput>
    /**
     * Filter which CartSubProducts to update
     */
    where?: CartSubProductWhereInput
    /**
     * Limit how many CartSubProducts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartSubProductIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CartSubProduct upsert
   */
  export type CartSubProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartSubProduct
     */
    select?: CartSubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartSubProduct
     */
    omit?: CartSubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartSubProductInclude<ExtArgs> | null
    /**
     * The filter to search for the CartSubProduct to update in case it exists.
     */
    where: CartSubProductWhereUniqueInput
    /**
     * In case the CartSubProduct found by the `where` argument doesn't exist, create a new CartSubProduct with this data.
     */
    create: XOR<CartSubProductCreateInput, CartSubProductUncheckedCreateInput>
    /**
     * In case the CartSubProduct was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CartSubProductUpdateInput, CartSubProductUncheckedUpdateInput>
  }

  /**
   * CartSubProduct delete
   */
  export type CartSubProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartSubProduct
     */
    select?: CartSubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartSubProduct
     */
    omit?: CartSubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartSubProductInclude<ExtArgs> | null
    /**
     * Filter which CartSubProduct to delete.
     */
    where: CartSubProductWhereUniqueInput
  }

  /**
   * CartSubProduct deleteMany
   */
  export type CartSubProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CartSubProducts to delete
     */
    where?: CartSubProductWhereInput
    /**
     * Limit how many CartSubProducts to delete.
     */
    limit?: number
  }

  /**
   * CartSubProduct without action
   */
  export type CartSubProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CartSubProduct
     */
    select?: CartSubProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CartSubProduct
     */
    omit?: CartSubProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CartSubProductInclude<ExtArgs> | null
  }


  /**
   * Model Order
   */

  export type AggregateOrder = {
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  export type OrderAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    totalAmount: number | null
  }

  export type OrderSumAggregateOutputType = {
    id: number | null
    userId: number | null
    totalAmount: number | null
  }

  export type OrderMinAggregateOutputType = {
    id: number | null
    userId: number | null
    totalAmount: number | null
    status: $Enums.OrderStatus | null
    paymentId: string | null
    email: string | null
    phone: string | null
    address: string | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
    firstName: string | null
  }

  export type OrderMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    totalAmount: number | null
    status: $Enums.OrderStatus | null
    paymentId: string | null
    email: string | null
    phone: string | null
    address: string | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
    firstName: string | null
  }

  export type OrderCountAggregateOutputType = {
    id: number
    userId: number
    totalAmount: number
    status: number
    paymentId: number
    email: number
    phone: number
    address: number
    comment: number
    createdAt: number
    updatedAt: number
    firstName: number
    items: number
    _all: number
  }


  export type OrderAvgAggregateInputType = {
    id?: true
    userId?: true
    totalAmount?: true
  }

  export type OrderSumAggregateInputType = {
    id?: true
    userId?: true
    totalAmount?: true
  }

  export type OrderMinAggregateInputType = {
    id?: true
    userId?: true
    totalAmount?: true
    status?: true
    paymentId?: true
    email?: true
    phone?: true
    address?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
    firstName?: true
  }

  export type OrderMaxAggregateInputType = {
    id?: true
    userId?: true
    totalAmount?: true
    status?: true
    paymentId?: true
    email?: true
    phone?: true
    address?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
    firstName?: true
  }

  export type OrderCountAggregateInputType = {
    id?: true
    userId?: true
    totalAmount?: true
    status?: true
    paymentId?: true
    email?: true
    phone?: true
    address?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
    firstName?: true
    items?: true
    _all?: true
  }

  export type OrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Order to aggregate.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Orders
    **/
    _count?: true | OrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrderMaxAggregateInputType
  }

  export type GetOrderAggregateType<T extends OrderAggregateArgs> = {
        [P in keyof T & keyof AggregateOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrder[P]>
      : GetScalarType<T[P], AggregateOrder[P]>
  }




  export type OrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrderWhereInput
    orderBy?: OrderOrderByWithAggregationInput | OrderOrderByWithAggregationInput[]
    by: OrderScalarFieldEnum[] | OrderScalarFieldEnum
    having?: OrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrderCountAggregateInputType | true
    _avg?: OrderAvgAggregateInputType
    _sum?: OrderSumAggregateInputType
    _min?: OrderMinAggregateInputType
    _max?: OrderMaxAggregateInputType
  }

  export type OrderGroupByOutputType = {
    id: number
    userId: number
    totalAmount: number
    status: $Enums.OrderStatus
    paymentId: string | null
    email: string
    phone: string
    address: string
    comment: string | null
    createdAt: Date
    updatedAt: Date
    firstName: string
    items: JsonValue
    _count: OrderCountAggregateOutputType | null
    _avg: OrderAvgAggregateOutputType | null
    _sum: OrderSumAggregateOutputType | null
    _min: OrderMinAggregateOutputType | null
    _max: OrderMaxAggregateOutputType | null
  }

  type GetOrderGroupByPayload<T extends OrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrderGroupByOutputType[P]>
            : GetScalarType<T[P], OrderGroupByOutputType[P]>
        }
      >
    >


  export type OrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    totalAmount?: boolean
    status?: boolean
    paymentId?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    firstName?: boolean
    items?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    totalAmount?: boolean
    status?: boolean
    paymentId?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    firstName?: boolean
    items?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    totalAmount?: boolean
    status?: boolean
    paymentId?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    firstName?: boolean
    items?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["order"]>

  export type OrderSelectScalar = {
    id?: boolean
    userId?: boolean
    totalAmount?: boolean
    status?: boolean
    paymentId?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    firstName?: boolean
    items?: boolean
  }

  export type OrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "totalAmount" | "status" | "paymentId" | "email" | "phone" | "address" | "comment" | "createdAt" | "updatedAt" | "firstName" | "items", ExtArgs["result"]["order"]>
  export type OrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type OrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Order"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      totalAmount: number
      status: $Enums.OrderStatus
      paymentId: string | null
      email: string
      phone: string
      address: string
      comment: string | null
      createdAt: Date
      updatedAt: Date
      firstName: string
      items: Prisma.JsonValue
    }, ExtArgs["result"]["order"]>
    composites: {}
  }

  type OrderGetPayload<S extends boolean | null | undefined | OrderDefaultArgs> = $Result.GetResult<Prisma.$OrderPayload, S>

  type OrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrderCountAggregateInputType | true
    }

  export interface OrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Order'], meta: { name: 'Order' } }
    /**
     * Find zero or one Order that matches the filter.
     * @param {OrderFindUniqueArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrderFindUniqueArgs>(args: SelectSubset<T, OrderFindUniqueArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Order that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrderFindUniqueOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrderFindUniqueOrThrowArgs>(args: SelectSubset<T, OrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Order that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrderFindFirstArgs>(args?: SelectSubset<T, OrderFindFirstArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Order that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindFirstOrThrowArgs} args - Arguments to find a Order
     * @example
     * // Get one Order
     * const order = await prisma.order.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrderFindFirstOrThrowArgs>(args?: SelectSubset<T, OrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.order.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.order.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orderWithIdOnly = await prisma.order.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrderFindManyArgs>(args?: SelectSubset<T, OrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Order.
     * @param {OrderCreateArgs} args - Arguments to create a Order.
     * @example
     * // Create one Order
     * const Order = await prisma.order.create({
     *   data: {
     *     // ... data to create a Order
     *   }
     * })
     * 
     */
    create<T extends OrderCreateArgs>(args: SelectSubset<T, OrderCreateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Orders.
     * @param {OrderCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrderCreateManyArgs>(args?: SelectSubset<T, OrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Orders and returns the data saved in the database.
     * @param {OrderCreateManyAndReturnArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const order = await prisma.order.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrderCreateManyAndReturnArgs>(args?: SelectSubset<T, OrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Order.
     * @param {OrderDeleteArgs} args - Arguments to delete one Order.
     * @example
     * // Delete one Order
     * const Order = await prisma.order.delete({
     *   where: {
     *     // ... filter to delete one Order
     *   }
     * })
     * 
     */
    delete<T extends OrderDeleteArgs>(args: SelectSubset<T, OrderDeleteArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Order.
     * @param {OrderUpdateArgs} args - Arguments to update one Order.
     * @example
     * // Update one Order
     * const order = await prisma.order.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrderUpdateArgs>(args: SelectSubset<T, OrderUpdateArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Orders.
     * @param {OrderDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.order.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrderDeleteManyArgs>(args?: SelectSubset<T, OrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrderUpdateManyArgs>(args: SelectSubset<T, OrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders and returns the data updated in the database.
     * @param {OrderUpdateManyAndReturnArgs} args - Arguments to update many Orders.
     * @example
     * // Update many Orders
     * const order = await prisma.order.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Orders and only return the `id`
     * const orderWithIdOnly = await prisma.order.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrderUpdateManyAndReturnArgs>(args: SelectSubset<T, OrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Order.
     * @param {OrderUpsertArgs} args - Arguments to update or create a Order.
     * @example
     * // Update or create a Order
     * const order = await prisma.order.upsert({
     *   create: {
     *     // ... data to create a Order
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Order we want to update
     *   }
     * })
     */
    upsert<T extends OrderUpsertArgs>(args: SelectSubset<T, OrderUpsertArgs<ExtArgs>>): Prisma__OrderClient<$Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.order.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends OrderCountArgs>(
      args?: Subset<T, OrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrderAggregateArgs>(args: Subset<T, OrderAggregateArgs>): Prisma.PrismaPromise<GetOrderAggregateType<T>>

    /**
     * Group by Order.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrderGroupByArgs['orderBy'] }
        : { orderBy?: OrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Order model
   */
  readonly fields: OrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Order.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Order model
   */ 
  interface OrderFieldRefs {
    readonly id: FieldRef<"Order", 'Int'>
    readonly userId: FieldRef<"Order", 'Int'>
    readonly totalAmount: FieldRef<"Order", 'Int'>
    readonly status: FieldRef<"Order", 'OrderStatus'>
    readonly paymentId: FieldRef<"Order", 'String'>
    readonly email: FieldRef<"Order", 'String'>
    readonly phone: FieldRef<"Order", 'String'>
    readonly address: FieldRef<"Order", 'String'>
    readonly comment: FieldRef<"Order", 'String'>
    readonly createdAt: FieldRef<"Order", 'DateTime'>
    readonly updatedAt: FieldRef<"Order", 'DateTime'>
    readonly firstName: FieldRef<"Order", 'String'>
    readonly items: FieldRef<"Order", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Order findUnique
   */
  export type OrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findUniqueOrThrow
   */
  export type OrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order findFirst
   */
  export type OrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findFirstOrThrow
   */
  export type OrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Order to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Orders.
     */
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order findMany
   */
  export type OrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter, which Orders to fetch.
     */
    where?: OrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Orders to fetch.
     */
    orderBy?: OrderOrderByWithRelationInput | OrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Orders.
     */
    cursor?: OrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Orders.
     */
    skip?: number
    distinct?: OrderScalarFieldEnum | OrderScalarFieldEnum[]
  }

  /**
   * Order create
   */
  export type OrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to create a Order.
     */
    data: XOR<OrderCreateInput, OrderUncheckedCreateInput>
  }

  /**
   * Order createMany
   */
  export type OrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Order createManyAndReturn
   */
  export type OrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to create many Orders.
     */
    data: OrderCreateManyInput | OrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order update
   */
  export type OrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The data needed to update a Order.
     */
    data: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
    /**
     * Choose, which Order to update.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order updateMany
   */
  export type OrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
  }

  /**
   * Order updateManyAndReturn
   */
  export type OrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * The data used to update Orders.
     */
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyInput>
    /**
     * Filter which Orders to update
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Order upsert
   */
  export type OrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * The filter to search for the Order to update in case it exists.
     */
    where: OrderWhereUniqueInput
    /**
     * In case the Order found by the `where` argument doesn't exist, create a new Order with this data.
     */
    create: XOR<OrderCreateInput, OrderUncheckedCreateInput>
    /**
     * In case the Order was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrderUpdateInput, OrderUncheckedUpdateInput>
  }

  /**
   * Order delete
   */
  export type OrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
    /**
     * Filter which Order to delete.
     */
    where: OrderWhereUniqueInput
  }

  /**
   * Order deleteMany
   */
  export type OrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Orders to delete
     */
    where?: OrderWhereInput
    /**
     * Limit how many Orders to delete.
     */
    limit?: number
  }

  /**
   * Order without action
   */
  export type OrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Order
     */
    select?: OrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Order
     */
    omit?: OrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrderInclude<ExtArgs> | null
  }


  /**
   * Model DeliveryAddress
   */

  export type AggregateDeliveryAddress = {
    _count: DeliveryAddressCountAggregateOutputType | null
    _avg: DeliveryAddressAvgAggregateOutputType | null
    _sum: DeliveryAddressSumAggregateOutputType | null
    _min: DeliveryAddressMinAggregateOutputType | null
    _max: DeliveryAddressMaxAggregateOutputType | null
  }

  export type DeliveryAddressAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type DeliveryAddressSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type DeliveryAddressMinAggregateOutputType = {
    id: number | null
    userId: number | null
    address: string | null
    isDefault: boolean | null
  }

  export type DeliveryAddressMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    address: string | null
    isDefault: boolean | null
  }

  export type DeliveryAddressCountAggregateOutputType = {
    id: number
    userId: number
    address: number
    isDefault: number
    _all: number
  }


  export type DeliveryAddressAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type DeliveryAddressSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type DeliveryAddressMinAggregateInputType = {
    id?: true
    userId?: true
    address?: true
    isDefault?: true
  }

  export type DeliveryAddressMaxAggregateInputType = {
    id?: true
    userId?: true
    address?: true
    isDefault?: true
  }

  export type DeliveryAddressCountAggregateInputType = {
    id?: true
    userId?: true
    address?: true
    isDefault?: true
    _all?: true
  }

  export type DeliveryAddressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeliveryAddress to aggregate.
     */
    where?: DeliveryAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeliveryAddresses to fetch.
     */
    orderBy?: DeliveryAddressOrderByWithRelationInput | DeliveryAddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DeliveryAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeliveryAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeliveryAddresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DeliveryAddresses
    **/
    _count?: true | DeliveryAddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DeliveryAddressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DeliveryAddressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeliveryAddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeliveryAddressMaxAggregateInputType
  }

  export type GetDeliveryAddressAggregateType<T extends DeliveryAddressAggregateArgs> = {
        [P in keyof T & keyof AggregateDeliveryAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeliveryAddress[P]>
      : GetScalarType<T[P], AggregateDeliveryAddress[P]>
  }




  export type DeliveryAddressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DeliveryAddressWhereInput
    orderBy?: DeliveryAddressOrderByWithAggregationInput | DeliveryAddressOrderByWithAggregationInput[]
    by: DeliveryAddressScalarFieldEnum[] | DeliveryAddressScalarFieldEnum
    having?: DeliveryAddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeliveryAddressCountAggregateInputType | true
    _avg?: DeliveryAddressAvgAggregateInputType
    _sum?: DeliveryAddressSumAggregateInputType
    _min?: DeliveryAddressMinAggregateInputType
    _max?: DeliveryAddressMaxAggregateInputType
  }

  export type DeliveryAddressGroupByOutputType = {
    id: number
    userId: number
    address: string
    isDefault: boolean
    _count: DeliveryAddressCountAggregateOutputType | null
    _avg: DeliveryAddressAvgAggregateOutputType | null
    _sum: DeliveryAddressSumAggregateOutputType | null
    _min: DeliveryAddressMinAggregateOutputType | null
    _max: DeliveryAddressMaxAggregateOutputType | null
  }

  type GetDeliveryAddressGroupByPayload<T extends DeliveryAddressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DeliveryAddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeliveryAddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeliveryAddressGroupByOutputType[P]>
            : GetScalarType<T[P], DeliveryAddressGroupByOutputType[P]>
        }
      >
    >


  export type DeliveryAddressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    address?: boolean
    isDefault?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["deliveryAddress"]>

  export type DeliveryAddressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    address?: boolean
    isDefault?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["deliveryAddress"]>

  export type DeliveryAddressSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    address?: boolean
    isDefault?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["deliveryAddress"]>

  export type DeliveryAddressSelectScalar = {
    id?: boolean
    userId?: boolean
    address?: boolean
    isDefault?: boolean
  }

  export type DeliveryAddressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "address" | "isDefault", ExtArgs["result"]["deliveryAddress"]>
  export type DeliveryAddressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DeliveryAddressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DeliveryAddressIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DeliveryAddressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DeliveryAddress"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      address: string
      isDefault: boolean
    }, ExtArgs["result"]["deliveryAddress"]>
    composites: {}
  }

  type DeliveryAddressGetPayload<S extends boolean | null | undefined | DeliveryAddressDefaultArgs> = $Result.GetResult<Prisma.$DeliveryAddressPayload, S>

  type DeliveryAddressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DeliveryAddressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DeliveryAddressCountAggregateInputType | true
    }

  export interface DeliveryAddressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DeliveryAddress'], meta: { name: 'DeliveryAddress' } }
    /**
     * Find zero or one DeliveryAddress that matches the filter.
     * @param {DeliveryAddressFindUniqueArgs} args - Arguments to find a DeliveryAddress
     * @example
     * // Get one DeliveryAddress
     * const deliveryAddress = await prisma.deliveryAddress.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DeliveryAddressFindUniqueArgs>(args: SelectSubset<T, DeliveryAddressFindUniqueArgs<ExtArgs>>): Prisma__DeliveryAddressClient<$Result.GetResult<Prisma.$DeliveryAddressPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one DeliveryAddress that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DeliveryAddressFindUniqueOrThrowArgs} args - Arguments to find a DeliveryAddress
     * @example
     * // Get one DeliveryAddress
     * const deliveryAddress = await prisma.deliveryAddress.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DeliveryAddressFindUniqueOrThrowArgs>(args: SelectSubset<T, DeliveryAddressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DeliveryAddressClient<$Result.GetResult<Prisma.$DeliveryAddressPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first DeliveryAddress that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryAddressFindFirstArgs} args - Arguments to find a DeliveryAddress
     * @example
     * // Get one DeliveryAddress
     * const deliveryAddress = await prisma.deliveryAddress.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DeliveryAddressFindFirstArgs>(args?: SelectSubset<T, DeliveryAddressFindFirstArgs<ExtArgs>>): Prisma__DeliveryAddressClient<$Result.GetResult<Prisma.$DeliveryAddressPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first DeliveryAddress that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryAddressFindFirstOrThrowArgs} args - Arguments to find a DeliveryAddress
     * @example
     * // Get one DeliveryAddress
     * const deliveryAddress = await prisma.deliveryAddress.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DeliveryAddressFindFirstOrThrowArgs>(args?: SelectSubset<T, DeliveryAddressFindFirstOrThrowArgs<ExtArgs>>): Prisma__DeliveryAddressClient<$Result.GetResult<Prisma.$DeliveryAddressPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more DeliveryAddresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryAddressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DeliveryAddresses
     * const deliveryAddresses = await prisma.deliveryAddress.findMany()
     * 
     * // Get first 10 DeliveryAddresses
     * const deliveryAddresses = await prisma.deliveryAddress.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const deliveryAddressWithIdOnly = await prisma.deliveryAddress.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DeliveryAddressFindManyArgs>(args?: SelectSubset<T, DeliveryAddressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeliveryAddressPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a DeliveryAddress.
     * @param {DeliveryAddressCreateArgs} args - Arguments to create a DeliveryAddress.
     * @example
     * // Create one DeliveryAddress
     * const DeliveryAddress = await prisma.deliveryAddress.create({
     *   data: {
     *     // ... data to create a DeliveryAddress
     *   }
     * })
     * 
     */
    create<T extends DeliveryAddressCreateArgs>(args: SelectSubset<T, DeliveryAddressCreateArgs<ExtArgs>>): Prisma__DeliveryAddressClient<$Result.GetResult<Prisma.$DeliveryAddressPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many DeliveryAddresses.
     * @param {DeliveryAddressCreateManyArgs} args - Arguments to create many DeliveryAddresses.
     * @example
     * // Create many DeliveryAddresses
     * const deliveryAddress = await prisma.deliveryAddress.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DeliveryAddressCreateManyArgs>(args?: SelectSubset<T, DeliveryAddressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DeliveryAddresses and returns the data saved in the database.
     * @param {DeliveryAddressCreateManyAndReturnArgs} args - Arguments to create many DeliveryAddresses.
     * @example
     * // Create many DeliveryAddresses
     * const deliveryAddress = await prisma.deliveryAddress.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DeliveryAddresses and only return the `id`
     * const deliveryAddressWithIdOnly = await prisma.deliveryAddress.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DeliveryAddressCreateManyAndReturnArgs>(args?: SelectSubset<T, DeliveryAddressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeliveryAddressPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a DeliveryAddress.
     * @param {DeliveryAddressDeleteArgs} args - Arguments to delete one DeliveryAddress.
     * @example
     * // Delete one DeliveryAddress
     * const DeliveryAddress = await prisma.deliveryAddress.delete({
     *   where: {
     *     // ... filter to delete one DeliveryAddress
     *   }
     * })
     * 
     */
    delete<T extends DeliveryAddressDeleteArgs>(args: SelectSubset<T, DeliveryAddressDeleteArgs<ExtArgs>>): Prisma__DeliveryAddressClient<$Result.GetResult<Prisma.$DeliveryAddressPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one DeliveryAddress.
     * @param {DeliveryAddressUpdateArgs} args - Arguments to update one DeliveryAddress.
     * @example
     * // Update one DeliveryAddress
     * const deliveryAddress = await prisma.deliveryAddress.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DeliveryAddressUpdateArgs>(args: SelectSubset<T, DeliveryAddressUpdateArgs<ExtArgs>>): Prisma__DeliveryAddressClient<$Result.GetResult<Prisma.$DeliveryAddressPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more DeliveryAddresses.
     * @param {DeliveryAddressDeleteManyArgs} args - Arguments to filter DeliveryAddresses to delete.
     * @example
     * // Delete a few DeliveryAddresses
     * const { count } = await prisma.deliveryAddress.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DeliveryAddressDeleteManyArgs>(args?: SelectSubset<T, DeliveryAddressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DeliveryAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryAddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DeliveryAddresses
     * const deliveryAddress = await prisma.deliveryAddress.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DeliveryAddressUpdateManyArgs>(args: SelectSubset<T, DeliveryAddressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DeliveryAddresses and returns the data updated in the database.
     * @param {DeliveryAddressUpdateManyAndReturnArgs} args - Arguments to update many DeliveryAddresses.
     * @example
     * // Update many DeliveryAddresses
     * const deliveryAddress = await prisma.deliveryAddress.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DeliveryAddresses and only return the `id`
     * const deliveryAddressWithIdOnly = await prisma.deliveryAddress.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DeliveryAddressUpdateManyAndReturnArgs>(args: SelectSubset<T, DeliveryAddressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DeliveryAddressPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one DeliveryAddress.
     * @param {DeliveryAddressUpsertArgs} args - Arguments to update or create a DeliveryAddress.
     * @example
     * // Update or create a DeliveryAddress
     * const deliveryAddress = await prisma.deliveryAddress.upsert({
     *   create: {
     *     // ... data to create a DeliveryAddress
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DeliveryAddress we want to update
     *   }
     * })
     */
    upsert<T extends DeliveryAddressUpsertArgs>(args: SelectSubset<T, DeliveryAddressUpsertArgs<ExtArgs>>): Prisma__DeliveryAddressClient<$Result.GetResult<Prisma.$DeliveryAddressPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of DeliveryAddresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryAddressCountArgs} args - Arguments to filter DeliveryAddresses to count.
     * @example
     * // Count the number of DeliveryAddresses
     * const count = await prisma.deliveryAddress.count({
     *   where: {
     *     // ... the filter for the DeliveryAddresses we want to count
     *   }
     * })
    **/
    count<T extends DeliveryAddressCountArgs>(
      args?: Subset<T, DeliveryAddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeliveryAddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DeliveryAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryAddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeliveryAddressAggregateArgs>(args: Subset<T, DeliveryAddressAggregateArgs>): Prisma.PrismaPromise<GetDeliveryAddressAggregateType<T>>

    /**
     * Group by DeliveryAddress.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliveryAddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DeliveryAddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DeliveryAddressGroupByArgs['orderBy'] }
        : { orderBy?: DeliveryAddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DeliveryAddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeliveryAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DeliveryAddress model
   */
  readonly fields: DeliveryAddressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DeliveryAddress.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DeliveryAddressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DeliveryAddress model
   */ 
  interface DeliveryAddressFieldRefs {
    readonly id: FieldRef<"DeliveryAddress", 'Int'>
    readonly userId: FieldRef<"DeliveryAddress", 'Int'>
    readonly address: FieldRef<"DeliveryAddress", 'String'>
    readonly isDefault: FieldRef<"DeliveryAddress", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * DeliveryAddress findUnique
   */
  export type DeliveryAddressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryAddress
     */
    select?: DeliveryAddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryAddress
     */
    omit?: DeliveryAddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryAddressInclude<ExtArgs> | null
    /**
     * Filter, which DeliveryAddress to fetch.
     */
    where: DeliveryAddressWhereUniqueInput
  }

  /**
   * DeliveryAddress findUniqueOrThrow
   */
  export type DeliveryAddressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryAddress
     */
    select?: DeliveryAddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryAddress
     */
    omit?: DeliveryAddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryAddressInclude<ExtArgs> | null
    /**
     * Filter, which DeliveryAddress to fetch.
     */
    where: DeliveryAddressWhereUniqueInput
  }

  /**
   * DeliveryAddress findFirst
   */
  export type DeliveryAddressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryAddress
     */
    select?: DeliveryAddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryAddress
     */
    omit?: DeliveryAddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryAddressInclude<ExtArgs> | null
    /**
     * Filter, which DeliveryAddress to fetch.
     */
    where?: DeliveryAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeliveryAddresses to fetch.
     */
    orderBy?: DeliveryAddressOrderByWithRelationInput | DeliveryAddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeliveryAddresses.
     */
    cursor?: DeliveryAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeliveryAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeliveryAddresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeliveryAddresses.
     */
    distinct?: DeliveryAddressScalarFieldEnum | DeliveryAddressScalarFieldEnum[]
  }

  /**
   * DeliveryAddress findFirstOrThrow
   */
  export type DeliveryAddressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryAddress
     */
    select?: DeliveryAddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryAddress
     */
    omit?: DeliveryAddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryAddressInclude<ExtArgs> | null
    /**
     * Filter, which DeliveryAddress to fetch.
     */
    where?: DeliveryAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeliveryAddresses to fetch.
     */
    orderBy?: DeliveryAddressOrderByWithRelationInput | DeliveryAddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DeliveryAddresses.
     */
    cursor?: DeliveryAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeliveryAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeliveryAddresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DeliveryAddresses.
     */
    distinct?: DeliveryAddressScalarFieldEnum | DeliveryAddressScalarFieldEnum[]
  }

  /**
   * DeliveryAddress findMany
   */
  export type DeliveryAddressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryAddress
     */
    select?: DeliveryAddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryAddress
     */
    omit?: DeliveryAddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryAddressInclude<ExtArgs> | null
    /**
     * Filter, which DeliveryAddresses to fetch.
     */
    where?: DeliveryAddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DeliveryAddresses to fetch.
     */
    orderBy?: DeliveryAddressOrderByWithRelationInput | DeliveryAddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DeliveryAddresses.
     */
    cursor?: DeliveryAddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DeliveryAddresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DeliveryAddresses.
     */
    skip?: number
    distinct?: DeliveryAddressScalarFieldEnum | DeliveryAddressScalarFieldEnum[]
  }

  /**
   * DeliveryAddress create
   */
  export type DeliveryAddressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryAddress
     */
    select?: DeliveryAddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryAddress
     */
    omit?: DeliveryAddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryAddressInclude<ExtArgs> | null
    /**
     * The data needed to create a DeliveryAddress.
     */
    data: XOR<DeliveryAddressCreateInput, DeliveryAddressUncheckedCreateInput>
  }

  /**
   * DeliveryAddress createMany
   */
  export type DeliveryAddressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DeliveryAddresses.
     */
    data: DeliveryAddressCreateManyInput | DeliveryAddressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DeliveryAddress createManyAndReturn
   */
  export type DeliveryAddressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryAddress
     */
    select?: DeliveryAddressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryAddress
     */
    omit?: DeliveryAddressOmit<ExtArgs> | null
    /**
     * The data used to create many DeliveryAddresses.
     */
    data: DeliveryAddressCreateManyInput | DeliveryAddressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryAddressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DeliveryAddress update
   */
  export type DeliveryAddressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryAddress
     */
    select?: DeliveryAddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryAddress
     */
    omit?: DeliveryAddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryAddressInclude<ExtArgs> | null
    /**
     * The data needed to update a DeliveryAddress.
     */
    data: XOR<DeliveryAddressUpdateInput, DeliveryAddressUncheckedUpdateInput>
    /**
     * Choose, which DeliveryAddress to update.
     */
    where: DeliveryAddressWhereUniqueInput
  }

  /**
   * DeliveryAddress updateMany
   */
  export type DeliveryAddressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DeliveryAddresses.
     */
    data: XOR<DeliveryAddressUpdateManyMutationInput, DeliveryAddressUncheckedUpdateManyInput>
    /**
     * Filter which DeliveryAddresses to update
     */
    where?: DeliveryAddressWhereInput
    /**
     * Limit how many DeliveryAddresses to update.
     */
    limit?: number
  }

  /**
   * DeliveryAddress updateManyAndReturn
   */
  export type DeliveryAddressUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryAddress
     */
    select?: DeliveryAddressSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryAddress
     */
    omit?: DeliveryAddressOmit<ExtArgs> | null
    /**
     * The data used to update DeliveryAddresses.
     */
    data: XOR<DeliveryAddressUpdateManyMutationInput, DeliveryAddressUncheckedUpdateManyInput>
    /**
     * Filter which DeliveryAddresses to update
     */
    where?: DeliveryAddressWhereInput
    /**
     * Limit how many DeliveryAddresses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryAddressIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DeliveryAddress upsert
   */
  export type DeliveryAddressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryAddress
     */
    select?: DeliveryAddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryAddress
     */
    omit?: DeliveryAddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryAddressInclude<ExtArgs> | null
    /**
     * The filter to search for the DeliveryAddress to update in case it exists.
     */
    where: DeliveryAddressWhereUniqueInput
    /**
     * In case the DeliveryAddress found by the `where` argument doesn't exist, create a new DeliveryAddress with this data.
     */
    create: XOR<DeliveryAddressCreateInput, DeliveryAddressUncheckedCreateInput>
    /**
     * In case the DeliveryAddress was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DeliveryAddressUpdateInput, DeliveryAddressUncheckedUpdateInput>
  }

  /**
   * DeliveryAddress delete
   */
  export type DeliveryAddressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryAddress
     */
    select?: DeliveryAddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryAddress
     */
    omit?: DeliveryAddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryAddressInclude<ExtArgs> | null
    /**
     * Filter which DeliveryAddress to delete.
     */
    where: DeliveryAddressWhereUniqueInput
  }

  /**
   * DeliveryAddress deleteMany
   */
  export type DeliveryAddressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DeliveryAddresses to delete
     */
    where?: DeliveryAddressWhereInput
    /**
     * Limit how many DeliveryAddresses to delete.
     */
    limit?: number
  }

  /**
   * DeliveryAddress without action
   */
  export type DeliveryAddressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliveryAddress
     */
    select?: DeliveryAddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DeliveryAddress
     */
    omit?: DeliveryAddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DeliveryAddressInclude<ExtArgs> | null
  }


  /**
   * Model VerificationCode
   */

  export type AggregateVerificationCode = {
    _count: VerificationCodeCountAggregateOutputType | null
    _avg: VerificationCodeAvgAggregateOutputType | null
    _sum: VerificationCodeSumAggregateOutputType | null
    _min: VerificationCodeMinAggregateOutputType | null
    _max: VerificationCodeMaxAggregateOutputType | null
  }

  export type VerificationCodeAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type VerificationCodeSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type VerificationCodeMinAggregateOutputType = {
    id: number | null
    userId: number | null
    code: string | null
    createdAt: Date | null
  }

  export type VerificationCodeMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    code: string | null
    createdAt: Date | null
  }

  export type VerificationCodeCountAggregateOutputType = {
    id: number
    userId: number
    code: number
    createdAt: number
    _all: number
  }


  export type VerificationCodeAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type VerificationCodeSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type VerificationCodeMinAggregateInputType = {
    id?: true
    userId?: true
    code?: true
    createdAt?: true
  }

  export type VerificationCodeMaxAggregateInputType = {
    id?: true
    userId?: true
    code?: true
    createdAt?: true
  }

  export type VerificationCodeCountAggregateInputType = {
    id?: true
    userId?: true
    code?: true
    createdAt?: true
    _all?: true
  }

  export type VerificationCodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationCode to aggregate.
     */
    where?: VerificationCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationCodes to fetch.
     */
    orderBy?: VerificationCodeOrderByWithRelationInput | VerificationCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationCodes
    **/
    _count?: true | VerificationCodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VerificationCodeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VerificationCodeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationCodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationCodeMaxAggregateInputType
  }

  export type GetVerificationCodeAggregateType<T extends VerificationCodeAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationCode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationCode[P]>
      : GetScalarType<T[P], AggregateVerificationCode[P]>
  }




  export type VerificationCodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationCodeWhereInput
    orderBy?: VerificationCodeOrderByWithAggregationInput | VerificationCodeOrderByWithAggregationInput[]
    by: VerificationCodeScalarFieldEnum[] | VerificationCodeScalarFieldEnum
    having?: VerificationCodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationCodeCountAggregateInputType | true
    _avg?: VerificationCodeAvgAggregateInputType
    _sum?: VerificationCodeSumAggregateInputType
    _min?: VerificationCodeMinAggregateInputType
    _max?: VerificationCodeMaxAggregateInputType
  }

  export type VerificationCodeGroupByOutputType = {
    id: number
    userId: number
    code: string
    createdAt: Date
    _count: VerificationCodeCountAggregateOutputType | null
    _avg: VerificationCodeAvgAggregateOutputType | null
    _sum: VerificationCodeSumAggregateOutputType | null
    _min: VerificationCodeMinAggregateOutputType | null
    _max: VerificationCodeMaxAggregateOutputType | null
  }

  type GetVerificationCodeGroupByPayload<T extends VerificationCodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationCodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationCodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationCodeGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationCodeGroupByOutputType[P]>
        }
      >
    >


  export type VerificationCodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    code?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["verificationCode"]>

  export type VerificationCodeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    code?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["verificationCode"]>

  export type VerificationCodeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    code?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["verificationCode"]>

  export type VerificationCodeSelectScalar = {
    id?: boolean
    userId?: boolean
    code?: boolean
    createdAt?: boolean
  }

  export type VerificationCodeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "code" | "createdAt", ExtArgs["result"]["verificationCode"]>
  export type VerificationCodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type VerificationCodeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type VerificationCodeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $VerificationCodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationCode"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      code: string
      createdAt: Date
    }, ExtArgs["result"]["verificationCode"]>
    composites: {}
  }

  type VerificationCodeGetPayload<S extends boolean | null | undefined | VerificationCodeDefaultArgs> = $Result.GetResult<Prisma.$VerificationCodePayload, S>

  type VerificationCodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationCodeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationCodeCountAggregateInputType | true
    }

  export interface VerificationCodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationCode'], meta: { name: 'VerificationCode' } }
    /**
     * Find zero or one VerificationCode that matches the filter.
     * @param {VerificationCodeFindUniqueArgs} args - Arguments to find a VerificationCode
     * @example
     * // Get one VerificationCode
     * const verificationCode = await prisma.verificationCode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationCodeFindUniqueArgs>(args: SelectSubset<T, VerificationCodeFindUniqueArgs<ExtArgs>>): Prisma__VerificationCodeClient<$Result.GetResult<Prisma.$VerificationCodePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one VerificationCode that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationCodeFindUniqueOrThrowArgs} args - Arguments to find a VerificationCode
     * @example
     * // Get one VerificationCode
     * const verificationCode = await prisma.verificationCode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationCodeFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationCodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationCodeClient<$Result.GetResult<Prisma.$VerificationCodePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first VerificationCode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCodeFindFirstArgs} args - Arguments to find a VerificationCode
     * @example
     * // Get one VerificationCode
     * const verificationCode = await prisma.verificationCode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationCodeFindFirstArgs>(args?: SelectSubset<T, VerificationCodeFindFirstArgs<ExtArgs>>): Prisma__VerificationCodeClient<$Result.GetResult<Prisma.$VerificationCodePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first VerificationCode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCodeFindFirstOrThrowArgs} args - Arguments to find a VerificationCode
     * @example
     * // Get one VerificationCode
     * const verificationCode = await prisma.verificationCode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationCodeFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationCodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationCodeClient<$Result.GetResult<Prisma.$VerificationCodePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more VerificationCodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationCodes
     * const verificationCodes = await prisma.verificationCode.findMany()
     * 
     * // Get first 10 VerificationCodes
     * const verificationCodes = await prisma.verificationCode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verificationCodeWithIdOnly = await prisma.verificationCode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VerificationCodeFindManyArgs>(args?: SelectSubset<T, VerificationCodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationCodePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a VerificationCode.
     * @param {VerificationCodeCreateArgs} args - Arguments to create a VerificationCode.
     * @example
     * // Create one VerificationCode
     * const VerificationCode = await prisma.verificationCode.create({
     *   data: {
     *     // ... data to create a VerificationCode
     *   }
     * })
     * 
     */
    create<T extends VerificationCodeCreateArgs>(args: SelectSubset<T, VerificationCodeCreateArgs<ExtArgs>>): Prisma__VerificationCodeClient<$Result.GetResult<Prisma.$VerificationCodePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many VerificationCodes.
     * @param {VerificationCodeCreateManyArgs} args - Arguments to create many VerificationCodes.
     * @example
     * // Create many VerificationCodes
     * const verificationCode = await prisma.verificationCode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationCodeCreateManyArgs>(args?: SelectSubset<T, VerificationCodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationCodes and returns the data saved in the database.
     * @param {VerificationCodeCreateManyAndReturnArgs} args - Arguments to create many VerificationCodes.
     * @example
     * // Create many VerificationCodes
     * const verificationCode = await prisma.verificationCode.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationCodes and only return the `id`
     * const verificationCodeWithIdOnly = await prisma.verificationCode.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationCodeCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationCodeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationCodePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a VerificationCode.
     * @param {VerificationCodeDeleteArgs} args - Arguments to delete one VerificationCode.
     * @example
     * // Delete one VerificationCode
     * const VerificationCode = await prisma.verificationCode.delete({
     *   where: {
     *     // ... filter to delete one VerificationCode
     *   }
     * })
     * 
     */
    delete<T extends VerificationCodeDeleteArgs>(args: SelectSubset<T, VerificationCodeDeleteArgs<ExtArgs>>): Prisma__VerificationCodeClient<$Result.GetResult<Prisma.$VerificationCodePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one VerificationCode.
     * @param {VerificationCodeUpdateArgs} args - Arguments to update one VerificationCode.
     * @example
     * // Update one VerificationCode
     * const verificationCode = await prisma.verificationCode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationCodeUpdateArgs>(args: SelectSubset<T, VerificationCodeUpdateArgs<ExtArgs>>): Prisma__VerificationCodeClient<$Result.GetResult<Prisma.$VerificationCodePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more VerificationCodes.
     * @param {VerificationCodeDeleteManyArgs} args - Arguments to filter VerificationCodes to delete.
     * @example
     * // Delete a few VerificationCodes
     * const { count } = await prisma.verificationCode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationCodeDeleteManyArgs>(args?: SelectSubset<T, VerificationCodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationCodes
     * const verificationCode = await prisma.verificationCode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationCodeUpdateManyArgs>(args: SelectSubset<T, VerificationCodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationCodes and returns the data updated in the database.
     * @param {VerificationCodeUpdateManyAndReturnArgs} args - Arguments to update many VerificationCodes.
     * @example
     * // Update many VerificationCodes
     * const verificationCode = await prisma.verificationCode.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VerificationCodes and only return the `id`
     * const verificationCodeWithIdOnly = await prisma.verificationCode.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationCodeUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationCodeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationCodePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one VerificationCode.
     * @param {VerificationCodeUpsertArgs} args - Arguments to update or create a VerificationCode.
     * @example
     * // Update or create a VerificationCode
     * const verificationCode = await prisma.verificationCode.upsert({
     *   create: {
     *     // ... data to create a VerificationCode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationCode we want to update
     *   }
     * })
     */
    upsert<T extends VerificationCodeUpsertArgs>(args: SelectSubset<T, VerificationCodeUpsertArgs<ExtArgs>>): Prisma__VerificationCodeClient<$Result.GetResult<Prisma.$VerificationCodePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of VerificationCodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCodeCountArgs} args - Arguments to filter VerificationCodes to count.
     * @example
     * // Count the number of VerificationCodes
     * const count = await prisma.verificationCode.count({
     *   where: {
     *     // ... the filter for the VerificationCodes we want to count
     *   }
     * })
    **/
    count<T extends VerificationCodeCountArgs>(
      args?: Subset<T, VerificationCodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationCodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationCodeAggregateArgs>(args: Subset<T, VerificationCodeAggregateArgs>): Prisma.PrismaPromise<GetVerificationCodeAggregateType<T>>

    /**
     * Group by VerificationCode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationCodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationCodeGroupByArgs['orderBy'] }
        : { orderBy?: VerificationCodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationCodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationCodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationCode model
   */
  readonly fields: VerificationCodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationCode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationCodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationCode model
   */ 
  interface VerificationCodeFieldRefs {
    readonly id: FieldRef<"VerificationCode", 'Int'>
    readonly userId: FieldRef<"VerificationCode", 'Int'>
    readonly code: FieldRef<"VerificationCode", 'String'>
    readonly createdAt: FieldRef<"VerificationCode", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationCode findUnique
   */
  export type VerificationCodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationCode
     */
    select?: VerificationCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationCode
     */
    omit?: VerificationCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationCodeInclude<ExtArgs> | null
    /**
     * Filter, which VerificationCode to fetch.
     */
    where: VerificationCodeWhereUniqueInput
  }

  /**
   * VerificationCode findUniqueOrThrow
   */
  export type VerificationCodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationCode
     */
    select?: VerificationCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationCode
     */
    omit?: VerificationCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationCodeInclude<ExtArgs> | null
    /**
     * Filter, which VerificationCode to fetch.
     */
    where: VerificationCodeWhereUniqueInput
  }

  /**
   * VerificationCode findFirst
   */
  export type VerificationCodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationCode
     */
    select?: VerificationCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationCode
     */
    omit?: VerificationCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationCodeInclude<ExtArgs> | null
    /**
     * Filter, which VerificationCode to fetch.
     */
    where?: VerificationCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationCodes to fetch.
     */
    orderBy?: VerificationCodeOrderByWithRelationInput | VerificationCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationCodes.
     */
    cursor?: VerificationCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationCodes.
     */
    distinct?: VerificationCodeScalarFieldEnum | VerificationCodeScalarFieldEnum[]
  }

  /**
   * VerificationCode findFirstOrThrow
   */
  export type VerificationCodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationCode
     */
    select?: VerificationCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationCode
     */
    omit?: VerificationCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationCodeInclude<ExtArgs> | null
    /**
     * Filter, which VerificationCode to fetch.
     */
    where?: VerificationCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationCodes to fetch.
     */
    orderBy?: VerificationCodeOrderByWithRelationInput | VerificationCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationCodes.
     */
    cursor?: VerificationCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationCodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationCodes.
     */
    distinct?: VerificationCodeScalarFieldEnum | VerificationCodeScalarFieldEnum[]
  }

  /**
   * VerificationCode findMany
   */
  export type VerificationCodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationCode
     */
    select?: VerificationCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationCode
     */
    omit?: VerificationCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationCodeInclude<ExtArgs> | null
    /**
     * Filter, which VerificationCodes to fetch.
     */
    where?: VerificationCodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationCodes to fetch.
     */
    orderBy?: VerificationCodeOrderByWithRelationInput | VerificationCodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationCodes.
     */
    cursor?: VerificationCodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationCodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationCodes.
     */
    skip?: number
    distinct?: VerificationCodeScalarFieldEnum | VerificationCodeScalarFieldEnum[]
  }

  /**
   * VerificationCode create
   */
  export type VerificationCodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationCode
     */
    select?: VerificationCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationCode
     */
    omit?: VerificationCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationCodeInclude<ExtArgs> | null
    /**
     * The data needed to create a VerificationCode.
     */
    data: XOR<VerificationCodeCreateInput, VerificationCodeUncheckedCreateInput>
  }

  /**
   * VerificationCode createMany
   */
  export type VerificationCodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationCodes.
     */
    data: VerificationCodeCreateManyInput | VerificationCodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationCode createManyAndReturn
   */
  export type VerificationCodeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationCode
     */
    select?: VerificationCodeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationCode
     */
    omit?: VerificationCodeOmit<ExtArgs> | null
    /**
     * The data used to create many VerificationCodes.
     */
    data: VerificationCodeCreateManyInput | VerificationCodeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationCodeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * VerificationCode update
   */
  export type VerificationCodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationCode
     */
    select?: VerificationCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationCode
     */
    omit?: VerificationCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationCodeInclude<ExtArgs> | null
    /**
     * The data needed to update a VerificationCode.
     */
    data: XOR<VerificationCodeUpdateInput, VerificationCodeUncheckedUpdateInput>
    /**
     * Choose, which VerificationCode to update.
     */
    where: VerificationCodeWhereUniqueInput
  }

  /**
   * VerificationCode updateMany
   */
  export type VerificationCodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationCodes.
     */
    data: XOR<VerificationCodeUpdateManyMutationInput, VerificationCodeUncheckedUpdateManyInput>
    /**
     * Filter which VerificationCodes to update
     */
    where?: VerificationCodeWhereInput
    /**
     * Limit how many VerificationCodes to update.
     */
    limit?: number
  }

  /**
   * VerificationCode updateManyAndReturn
   */
  export type VerificationCodeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationCode
     */
    select?: VerificationCodeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationCode
     */
    omit?: VerificationCodeOmit<ExtArgs> | null
    /**
     * The data used to update VerificationCodes.
     */
    data: XOR<VerificationCodeUpdateManyMutationInput, VerificationCodeUncheckedUpdateManyInput>
    /**
     * Filter which VerificationCodes to update
     */
    where?: VerificationCodeWhereInput
    /**
     * Limit how many VerificationCodes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationCodeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * VerificationCode upsert
   */
  export type VerificationCodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationCode
     */
    select?: VerificationCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationCode
     */
    omit?: VerificationCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationCodeInclude<ExtArgs> | null
    /**
     * The filter to search for the VerificationCode to update in case it exists.
     */
    where: VerificationCodeWhereUniqueInput
    /**
     * In case the VerificationCode found by the `where` argument doesn't exist, create a new VerificationCode with this data.
     */
    create: XOR<VerificationCodeCreateInput, VerificationCodeUncheckedCreateInput>
    /**
     * In case the VerificationCode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationCodeUpdateInput, VerificationCodeUncheckedUpdateInput>
  }

  /**
   * VerificationCode delete
   */
  export type VerificationCodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationCode
     */
    select?: VerificationCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationCode
     */
    omit?: VerificationCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationCodeInclude<ExtArgs> | null
    /**
     * Filter which VerificationCode to delete.
     */
    where: VerificationCodeWhereUniqueInput
  }

  /**
   * VerificationCode deleteMany
   */
  export type VerificationCodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationCodes to delete
     */
    where?: VerificationCodeWhereInput
    /**
     * Limit how many VerificationCodes to delete.
     */
    limit?: number
  }

  /**
   * VerificationCode without action
   */
  export type VerificationCodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationCode
     */
    select?: VerificationCodeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationCode
     */
    omit?: VerificationCodeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VerificationCodeInclude<ExtArgs> | null
  }


  /**
   * Model Story
   */

  export type AggregateStory = {
    _count: StoryCountAggregateOutputType | null
    _avg: StoryAvgAggregateOutputType | null
    _sum: StorySumAggregateOutputType | null
    _min: StoryMinAggregateOutputType | null
    _max: StoryMaxAggregateOutputType | null
  }

  export type StoryAvgAggregateOutputType = {
    id: number | null
  }

  export type StorySumAggregateOutputType = {
    id: number | null
  }

  export type StoryMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    previewImage: string | null
  }

  export type StoryMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    previewImage: string | null
  }

  export type StoryCountAggregateOutputType = {
    id: number
    createdAt: number
    previewImage: number
    _all: number
  }


  export type StoryAvgAggregateInputType = {
    id?: true
  }

  export type StorySumAggregateInputType = {
    id?: true
  }

  export type StoryMinAggregateInputType = {
    id?: true
    createdAt?: true
    previewImage?: true
  }

  export type StoryMaxAggregateInputType = {
    id?: true
    createdAt?: true
    previewImage?: true
  }

  export type StoryCountAggregateInputType = {
    id?: true
    createdAt?: true
    previewImage?: true
    _all?: true
  }

  export type StoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Story to aggregate.
     */
    where?: StoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stories to fetch.
     */
    orderBy?: StoryOrderByWithRelationInput | StoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stories
    **/
    _count?: true | StoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StoryMaxAggregateInputType
  }

  export type GetStoryAggregateType<T extends StoryAggregateArgs> = {
        [P in keyof T & keyof AggregateStory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStory[P]>
      : GetScalarType<T[P], AggregateStory[P]>
  }




  export type StoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoryWhereInput
    orderBy?: StoryOrderByWithAggregationInput | StoryOrderByWithAggregationInput[]
    by: StoryScalarFieldEnum[] | StoryScalarFieldEnum
    having?: StoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StoryCountAggregateInputType | true
    _avg?: StoryAvgAggregateInputType
    _sum?: StorySumAggregateInputType
    _min?: StoryMinAggregateInputType
    _max?: StoryMaxAggregateInputType
  }

  export type StoryGroupByOutputType = {
    id: number
    createdAt: Date
    previewImage: string
    _count: StoryCountAggregateOutputType | null
    _avg: StoryAvgAggregateOutputType | null
    _sum: StorySumAggregateOutputType | null
    _min: StoryMinAggregateOutputType | null
    _max: StoryMaxAggregateOutputType | null
  }

  type GetStoryGroupByPayload<T extends StoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StoryGroupByOutputType[P]>
            : GetScalarType<T[P], StoryGroupByOutputType[P]>
        }
      >
    >


  export type StorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    previewImage?: boolean
    items?: boolean | Story$itemsArgs<ExtArgs>
    _count?: boolean | StoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["story"]>

  export type StorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    previewImage?: boolean
  }, ExtArgs["result"]["story"]>

  export type StorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    previewImage?: boolean
  }, ExtArgs["result"]["story"]>

  export type StorySelectScalar = {
    id?: boolean
    createdAt?: boolean
    previewImage?: boolean
  }

  export type StoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "previewImage", ExtArgs["result"]["story"]>
  export type StoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | Story$itemsArgs<ExtArgs>
    _count?: boolean | StoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type StoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Story"
    objects: {
      items: Prisma.$StoryItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      previewImage: string
    }, ExtArgs["result"]["story"]>
    composites: {}
  }

  type StoryGetPayload<S extends boolean | null | undefined | StoryDefaultArgs> = $Result.GetResult<Prisma.$StoryPayload, S>

  type StoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StoryCountAggregateInputType | true
    }

  export interface StoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Story'], meta: { name: 'Story' } }
    /**
     * Find zero or one Story that matches the filter.
     * @param {StoryFindUniqueArgs} args - Arguments to find a Story
     * @example
     * // Get one Story
     * const story = await prisma.story.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StoryFindUniqueArgs>(args: SelectSubset<T, StoryFindUniqueArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Story that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StoryFindUniqueOrThrowArgs} args - Arguments to find a Story
     * @example
     * // Get one Story
     * const story = await prisma.story.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StoryFindUniqueOrThrowArgs>(args: SelectSubset<T, StoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Story that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryFindFirstArgs} args - Arguments to find a Story
     * @example
     * // Get one Story
     * const story = await prisma.story.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StoryFindFirstArgs>(args?: SelectSubset<T, StoryFindFirstArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Story that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryFindFirstOrThrowArgs} args - Arguments to find a Story
     * @example
     * // Get one Story
     * const story = await prisma.story.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StoryFindFirstOrThrowArgs>(args?: SelectSubset<T, StoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Stories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stories
     * const stories = await prisma.story.findMany()
     * 
     * // Get first 10 Stories
     * const stories = await prisma.story.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const storyWithIdOnly = await prisma.story.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StoryFindManyArgs>(args?: SelectSubset<T, StoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Story.
     * @param {StoryCreateArgs} args - Arguments to create a Story.
     * @example
     * // Create one Story
     * const Story = await prisma.story.create({
     *   data: {
     *     // ... data to create a Story
     *   }
     * })
     * 
     */
    create<T extends StoryCreateArgs>(args: SelectSubset<T, StoryCreateArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Stories.
     * @param {StoryCreateManyArgs} args - Arguments to create many Stories.
     * @example
     * // Create many Stories
     * const story = await prisma.story.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StoryCreateManyArgs>(args?: SelectSubset<T, StoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stories and returns the data saved in the database.
     * @param {StoryCreateManyAndReturnArgs} args - Arguments to create many Stories.
     * @example
     * // Create many Stories
     * const story = await prisma.story.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stories and only return the `id`
     * const storyWithIdOnly = await prisma.story.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StoryCreateManyAndReturnArgs>(args?: SelectSubset<T, StoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Story.
     * @param {StoryDeleteArgs} args - Arguments to delete one Story.
     * @example
     * // Delete one Story
     * const Story = await prisma.story.delete({
     *   where: {
     *     // ... filter to delete one Story
     *   }
     * })
     * 
     */
    delete<T extends StoryDeleteArgs>(args: SelectSubset<T, StoryDeleteArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Story.
     * @param {StoryUpdateArgs} args - Arguments to update one Story.
     * @example
     * // Update one Story
     * const story = await prisma.story.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StoryUpdateArgs>(args: SelectSubset<T, StoryUpdateArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Stories.
     * @param {StoryDeleteManyArgs} args - Arguments to filter Stories to delete.
     * @example
     * // Delete a few Stories
     * const { count } = await prisma.story.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StoryDeleteManyArgs>(args?: SelectSubset<T, StoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stories
     * const story = await prisma.story.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StoryUpdateManyArgs>(args: SelectSubset<T, StoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stories and returns the data updated in the database.
     * @param {StoryUpdateManyAndReturnArgs} args - Arguments to update many Stories.
     * @example
     * // Update many Stories
     * const story = await prisma.story.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Stories and only return the `id`
     * const storyWithIdOnly = await prisma.story.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StoryUpdateManyAndReturnArgs>(args: SelectSubset<T, StoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Story.
     * @param {StoryUpsertArgs} args - Arguments to update or create a Story.
     * @example
     * // Update or create a Story
     * const story = await prisma.story.upsert({
     *   create: {
     *     // ... data to create a Story
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Story we want to update
     *   }
     * })
     */
    upsert<T extends StoryUpsertArgs>(args: SelectSubset<T, StoryUpsertArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Stories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryCountArgs} args - Arguments to filter Stories to count.
     * @example
     * // Count the number of Stories
     * const count = await prisma.story.count({
     *   where: {
     *     // ... the filter for the Stories we want to count
     *   }
     * })
    **/
    count<T extends StoryCountArgs>(
      args?: Subset<T, StoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Story.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StoryAggregateArgs>(args: Subset<T, StoryAggregateArgs>): Prisma.PrismaPromise<GetStoryAggregateType<T>>

    /**
     * Group by Story.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StoryGroupByArgs['orderBy'] }
        : { orderBy?: StoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Story model
   */
  readonly fields: StoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Story.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    items<T extends Story$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Story$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoryItemPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Story model
   */ 
  interface StoryFieldRefs {
    readonly id: FieldRef<"Story", 'Int'>
    readonly createdAt: FieldRef<"Story", 'DateTime'>
    readonly previewImage: FieldRef<"Story", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Story findUnique
   */
  export type StoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * Filter, which Story to fetch.
     */
    where: StoryWhereUniqueInput
  }

  /**
   * Story findUniqueOrThrow
   */
  export type StoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * Filter, which Story to fetch.
     */
    where: StoryWhereUniqueInput
  }

  /**
   * Story findFirst
   */
  export type StoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * Filter, which Story to fetch.
     */
    where?: StoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stories to fetch.
     */
    orderBy?: StoryOrderByWithRelationInput | StoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stories.
     */
    cursor?: StoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stories.
     */
    distinct?: StoryScalarFieldEnum | StoryScalarFieldEnum[]
  }

  /**
   * Story findFirstOrThrow
   */
  export type StoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * Filter, which Story to fetch.
     */
    where?: StoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stories to fetch.
     */
    orderBy?: StoryOrderByWithRelationInput | StoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stories.
     */
    cursor?: StoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stories.
     */
    distinct?: StoryScalarFieldEnum | StoryScalarFieldEnum[]
  }

  /**
   * Story findMany
   */
  export type StoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * Filter, which Stories to fetch.
     */
    where?: StoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stories to fetch.
     */
    orderBy?: StoryOrderByWithRelationInput | StoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stories.
     */
    cursor?: StoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stories.
     */
    skip?: number
    distinct?: StoryScalarFieldEnum | StoryScalarFieldEnum[]
  }

  /**
   * Story create
   */
  export type StoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Story.
     */
    data: XOR<StoryCreateInput, StoryUncheckedCreateInput>
  }

  /**
   * Story createMany
   */
  export type StoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stories.
     */
    data: StoryCreateManyInput | StoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Story createManyAndReturn
   */
  export type StoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * The data used to create many Stories.
     */
    data: StoryCreateManyInput | StoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Story update
   */
  export type StoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Story.
     */
    data: XOR<StoryUpdateInput, StoryUncheckedUpdateInput>
    /**
     * Choose, which Story to update.
     */
    where: StoryWhereUniqueInput
  }

  /**
   * Story updateMany
   */
  export type StoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stories.
     */
    data: XOR<StoryUpdateManyMutationInput, StoryUncheckedUpdateManyInput>
    /**
     * Filter which Stories to update
     */
    where?: StoryWhereInput
    /**
     * Limit how many Stories to update.
     */
    limit?: number
  }

  /**
   * Story updateManyAndReturn
   */
  export type StoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * The data used to update Stories.
     */
    data: XOR<StoryUpdateManyMutationInput, StoryUncheckedUpdateManyInput>
    /**
     * Filter which Stories to update
     */
    where?: StoryWhereInput
    /**
     * Limit how many Stories to update.
     */
    limit?: number
  }

  /**
   * Story upsert
   */
  export type StoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Story to update in case it exists.
     */
    where: StoryWhereUniqueInput
    /**
     * In case the Story found by the `where` argument doesn't exist, create a new Story with this data.
     */
    create: XOR<StoryCreateInput, StoryUncheckedCreateInput>
    /**
     * In case the Story was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StoryUpdateInput, StoryUncheckedUpdateInput>
  }

  /**
   * Story delete
   */
  export type StoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * Filter which Story to delete.
     */
    where: StoryWhereUniqueInput
  }

  /**
   * Story deleteMany
   */
  export type StoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stories to delete
     */
    where?: StoryWhereInput
    /**
     * Limit how many Stories to delete.
     */
    limit?: number
  }

  /**
   * Story.items
   */
  export type Story$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryItem
     */
    select?: StoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryItem
     */
    omit?: StoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryItemInclude<ExtArgs> | null
    where?: StoryItemWhereInput
    orderBy?: StoryItemOrderByWithRelationInput | StoryItemOrderByWithRelationInput[]
    cursor?: StoryItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StoryItemScalarFieldEnum | StoryItemScalarFieldEnum[]
  }

  /**
   * Story without action
   */
  export type StoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Story
     */
    omit?: StoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryInclude<ExtArgs> | null
  }


  /**
   * Model StoryItem
   */

  export type AggregateStoryItem = {
    _count: StoryItemCountAggregateOutputType | null
    _avg: StoryItemAvgAggregateOutputType | null
    _sum: StoryItemSumAggregateOutputType | null
    _min: StoryItemMinAggregateOutputType | null
    _max: StoryItemMaxAggregateOutputType | null
  }

  export type StoryItemAvgAggregateOutputType = {
    id: number | null
    storyId: number | null
  }

  export type StoryItemSumAggregateOutputType = {
    id: number | null
    storyId: number | null
  }

  export type StoryItemMinAggregateOutputType = {
    id: number | null
    storyId: number | null
    createdAt: Date | null
    source: string | null
  }

  export type StoryItemMaxAggregateOutputType = {
    id: number | null
    storyId: number | null
    createdAt: Date | null
    source: string | null
  }

  export type StoryItemCountAggregateOutputType = {
    id: number
    storyId: number
    createdAt: number
    source: number
    _all: number
  }


  export type StoryItemAvgAggregateInputType = {
    id?: true
    storyId?: true
  }

  export type StoryItemSumAggregateInputType = {
    id?: true
    storyId?: true
  }

  export type StoryItemMinAggregateInputType = {
    id?: true
    storyId?: true
    createdAt?: true
    source?: true
  }

  export type StoryItemMaxAggregateInputType = {
    id?: true
    storyId?: true
    createdAt?: true
    source?: true
  }

  export type StoryItemCountAggregateInputType = {
    id?: true
    storyId?: true
    createdAt?: true
    source?: true
    _all?: true
  }

  export type StoryItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StoryItem to aggregate.
     */
    where?: StoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StoryItems to fetch.
     */
    orderBy?: StoryItemOrderByWithRelationInput | StoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StoryItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StoryItems
    **/
    _count?: true | StoryItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StoryItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StoryItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StoryItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StoryItemMaxAggregateInputType
  }

  export type GetStoryItemAggregateType<T extends StoryItemAggregateArgs> = {
        [P in keyof T & keyof AggregateStoryItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStoryItem[P]>
      : GetScalarType<T[P], AggregateStoryItem[P]>
  }




  export type StoryItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoryItemWhereInput
    orderBy?: StoryItemOrderByWithAggregationInput | StoryItemOrderByWithAggregationInput[]
    by: StoryItemScalarFieldEnum[] | StoryItemScalarFieldEnum
    having?: StoryItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StoryItemCountAggregateInputType | true
    _avg?: StoryItemAvgAggregateInputType
    _sum?: StoryItemSumAggregateInputType
    _min?: StoryItemMinAggregateInputType
    _max?: StoryItemMaxAggregateInputType
  }

  export type StoryItemGroupByOutputType = {
    id: number
    storyId: number
    createdAt: Date
    source: string
    _count: StoryItemCountAggregateOutputType | null
    _avg: StoryItemAvgAggregateOutputType | null
    _sum: StoryItemSumAggregateOutputType | null
    _min: StoryItemMinAggregateOutputType | null
    _max: StoryItemMaxAggregateOutputType | null
  }

  type GetStoryItemGroupByPayload<T extends StoryItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StoryItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StoryItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StoryItemGroupByOutputType[P]>
            : GetScalarType<T[P], StoryItemGroupByOutputType[P]>
        }
      >
    >


  export type StoryItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    storyId?: boolean
    createdAt?: boolean
    source?: boolean
    story?: boolean | StoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["storyItem"]>

  export type StoryItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    storyId?: boolean
    createdAt?: boolean
    source?: boolean
    story?: boolean | StoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["storyItem"]>

  export type StoryItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    storyId?: boolean
    createdAt?: boolean
    source?: boolean
    story?: boolean | StoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["storyItem"]>

  export type StoryItemSelectScalar = {
    id?: boolean
    storyId?: boolean
    createdAt?: boolean
    source?: boolean
  }

  export type StoryItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "storyId" | "createdAt" | "source", ExtArgs["result"]["storyItem"]>
  export type StoryItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    story?: boolean | StoryDefaultArgs<ExtArgs>
  }
  export type StoryItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    story?: boolean | StoryDefaultArgs<ExtArgs>
  }
  export type StoryItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    story?: boolean | StoryDefaultArgs<ExtArgs>
  }

  export type $StoryItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StoryItem"
    objects: {
      story: Prisma.$StoryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      storyId: number
      createdAt: Date
      source: string
    }, ExtArgs["result"]["storyItem"]>
    composites: {}
  }

  type StoryItemGetPayload<S extends boolean | null | undefined | StoryItemDefaultArgs> = $Result.GetResult<Prisma.$StoryItemPayload, S>

  type StoryItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StoryItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StoryItemCountAggregateInputType | true
    }

  export interface StoryItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StoryItem'], meta: { name: 'StoryItem' } }
    /**
     * Find zero or one StoryItem that matches the filter.
     * @param {StoryItemFindUniqueArgs} args - Arguments to find a StoryItem
     * @example
     * // Get one StoryItem
     * const storyItem = await prisma.storyItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StoryItemFindUniqueArgs>(args: SelectSubset<T, StoryItemFindUniqueArgs<ExtArgs>>): Prisma__StoryItemClient<$Result.GetResult<Prisma.$StoryItemPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one StoryItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StoryItemFindUniqueOrThrowArgs} args - Arguments to find a StoryItem
     * @example
     * // Get one StoryItem
     * const storyItem = await prisma.storyItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StoryItemFindUniqueOrThrowArgs>(args: SelectSubset<T, StoryItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StoryItemClient<$Result.GetResult<Prisma.$StoryItemPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first StoryItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryItemFindFirstArgs} args - Arguments to find a StoryItem
     * @example
     * // Get one StoryItem
     * const storyItem = await prisma.storyItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StoryItemFindFirstArgs>(args?: SelectSubset<T, StoryItemFindFirstArgs<ExtArgs>>): Prisma__StoryItemClient<$Result.GetResult<Prisma.$StoryItemPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first StoryItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryItemFindFirstOrThrowArgs} args - Arguments to find a StoryItem
     * @example
     * // Get one StoryItem
     * const storyItem = await prisma.storyItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StoryItemFindFirstOrThrowArgs>(args?: SelectSubset<T, StoryItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__StoryItemClient<$Result.GetResult<Prisma.$StoryItemPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more StoryItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StoryItems
     * const storyItems = await prisma.storyItem.findMany()
     * 
     * // Get first 10 StoryItems
     * const storyItems = await prisma.storyItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const storyItemWithIdOnly = await prisma.storyItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StoryItemFindManyArgs>(args?: SelectSubset<T, StoryItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoryItemPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a StoryItem.
     * @param {StoryItemCreateArgs} args - Arguments to create a StoryItem.
     * @example
     * // Create one StoryItem
     * const StoryItem = await prisma.storyItem.create({
     *   data: {
     *     // ... data to create a StoryItem
     *   }
     * })
     * 
     */
    create<T extends StoryItemCreateArgs>(args: SelectSubset<T, StoryItemCreateArgs<ExtArgs>>): Prisma__StoryItemClient<$Result.GetResult<Prisma.$StoryItemPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many StoryItems.
     * @param {StoryItemCreateManyArgs} args - Arguments to create many StoryItems.
     * @example
     * // Create many StoryItems
     * const storyItem = await prisma.storyItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StoryItemCreateManyArgs>(args?: SelectSubset<T, StoryItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StoryItems and returns the data saved in the database.
     * @param {StoryItemCreateManyAndReturnArgs} args - Arguments to create many StoryItems.
     * @example
     * // Create many StoryItems
     * const storyItem = await prisma.storyItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StoryItems and only return the `id`
     * const storyItemWithIdOnly = await prisma.storyItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StoryItemCreateManyAndReturnArgs>(args?: SelectSubset<T, StoryItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoryItemPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a StoryItem.
     * @param {StoryItemDeleteArgs} args - Arguments to delete one StoryItem.
     * @example
     * // Delete one StoryItem
     * const StoryItem = await prisma.storyItem.delete({
     *   where: {
     *     // ... filter to delete one StoryItem
     *   }
     * })
     * 
     */
    delete<T extends StoryItemDeleteArgs>(args: SelectSubset<T, StoryItemDeleteArgs<ExtArgs>>): Prisma__StoryItemClient<$Result.GetResult<Prisma.$StoryItemPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one StoryItem.
     * @param {StoryItemUpdateArgs} args - Arguments to update one StoryItem.
     * @example
     * // Update one StoryItem
     * const storyItem = await prisma.storyItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StoryItemUpdateArgs>(args: SelectSubset<T, StoryItemUpdateArgs<ExtArgs>>): Prisma__StoryItemClient<$Result.GetResult<Prisma.$StoryItemPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more StoryItems.
     * @param {StoryItemDeleteManyArgs} args - Arguments to filter StoryItems to delete.
     * @example
     * // Delete a few StoryItems
     * const { count } = await prisma.storyItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StoryItemDeleteManyArgs>(args?: SelectSubset<T, StoryItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StoryItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StoryItems
     * const storyItem = await prisma.storyItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StoryItemUpdateManyArgs>(args: SelectSubset<T, StoryItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StoryItems and returns the data updated in the database.
     * @param {StoryItemUpdateManyAndReturnArgs} args - Arguments to update many StoryItems.
     * @example
     * // Update many StoryItems
     * const storyItem = await prisma.storyItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StoryItems and only return the `id`
     * const storyItemWithIdOnly = await prisma.storyItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StoryItemUpdateManyAndReturnArgs>(args: SelectSubset<T, StoryItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoryItemPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one StoryItem.
     * @param {StoryItemUpsertArgs} args - Arguments to update or create a StoryItem.
     * @example
     * // Update or create a StoryItem
     * const storyItem = await prisma.storyItem.upsert({
     *   create: {
     *     // ... data to create a StoryItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StoryItem we want to update
     *   }
     * })
     */
    upsert<T extends StoryItemUpsertArgs>(args: SelectSubset<T, StoryItemUpsertArgs<ExtArgs>>): Prisma__StoryItemClient<$Result.GetResult<Prisma.$StoryItemPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of StoryItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryItemCountArgs} args - Arguments to filter StoryItems to count.
     * @example
     * // Count the number of StoryItems
     * const count = await prisma.storyItem.count({
     *   where: {
     *     // ... the filter for the StoryItems we want to count
     *   }
     * })
    **/
    count<T extends StoryItemCountArgs>(
      args?: Subset<T, StoryItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StoryItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StoryItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StoryItemAggregateArgs>(args: Subset<T, StoryItemAggregateArgs>): Prisma.PrismaPromise<GetStoryItemAggregateType<T>>

    /**
     * Group by StoryItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StoryItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StoryItemGroupByArgs['orderBy'] }
        : { orderBy?: StoryItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StoryItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStoryItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StoryItem model
   */
  readonly fields: StoryItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StoryItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StoryItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    story<T extends StoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoryDefaultArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StoryItem model
   */ 
  interface StoryItemFieldRefs {
    readonly id: FieldRef<"StoryItem", 'Int'>
    readonly storyId: FieldRef<"StoryItem", 'Int'>
    readonly createdAt: FieldRef<"StoryItem", 'DateTime'>
    readonly source: FieldRef<"StoryItem", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StoryItem findUnique
   */
  export type StoryItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryItem
     */
    select?: StoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryItem
     */
    omit?: StoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryItemInclude<ExtArgs> | null
    /**
     * Filter, which StoryItem to fetch.
     */
    where: StoryItemWhereUniqueInput
  }

  /**
   * StoryItem findUniqueOrThrow
   */
  export type StoryItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryItem
     */
    select?: StoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryItem
     */
    omit?: StoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryItemInclude<ExtArgs> | null
    /**
     * Filter, which StoryItem to fetch.
     */
    where: StoryItemWhereUniqueInput
  }

  /**
   * StoryItem findFirst
   */
  export type StoryItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryItem
     */
    select?: StoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryItem
     */
    omit?: StoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryItemInclude<ExtArgs> | null
    /**
     * Filter, which StoryItem to fetch.
     */
    where?: StoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StoryItems to fetch.
     */
    orderBy?: StoryItemOrderByWithRelationInput | StoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StoryItems.
     */
    cursor?: StoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StoryItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StoryItems.
     */
    distinct?: StoryItemScalarFieldEnum | StoryItemScalarFieldEnum[]
  }

  /**
   * StoryItem findFirstOrThrow
   */
  export type StoryItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryItem
     */
    select?: StoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryItem
     */
    omit?: StoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryItemInclude<ExtArgs> | null
    /**
     * Filter, which StoryItem to fetch.
     */
    where?: StoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StoryItems to fetch.
     */
    orderBy?: StoryItemOrderByWithRelationInput | StoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StoryItems.
     */
    cursor?: StoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StoryItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StoryItems.
     */
    distinct?: StoryItemScalarFieldEnum | StoryItemScalarFieldEnum[]
  }

  /**
   * StoryItem findMany
   */
  export type StoryItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryItem
     */
    select?: StoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryItem
     */
    omit?: StoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryItemInclude<ExtArgs> | null
    /**
     * Filter, which StoryItems to fetch.
     */
    where?: StoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StoryItems to fetch.
     */
    orderBy?: StoryItemOrderByWithRelationInput | StoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StoryItems.
     */
    cursor?: StoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StoryItems.
     */
    skip?: number
    distinct?: StoryItemScalarFieldEnum | StoryItemScalarFieldEnum[]
  }

  /**
   * StoryItem create
   */
  export type StoryItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryItem
     */
    select?: StoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryItem
     */
    omit?: StoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryItemInclude<ExtArgs> | null
    /**
     * The data needed to create a StoryItem.
     */
    data: XOR<StoryItemCreateInput, StoryItemUncheckedCreateInput>
  }

  /**
   * StoryItem createMany
   */
  export type StoryItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StoryItems.
     */
    data: StoryItemCreateManyInput | StoryItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StoryItem createManyAndReturn
   */
  export type StoryItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryItem
     */
    select?: StoryItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StoryItem
     */
    omit?: StoryItemOmit<ExtArgs> | null
    /**
     * The data used to create many StoryItems.
     */
    data: StoryItemCreateManyInput | StoryItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StoryItem update
   */
  export type StoryItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryItem
     */
    select?: StoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryItem
     */
    omit?: StoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryItemInclude<ExtArgs> | null
    /**
     * The data needed to update a StoryItem.
     */
    data: XOR<StoryItemUpdateInput, StoryItemUncheckedUpdateInput>
    /**
     * Choose, which StoryItem to update.
     */
    where: StoryItemWhereUniqueInput
  }

  /**
   * StoryItem updateMany
   */
  export type StoryItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StoryItems.
     */
    data: XOR<StoryItemUpdateManyMutationInput, StoryItemUncheckedUpdateManyInput>
    /**
     * Filter which StoryItems to update
     */
    where?: StoryItemWhereInput
    /**
     * Limit how many StoryItems to update.
     */
    limit?: number
  }

  /**
   * StoryItem updateManyAndReturn
   */
  export type StoryItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryItem
     */
    select?: StoryItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StoryItem
     */
    omit?: StoryItemOmit<ExtArgs> | null
    /**
     * The data used to update StoryItems.
     */
    data: XOR<StoryItemUpdateManyMutationInput, StoryItemUncheckedUpdateManyInput>
    /**
     * Filter which StoryItems to update
     */
    where?: StoryItemWhereInput
    /**
     * Limit how many StoryItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StoryItem upsert
   */
  export type StoryItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryItem
     */
    select?: StoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryItem
     */
    omit?: StoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryItemInclude<ExtArgs> | null
    /**
     * The filter to search for the StoryItem to update in case it exists.
     */
    where: StoryItemWhereUniqueInput
    /**
     * In case the StoryItem found by the `where` argument doesn't exist, create a new StoryItem with this data.
     */
    create: XOR<StoryItemCreateInput, StoryItemUncheckedCreateInput>
    /**
     * In case the StoryItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StoryItemUpdateInput, StoryItemUncheckedUpdateInput>
  }

  /**
   * StoryItem delete
   */
  export type StoryItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryItem
     */
    select?: StoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryItem
     */
    omit?: StoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryItemInclude<ExtArgs> | null
    /**
     * Filter which StoryItem to delete.
     */
    where: StoryItemWhereUniqueInput
  }

  /**
   * StoryItem deleteMany
   */
  export type StoryItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StoryItems to delete
     */
    where?: StoryItemWhereInput
    /**
     * Limit how many StoryItems to delete.
     */
    limit?: number
  }

  /**
   * StoryItem without action
   */
  export type StoryItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryItem
     */
    select?: StoryItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StoryItem
     */
    omit?: StoryItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StoryItemInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    email: 'email',
    password: 'password',
    role: 'role',
    isVerified: 'isVerified',
    isTwoFactorEnabled: 'isTwoFactorEnabled',
    picture: 'picture',
    method: 'method',
    phone: 'phone',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    type: 'type',
    provider: 'provider',
    refreshToken: 'refreshToken',
    accessToken: 'accessToken',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const TokenScalarFieldEnum: {
    id: 'id',
    email: 'email',
    token: 'token',
    type: 'type',
    expiresIn: 'expiresIn',
    createdAt: 'createdAt'
  };

  export type TokenScalarFieldEnum = (typeof TokenScalarFieldEnum)[keyof typeof TokenScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    image: 'image',
    description: 'description',
    categoryId: 'categoryId',
    type: 'type',
    price: 'price'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const ProductVariantScalarFieldEnum: {
    id: 'id',
    parameterId: 'parameterId',
    quantity: 'quantity',
    productId: 'productId',
    image: 'image',
    priceKit: 'priceKit'
  };

  export type ProductVariantScalarFieldEnum = (typeof ProductVariantScalarFieldEnum)[keyof typeof ProductVariantScalarFieldEnum]


  export const SubProductScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    variantId: 'variantId',
    parentVariantId: 'parentVariantId',
    subSizeId: 'subSizeId',
    quantity: 'quantity',
    isReplace: 'isReplace',
    createdAt: 'createdAt'
  };

  export type SubProductScalarFieldEnum = (typeof SubProductScalarFieldEnum)[keyof typeof SubProductScalarFieldEnum]


  export const ProductAttributeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    productVariantId: 'productVariantId',
    variantTypesId: 'variantTypesId'
  };

  export type ProductAttributeScalarFieldEnum = (typeof ProductAttributeScalarFieldEnum)[keyof typeof ProductAttributeScalarFieldEnum]


  export const VariantTypesScalarFieldEnum: {
    id: 'id',
    value: 'value',
    typeProduct: 'typeProduct'
  };

  export type VariantTypesScalarFieldEnum = (typeof VariantTypesScalarFieldEnum)[keyof typeof VariantTypesScalarFieldEnum]


  export const ParametersScalarFieldEnum: {
    id: 'id',
    parameter: 'parameter'
  };

  export type ParametersScalarFieldEnum = (typeof ParametersScalarFieldEnum)[keyof typeof ParametersScalarFieldEnum]


  export const ProportionsScalarFieldEnum: {
    id: 'id',
    value: 'value'
  };

  export type ProportionsScalarFieldEnum = (typeof ProportionsScalarFieldEnum)[keyof typeof ProportionsScalarFieldEnum]


  export const SizesScalarFieldEnum: {
    id: 'id',
    proportionId: 'proportionId',
    price: 'price',
    weight: 'weight',
    productVariantId: 'productVariantId',
    quantity: 'quantity'
  };

  export type SizesScalarFieldEnum = (typeof SizesScalarFieldEnum)[keyof typeof SizesScalarFieldEnum]


  export const IngredientScalarFieldEnum: {
    id: 'id',
    name: 'name',
    price: 'price',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    image: 'image'
  };

  export type IngredientScalarFieldEnum = (typeof IngredientScalarFieldEnum)[keyof typeof IngredientScalarFieldEnum]


  export const CartScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    totalAmount: 'totalAmount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    amountGoods: 'amountGoods'
  };

  export type CartScalarFieldEnum = (typeof CartScalarFieldEnum)[keyof typeof CartScalarFieldEnum]


  export const CartItemScalarFieldEnum: {
    id: 'id',
    cartId: 'cartId',
    productVariantId: 'productVariantId',
    productId: 'productId',
    sizeId: 'sizeId',
    quantity: 'quantity',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CartItemScalarFieldEnum = (typeof CartItemScalarFieldEnum)[keyof typeof CartItemScalarFieldEnum]


  export const CartSubProductScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    subProductId: 'subProductId',
    sizeId: 'sizeId',
    variantId: 'variantId',
    cartItemId: 'cartItemId',
    index: 'index'
  };

  export type CartSubProductScalarFieldEnum = (typeof CartSubProductScalarFieldEnum)[keyof typeof CartSubProductScalarFieldEnum]


  export const OrderScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    totalAmount: 'totalAmount',
    status: 'status',
    paymentId: 'paymentId',
    email: 'email',
    phone: 'phone',
    address: 'address',
    comment: 'comment',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    firstName: 'firstName',
    items: 'items'
  };

  export type OrderScalarFieldEnum = (typeof OrderScalarFieldEnum)[keyof typeof OrderScalarFieldEnum]


  export const DeliveryAddressScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    address: 'address',
    isDefault: 'isDefault'
  };

  export type DeliveryAddressScalarFieldEnum = (typeof DeliveryAddressScalarFieldEnum)[keyof typeof DeliveryAddressScalarFieldEnum]


  export const VerificationCodeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    code: 'code',
    createdAt: 'createdAt'
  };

  export type VerificationCodeScalarFieldEnum = (typeof VerificationCodeScalarFieldEnum)[keyof typeof VerificationCodeScalarFieldEnum]


  export const StoryScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    previewImage: 'previewImage'
  };

  export type StoryScalarFieldEnum = (typeof StoryScalarFieldEnum)[keyof typeof StoryScalarFieldEnum]


  export const StoryItemScalarFieldEnum: {
    id: 'id',
    storyId: 'storyId',
    createdAt: 'createdAt',
    source: 'source'
  };

  export type StoryItemScalarFieldEnum = (typeof StoryItemScalarFieldEnum)[keyof typeof StoryItemScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'AuthMethod'
   */
  export type EnumAuthMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuthMethod'>
    


  /**
   * Reference to a field of type 'AuthMethod[]'
   */
  export type ListEnumAuthMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuthMethod[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'TokenType'
   */
  export type EnumTokenTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TokenType'>
    


  /**
   * Reference to a field of type 'TokenType[]'
   */
  export type ListEnumTokenTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TokenType[]'>
    


  /**
   * Reference to a field of type 'TypeProduct'
   */
  export type EnumTypeProductFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TypeProduct'>
    


  /**
   * Reference to a field of type 'TypeProduct[]'
   */
  export type ListEnumTypeProductFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TypeProduct[]'>
    


  /**
   * Reference to a field of type 'OrderStatus'
   */
  export type EnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus'>
    


  /**
   * Reference to a field of type 'OrderStatus[]'
   */
  export type ListEnumOrderStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrderStatus[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    fullName?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleNullableFilter<"User"> | $Enums.UserRole | null
    isVerified?: BoolFilter<"User"> | boolean
    isTwoFactorEnabled?: BoolFilter<"User"> | boolean
    picture?: StringNullableFilter<"User"> | string | null
    method?: EnumAuthMethodFilter<"User"> | $Enums.AuthMethod
    phone?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    cart?: XOR<CartNullableScalarRelationFilter, CartWhereInput> | null
    orders?: OrderListRelationFilter
    verificationCode?: XOR<VerificationCodeNullableScalarRelationFilter, VerificationCodeWhereInput> | null
    deliveryAddress?: DeliveryAddressListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrderInput | SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    isTwoFactorEnabled?: SortOrder
    picture?: SortOrderInput | SortOrder
    method?: SortOrder
    phone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    cart?: CartOrderByWithRelationInput
    orders?: OrderOrderByRelationAggregateInput
    verificationCode?: VerificationCodeOrderByWithRelationInput
    deliveryAddress?: DeliveryAddressOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    fullName?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleNullableFilter<"User"> | $Enums.UserRole | null
    isVerified?: BoolFilter<"User"> | boolean
    isTwoFactorEnabled?: BoolFilter<"User"> | boolean
    picture?: StringNullableFilter<"User"> | string | null
    method?: EnumAuthMethodFilter<"User"> | $Enums.AuthMethod
    phone?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    cart?: XOR<CartNullableScalarRelationFilter, CartWhereInput> | null
    orders?: OrderListRelationFilter
    verificationCode?: XOR<VerificationCodeNullableScalarRelationFilter, VerificationCodeWhereInput> | null
    deliveryAddress?: DeliveryAddressListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrderInput | SortOrder
    email?: SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    isTwoFactorEnabled?: SortOrder
    picture?: SortOrderInput | SortOrder
    method?: SortOrder
    phone?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    fullName?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleNullableWithAggregatesFilter<"User"> | $Enums.UserRole | null
    isVerified?: BoolWithAggregatesFilter<"User"> | boolean
    isTwoFactorEnabled?: BoolWithAggregatesFilter<"User"> | boolean
    picture?: StringNullableWithAggregatesFilter<"User"> | string | null
    method?: EnumAuthMethodWithAggregatesFilter<"User"> | $Enums.AuthMethod
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    refreshToken?: StringNullableFilter<"Account"> | string | null
    accessToken?: StringNullableFilter<"Account"> | string | null
    expiresAt?: IntFilter<"Account"> | number
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    userId?: IntNullableFilter<"Account"> | number | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    accessToken?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    refreshToken?: StringNullableFilter<"Account"> | string | null
    accessToken?: StringNullableFilter<"Account"> | string | null
    expiresAt?: IntFilter<"Account"> | number
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    userId?: IntNullableFilter<"Account"> | number | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    accessToken?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    refreshToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    accessToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expiresAt?: IntWithAggregatesFilter<"Account"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    userId?: IntNullableWithAggregatesFilter<"Account"> | number | null
  }

  export type TokenWhereInput = {
    AND?: TokenWhereInput | TokenWhereInput[]
    OR?: TokenWhereInput[]
    NOT?: TokenWhereInput | TokenWhereInput[]
    id?: StringFilter<"Token"> | string
    email?: StringFilter<"Token"> | string
    token?: StringFilter<"Token"> | string
    type?: EnumTokenTypeFilter<"Token"> | $Enums.TokenType
    expiresIn?: DateTimeFilter<"Token"> | Date | string
    createdAt?: DateTimeFilter<"Token"> | Date | string
  }

  export type TokenOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    type?: SortOrder
    expiresIn?: SortOrder
    createdAt?: SortOrder
  }

  export type TokenWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: TokenWhereInput | TokenWhereInput[]
    OR?: TokenWhereInput[]
    NOT?: TokenWhereInput | TokenWhereInput[]
    email?: StringFilter<"Token"> | string
    type?: EnumTokenTypeFilter<"Token"> | $Enums.TokenType
    expiresIn?: DateTimeFilter<"Token"> | Date | string
    createdAt?: DateTimeFilter<"Token"> | Date | string
  }, "id" | "token">

  export type TokenOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    type?: SortOrder
    expiresIn?: SortOrder
    createdAt?: SortOrder
    _count?: TokenCountOrderByAggregateInput
    _max?: TokenMaxOrderByAggregateInput
    _min?: TokenMinOrderByAggregateInput
  }

  export type TokenScalarWhereWithAggregatesInput = {
    AND?: TokenScalarWhereWithAggregatesInput | TokenScalarWhereWithAggregatesInput[]
    OR?: TokenScalarWhereWithAggregatesInput[]
    NOT?: TokenScalarWhereWithAggregatesInput | TokenScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Token"> | string
    email?: StringWithAggregatesFilter<"Token"> | string
    token?: StringWithAggregatesFilter<"Token"> | string
    type?: EnumTokenTypeWithAggregatesFilter<"Token"> | $Enums.TokenType
    expiresIn?: DateTimeWithAggregatesFilter<"Token"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Token"> | Date | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    slug?: StringFilter<"Category"> | string
    type?: EnumTypeProductFilter<"Category"> | $Enums.TypeProduct
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    parameters?: ParametersListRelationFilter
    proportions?: ProportionsListRelationFilter
    ingredients?: IngredientListRelationFilter
    products?: ProductListRelationFilter
    variantTypes?: VariantTypesListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parameters?: ParametersOrderByRelationAggregateInput
    proportions?: ProportionsOrderByRelationAggregateInput
    ingredients?: IngredientOrderByRelationAggregateInput
    products?: ProductOrderByRelationAggregateInput
    variantTypes?: VariantTypesOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    slug?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    type?: EnumTypeProductFilter<"Category"> | $Enums.TypeProduct
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    parameters?: ParametersListRelationFilter
    proportions?: ProportionsListRelationFilter
    ingredients?: IngredientListRelationFilter
    products?: ProductListRelationFilter
    variantTypes?: VariantTypesListRelationFilter
  }, "id" | "name" | "slug">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Category"> | number
    name?: StringWithAggregatesFilter<"Category"> | string
    slug?: StringWithAggregatesFilter<"Category"> | string
    type?: EnumTypeProductWithAggregatesFilter<"Category"> | $Enums.TypeProduct
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: IntFilter<"Product"> | number
    name?: StringFilter<"Product"> | string
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    image?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    categoryId?: IntFilter<"Product"> | number
    type?: EnumTypeProductFilter<"Product"> | $Enums.TypeProduct
    price?: IntNullableFilter<"Product"> | number | null
    ingredients?: IngredientListRelationFilter
    CartItem?: CartItemListRelationFilter
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    productVariant?: ProductVariantListRelationFilter
    subProduct?: SubProductListRelationFilter
    CartSubProduct?: CartSubProductListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    image?: SortOrder
    description?: SortOrderInput | SortOrder
    categoryId?: SortOrder
    type?: SortOrder
    price?: SortOrderInput | SortOrder
    ingredients?: IngredientOrderByRelationAggregateInput
    CartItem?: CartItemOrderByRelationAggregateInput
    category?: CategoryOrderByWithRelationInput
    productVariant?: ProductVariantOrderByRelationAggregateInput
    subProduct?: SubProductOrderByRelationAggregateInput
    CartSubProduct?: CartSubProductOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    name?: StringFilter<"Product"> | string
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    image?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    categoryId?: IntFilter<"Product"> | number
    type?: EnumTypeProductFilter<"Product"> | $Enums.TypeProduct
    price?: IntNullableFilter<"Product"> | number | null
    ingredients?: IngredientListRelationFilter
    CartItem?: CartItemListRelationFilter
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    productVariant?: ProductVariantListRelationFilter
    subProduct?: SubProductListRelationFilter
    CartSubProduct?: CartSubProductListRelationFilter
  }, "id">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    image?: SortOrder
    description?: SortOrderInput | SortOrder
    categoryId?: SortOrder
    type?: SortOrder
    price?: SortOrderInput | SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Product"> | number
    name?: StringWithAggregatesFilter<"Product"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    image?: StringWithAggregatesFilter<"Product"> | string
    description?: StringNullableWithAggregatesFilter<"Product"> | string | null
    categoryId?: IntWithAggregatesFilter<"Product"> | number
    type?: EnumTypeProductWithAggregatesFilter<"Product"> | $Enums.TypeProduct
    price?: IntNullableWithAggregatesFilter<"Product"> | number | null
  }

  export type ProductVariantWhereInput = {
    AND?: ProductVariantWhereInput | ProductVariantWhereInput[]
    OR?: ProductVariantWhereInput[]
    NOT?: ProductVariantWhereInput | ProductVariantWhereInput[]
    id?: IntFilter<"ProductVariant"> | number
    parameterId?: IntNullableFilter<"ProductVariant"> | number | null
    quantity?: IntNullableFilter<"ProductVariant"> | number | null
    productId?: IntFilter<"ProductVariant"> | number
    image?: StringFilter<"ProductVariant"> | string
    priceKit?: IntNullableFilter<"ProductVariant"> | number | null
    parameter?: XOR<ParametersNullableScalarRelationFilter, ParametersWhereInput> | null
    sizes?: SizesListRelationFilter
    productAttribute?: XOR<ProductAttributeNullableScalarRelationFilter, ProductAttributeWhereInput> | null
    Product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    subProduct?: SubProductListRelationFilter
    parentSubProduct?: SubProductListRelationFilter
    CartItem?: CartItemListRelationFilter
    CartSubProduct?: CartSubProductListRelationFilter
  }

  export type ProductVariantOrderByWithRelationInput = {
    id?: SortOrder
    parameterId?: SortOrderInput | SortOrder
    quantity?: SortOrderInput | SortOrder
    productId?: SortOrder
    image?: SortOrder
    priceKit?: SortOrderInput | SortOrder
    parameter?: ParametersOrderByWithRelationInput
    sizes?: SizesOrderByRelationAggregateInput
    productAttribute?: ProductAttributeOrderByWithRelationInput
    Product?: ProductOrderByWithRelationInput
    subProduct?: SubProductOrderByRelationAggregateInput
    parentSubProduct?: SubProductOrderByRelationAggregateInput
    CartItem?: CartItemOrderByRelationAggregateInput
    CartSubProduct?: CartSubProductOrderByRelationAggregateInput
  }

  export type ProductVariantWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProductVariantWhereInput | ProductVariantWhereInput[]
    OR?: ProductVariantWhereInput[]
    NOT?: ProductVariantWhereInput | ProductVariantWhereInput[]
    parameterId?: IntNullableFilter<"ProductVariant"> | number | null
    quantity?: IntNullableFilter<"ProductVariant"> | number | null
    productId?: IntFilter<"ProductVariant"> | number
    image?: StringFilter<"ProductVariant"> | string
    priceKit?: IntNullableFilter<"ProductVariant"> | number | null
    parameter?: XOR<ParametersNullableScalarRelationFilter, ParametersWhereInput> | null
    sizes?: SizesListRelationFilter
    productAttribute?: XOR<ProductAttributeNullableScalarRelationFilter, ProductAttributeWhereInput> | null
    Product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    subProduct?: SubProductListRelationFilter
    parentSubProduct?: SubProductListRelationFilter
    CartItem?: CartItemListRelationFilter
    CartSubProduct?: CartSubProductListRelationFilter
  }, "id">

  export type ProductVariantOrderByWithAggregationInput = {
    id?: SortOrder
    parameterId?: SortOrderInput | SortOrder
    quantity?: SortOrderInput | SortOrder
    productId?: SortOrder
    image?: SortOrder
    priceKit?: SortOrderInput | SortOrder
    _count?: ProductVariantCountOrderByAggregateInput
    _avg?: ProductVariantAvgOrderByAggregateInput
    _max?: ProductVariantMaxOrderByAggregateInput
    _min?: ProductVariantMinOrderByAggregateInput
    _sum?: ProductVariantSumOrderByAggregateInput
  }

  export type ProductVariantScalarWhereWithAggregatesInput = {
    AND?: ProductVariantScalarWhereWithAggregatesInput | ProductVariantScalarWhereWithAggregatesInput[]
    OR?: ProductVariantScalarWhereWithAggregatesInput[]
    NOT?: ProductVariantScalarWhereWithAggregatesInput | ProductVariantScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProductVariant"> | number
    parameterId?: IntNullableWithAggregatesFilter<"ProductVariant"> | number | null
    quantity?: IntNullableWithAggregatesFilter<"ProductVariant"> | number | null
    productId?: IntWithAggregatesFilter<"ProductVariant"> | number
    image?: StringWithAggregatesFilter<"ProductVariant"> | string
    priceKit?: IntNullableWithAggregatesFilter<"ProductVariant"> | number | null
  }

  export type SubProductWhereInput = {
    AND?: SubProductWhereInput | SubProductWhereInput[]
    OR?: SubProductWhereInput[]
    NOT?: SubProductWhereInput | SubProductWhereInput[]
    id?: IntFilter<"SubProduct"> | number
    productId?: IntFilter<"SubProduct"> | number
    variantId?: IntFilter<"SubProduct"> | number
    parentVariantId?: IntFilter<"SubProduct"> | number
    subSizeId?: IntFilter<"SubProduct"> | number
    quantity?: IntNullableFilter<"SubProduct"> | number | null
    isReplace?: BoolFilter<"SubProduct"> | boolean
    createdAt?: DateTimeFilter<"SubProduct"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    variant?: XOR<ProductVariantScalarRelationFilter, ProductVariantWhereInput>
    parentVariant?: XOR<ProductVariantScalarRelationFilter, ProductVariantWhereInput>
    size?: XOR<SizesScalarRelationFilter, SizesWhereInput>
  }

  export type SubProductOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    variantId?: SortOrder
    parentVariantId?: SortOrder
    subSizeId?: SortOrder
    quantity?: SortOrderInput | SortOrder
    isReplace?: SortOrder
    createdAt?: SortOrder
    product?: ProductOrderByWithRelationInput
    variant?: ProductVariantOrderByWithRelationInput
    parentVariant?: ProductVariantOrderByWithRelationInput
    size?: SizesOrderByWithRelationInput
  }

  export type SubProductWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SubProductWhereInput | SubProductWhereInput[]
    OR?: SubProductWhereInput[]
    NOT?: SubProductWhereInput | SubProductWhereInput[]
    productId?: IntFilter<"SubProduct"> | number
    variantId?: IntFilter<"SubProduct"> | number
    parentVariantId?: IntFilter<"SubProduct"> | number
    subSizeId?: IntFilter<"SubProduct"> | number
    quantity?: IntNullableFilter<"SubProduct"> | number | null
    isReplace?: BoolFilter<"SubProduct"> | boolean
    createdAt?: DateTimeFilter<"SubProduct"> | Date | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    variant?: XOR<ProductVariantScalarRelationFilter, ProductVariantWhereInput>
    parentVariant?: XOR<ProductVariantScalarRelationFilter, ProductVariantWhereInput>
    size?: XOR<SizesScalarRelationFilter, SizesWhereInput>
  }, "id">

  export type SubProductOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    variantId?: SortOrder
    parentVariantId?: SortOrder
    subSizeId?: SortOrder
    quantity?: SortOrderInput | SortOrder
    isReplace?: SortOrder
    createdAt?: SortOrder
    _count?: SubProductCountOrderByAggregateInput
    _avg?: SubProductAvgOrderByAggregateInput
    _max?: SubProductMaxOrderByAggregateInput
    _min?: SubProductMinOrderByAggregateInput
    _sum?: SubProductSumOrderByAggregateInput
  }

  export type SubProductScalarWhereWithAggregatesInput = {
    AND?: SubProductScalarWhereWithAggregatesInput | SubProductScalarWhereWithAggregatesInput[]
    OR?: SubProductScalarWhereWithAggregatesInput[]
    NOT?: SubProductScalarWhereWithAggregatesInput | SubProductScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SubProduct"> | number
    productId?: IntWithAggregatesFilter<"SubProduct"> | number
    variantId?: IntWithAggregatesFilter<"SubProduct"> | number
    parentVariantId?: IntWithAggregatesFilter<"SubProduct"> | number
    subSizeId?: IntWithAggregatesFilter<"SubProduct"> | number
    quantity?: IntNullableWithAggregatesFilter<"SubProduct"> | number | null
    isReplace?: BoolWithAggregatesFilter<"SubProduct"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"SubProduct"> | Date | string
  }

  export type ProductAttributeWhereInput = {
    AND?: ProductAttributeWhereInput | ProductAttributeWhereInput[]
    OR?: ProductAttributeWhereInput[]
    NOT?: ProductAttributeWhereInput | ProductAttributeWhereInput[]
    id?: IntFilter<"ProductAttribute"> | number
    name?: StringNullableFilter<"ProductAttribute"> | string | null
    productVariantId?: IntFilter<"ProductAttribute"> | number
    variantTypesId?: IntNullableFilter<"ProductAttribute"> | number | null
    productVariant?: XOR<ProductVariantScalarRelationFilter, ProductVariantWhereInput>
    variantTypes?: XOR<VariantTypesNullableScalarRelationFilter, VariantTypesWhereInput> | null
  }

  export type ProductAttributeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    productVariantId?: SortOrder
    variantTypesId?: SortOrderInput | SortOrder
    productVariant?: ProductVariantOrderByWithRelationInput
    variantTypes?: VariantTypesOrderByWithRelationInput
  }

  export type ProductAttributeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    productVariantId?: number
    AND?: ProductAttributeWhereInput | ProductAttributeWhereInput[]
    OR?: ProductAttributeWhereInput[]
    NOT?: ProductAttributeWhereInput | ProductAttributeWhereInput[]
    name?: StringNullableFilter<"ProductAttribute"> | string | null
    variantTypesId?: IntNullableFilter<"ProductAttribute"> | number | null
    productVariant?: XOR<ProductVariantScalarRelationFilter, ProductVariantWhereInput>
    variantTypes?: XOR<VariantTypesNullableScalarRelationFilter, VariantTypesWhereInput> | null
  }, "id" | "productVariantId">

  export type ProductAttributeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    productVariantId?: SortOrder
    variantTypesId?: SortOrderInput | SortOrder
    _count?: ProductAttributeCountOrderByAggregateInput
    _avg?: ProductAttributeAvgOrderByAggregateInput
    _max?: ProductAttributeMaxOrderByAggregateInput
    _min?: ProductAttributeMinOrderByAggregateInput
    _sum?: ProductAttributeSumOrderByAggregateInput
  }

  export type ProductAttributeScalarWhereWithAggregatesInput = {
    AND?: ProductAttributeScalarWhereWithAggregatesInput | ProductAttributeScalarWhereWithAggregatesInput[]
    OR?: ProductAttributeScalarWhereWithAggregatesInput[]
    NOT?: ProductAttributeScalarWhereWithAggregatesInput | ProductAttributeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProductAttribute"> | number
    name?: StringNullableWithAggregatesFilter<"ProductAttribute"> | string | null
    productVariantId?: IntWithAggregatesFilter<"ProductAttribute"> | number
    variantTypesId?: IntNullableWithAggregatesFilter<"ProductAttribute"> | number | null
  }

  export type VariantTypesWhereInput = {
    AND?: VariantTypesWhereInput | VariantTypesWhereInput[]
    OR?: VariantTypesWhereInput[]
    NOT?: VariantTypesWhereInput | VariantTypesWhereInput[]
    id?: IntFilter<"VariantTypes"> | number
    value?: StringFilter<"VariantTypes"> | string
    typeProduct?: EnumTypeProductFilter<"VariantTypes"> | $Enums.TypeProduct
    categories?: CategoryListRelationFilter
    productAttribute?: ProductAttributeListRelationFilter
  }

  export type VariantTypesOrderByWithRelationInput = {
    id?: SortOrder
    value?: SortOrder
    typeProduct?: SortOrder
    categories?: CategoryOrderByRelationAggregateInput
    productAttribute?: ProductAttributeOrderByRelationAggregateInput
  }

  export type VariantTypesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    value?: string
    AND?: VariantTypesWhereInput | VariantTypesWhereInput[]
    OR?: VariantTypesWhereInput[]
    NOT?: VariantTypesWhereInput | VariantTypesWhereInput[]
    typeProduct?: EnumTypeProductFilter<"VariantTypes"> | $Enums.TypeProduct
    categories?: CategoryListRelationFilter
    productAttribute?: ProductAttributeListRelationFilter
  }, "id" | "value">

  export type VariantTypesOrderByWithAggregationInput = {
    id?: SortOrder
    value?: SortOrder
    typeProduct?: SortOrder
    _count?: VariantTypesCountOrderByAggregateInput
    _avg?: VariantTypesAvgOrderByAggregateInput
    _max?: VariantTypesMaxOrderByAggregateInput
    _min?: VariantTypesMinOrderByAggregateInput
    _sum?: VariantTypesSumOrderByAggregateInput
  }

  export type VariantTypesScalarWhereWithAggregatesInput = {
    AND?: VariantTypesScalarWhereWithAggregatesInput | VariantTypesScalarWhereWithAggregatesInput[]
    OR?: VariantTypesScalarWhereWithAggregatesInput[]
    NOT?: VariantTypesScalarWhereWithAggregatesInput | VariantTypesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"VariantTypes"> | number
    value?: StringWithAggregatesFilter<"VariantTypes"> | string
    typeProduct?: EnumTypeProductWithAggregatesFilter<"VariantTypes"> | $Enums.TypeProduct
  }

  export type ParametersWhereInput = {
    AND?: ParametersWhereInput | ParametersWhereInput[]
    OR?: ParametersWhereInput[]
    NOT?: ParametersWhereInput | ParametersWhereInput[]
    id?: IntFilter<"Parameters"> | number
    parameter?: StringFilter<"Parameters"> | string
    categories?: CategoryListRelationFilter
    ProductVariant?: ProductVariantListRelationFilter
  }

  export type ParametersOrderByWithRelationInput = {
    id?: SortOrder
    parameter?: SortOrder
    categories?: CategoryOrderByRelationAggregateInput
    ProductVariant?: ProductVariantOrderByRelationAggregateInput
  }

  export type ParametersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ParametersWhereInput | ParametersWhereInput[]
    OR?: ParametersWhereInput[]
    NOT?: ParametersWhereInput | ParametersWhereInput[]
    parameter?: StringFilter<"Parameters"> | string
    categories?: CategoryListRelationFilter
    ProductVariant?: ProductVariantListRelationFilter
  }, "id">

  export type ParametersOrderByWithAggregationInput = {
    id?: SortOrder
    parameter?: SortOrder
    _count?: ParametersCountOrderByAggregateInput
    _avg?: ParametersAvgOrderByAggregateInput
    _max?: ParametersMaxOrderByAggregateInput
    _min?: ParametersMinOrderByAggregateInput
    _sum?: ParametersSumOrderByAggregateInput
  }

  export type ParametersScalarWhereWithAggregatesInput = {
    AND?: ParametersScalarWhereWithAggregatesInput | ParametersScalarWhereWithAggregatesInput[]
    OR?: ParametersScalarWhereWithAggregatesInput[]
    NOT?: ParametersScalarWhereWithAggregatesInput | ParametersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Parameters"> | number
    parameter?: StringWithAggregatesFilter<"Parameters"> | string
  }

  export type ProportionsWhereInput = {
    AND?: ProportionsWhereInput | ProportionsWhereInput[]
    OR?: ProportionsWhereInput[]
    NOT?: ProportionsWhereInput | ProportionsWhereInput[]
    id?: IntFilter<"Proportions"> | number
    value?: StringFilter<"Proportions"> | string
    categories?: CategoryListRelationFilter
    sizes?: SizesListRelationFilter
  }

  export type ProportionsOrderByWithRelationInput = {
    id?: SortOrder
    value?: SortOrder
    categories?: CategoryOrderByRelationAggregateInput
    sizes?: SizesOrderByRelationAggregateInput
  }

  export type ProportionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    value?: string
    AND?: ProportionsWhereInput | ProportionsWhereInput[]
    OR?: ProportionsWhereInput[]
    NOT?: ProportionsWhereInput | ProportionsWhereInput[]
    categories?: CategoryListRelationFilter
    sizes?: SizesListRelationFilter
  }, "id" | "value">

  export type ProportionsOrderByWithAggregationInput = {
    id?: SortOrder
    value?: SortOrder
    _count?: ProportionsCountOrderByAggregateInput
    _avg?: ProportionsAvgOrderByAggregateInput
    _max?: ProportionsMaxOrderByAggregateInput
    _min?: ProportionsMinOrderByAggregateInput
    _sum?: ProportionsSumOrderByAggregateInput
  }

  export type ProportionsScalarWhereWithAggregatesInput = {
    AND?: ProportionsScalarWhereWithAggregatesInput | ProportionsScalarWhereWithAggregatesInput[]
    OR?: ProportionsScalarWhereWithAggregatesInput[]
    NOT?: ProportionsScalarWhereWithAggregatesInput | ProportionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Proportions"> | number
    value?: StringWithAggregatesFilter<"Proportions"> | string
  }

  export type SizesWhereInput = {
    AND?: SizesWhereInput | SizesWhereInput[]
    OR?: SizesWhereInput[]
    NOT?: SizesWhereInput | SizesWhereInput[]
    id?: IntFilter<"Sizes"> | number
    proportionId?: IntFilter<"Sizes"> | number
    price?: IntFilter<"Sizes"> | number
    weight?: StringNullableFilter<"Sizes"> | string | null
    productVariantId?: IntFilter<"Sizes"> | number
    quantity?: IntNullableFilter<"Sizes"> | number | null
    proportion?: XOR<ProportionsScalarRelationFilter, ProportionsWhereInput>
    ingredients?: IngredientListRelationFilter
    productVariant?: XOR<ProductVariantScalarRelationFilter, ProductVariantWhereInput>
    SubProduct?: SubProductListRelationFilter
    CartItem?: CartItemListRelationFilter
    CartSubProduct?: CartSubProductListRelationFilter
  }

  export type SizesOrderByWithRelationInput = {
    id?: SortOrder
    proportionId?: SortOrder
    price?: SortOrder
    weight?: SortOrderInput | SortOrder
    productVariantId?: SortOrder
    quantity?: SortOrderInput | SortOrder
    proportion?: ProportionsOrderByWithRelationInput
    ingredients?: IngredientOrderByRelationAggregateInput
    productVariant?: ProductVariantOrderByWithRelationInput
    SubProduct?: SubProductOrderByRelationAggregateInput
    CartItem?: CartItemOrderByRelationAggregateInput
    CartSubProduct?: CartSubProductOrderByRelationAggregateInput
  }

  export type SizesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SizesWhereInput | SizesWhereInput[]
    OR?: SizesWhereInput[]
    NOT?: SizesWhereInput | SizesWhereInput[]
    proportionId?: IntFilter<"Sizes"> | number
    price?: IntFilter<"Sizes"> | number
    weight?: StringNullableFilter<"Sizes"> | string | null
    productVariantId?: IntFilter<"Sizes"> | number
    quantity?: IntNullableFilter<"Sizes"> | number | null
    proportion?: XOR<ProportionsScalarRelationFilter, ProportionsWhereInput>
    ingredients?: IngredientListRelationFilter
    productVariant?: XOR<ProductVariantScalarRelationFilter, ProductVariantWhereInput>
    SubProduct?: SubProductListRelationFilter
    CartItem?: CartItemListRelationFilter
    CartSubProduct?: CartSubProductListRelationFilter
  }, "id">

  export type SizesOrderByWithAggregationInput = {
    id?: SortOrder
    proportionId?: SortOrder
    price?: SortOrder
    weight?: SortOrderInput | SortOrder
    productVariantId?: SortOrder
    quantity?: SortOrderInput | SortOrder
    _count?: SizesCountOrderByAggregateInput
    _avg?: SizesAvgOrderByAggregateInput
    _max?: SizesMaxOrderByAggregateInput
    _min?: SizesMinOrderByAggregateInput
    _sum?: SizesSumOrderByAggregateInput
  }

  export type SizesScalarWhereWithAggregatesInput = {
    AND?: SizesScalarWhereWithAggregatesInput | SizesScalarWhereWithAggregatesInput[]
    OR?: SizesScalarWhereWithAggregatesInput[]
    NOT?: SizesScalarWhereWithAggregatesInput | SizesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Sizes"> | number
    proportionId?: IntWithAggregatesFilter<"Sizes"> | number
    price?: IntWithAggregatesFilter<"Sizes"> | number
    weight?: StringNullableWithAggregatesFilter<"Sizes"> | string | null
    productVariantId?: IntWithAggregatesFilter<"Sizes"> | number
    quantity?: IntNullableWithAggregatesFilter<"Sizes"> | number | null
  }

  export type IngredientWhereInput = {
    AND?: IngredientWhereInput | IngredientWhereInput[]
    OR?: IngredientWhereInput[]
    NOT?: IngredientWhereInput | IngredientWhereInput[]
    id?: IntFilter<"Ingredient"> | number
    name?: StringFilter<"Ingredient"> | string
    price?: IntFilter<"Ingredient"> | number
    createdAt?: DateTimeFilter<"Ingredient"> | Date | string
    updatedAt?: DateTimeFilter<"Ingredient"> | Date | string
    image?: StringFilter<"Ingredient"> | string
    categories?: CategoryListRelationFilter
    sizes?: SizesListRelationFilter
    product?: ProductListRelationFilter
    cartItems?: CartItemListRelationFilter
  }

  export type IngredientOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    image?: SortOrder
    categories?: CategoryOrderByRelationAggregateInput
    sizes?: SizesOrderByRelationAggregateInput
    product?: ProductOrderByRelationAggregateInput
    cartItems?: CartItemOrderByRelationAggregateInput
  }

  export type IngredientWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: IngredientWhereInput | IngredientWhereInput[]
    OR?: IngredientWhereInput[]
    NOT?: IngredientWhereInput | IngredientWhereInput[]
    price?: IntFilter<"Ingredient"> | number
    createdAt?: DateTimeFilter<"Ingredient"> | Date | string
    updatedAt?: DateTimeFilter<"Ingredient"> | Date | string
    image?: StringFilter<"Ingredient"> | string
    categories?: CategoryListRelationFilter
    sizes?: SizesListRelationFilter
    product?: ProductListRelationFilter
    cartItems?: CartItemListRelationFilter
  }, "id" | "name">

  export type IngredientOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    image?: SortOrder
    _count?: IngredientCountOrderByAggregateInput
    _avg?: IngredientAvgOrderByAggregateInput
    _max?: IngredientMaxOrderByAggregateInput
    _min?: IngredientMinOrderByAggregateInput
    _sum?: IngredientSumOrderByAggregateInput
  }

  export type IngredientScalarWhereWithAggregatesInput = {
    AND?: IngredientScalarWhereWithAggregatesInput | IngredientScalarWhereWithAggregatesInput[]
    OR?: IngredientScalarWhereWithAggregatesInput[]
    NOT?: IngredientScalarWhereWithAggregatesInput | IngredientScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Ingredient"> | number
    name?: StringWithAggregatesFilter<"Ingredient"> | string
    price?: IntWithAggregatesFilter<"Ingredient"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Ingredient"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Ingredient"> | Date | string
    image?: StringWithAggregatesFilter<"Ingredient"> | string
  }

  export type CartWhereInput = {
    AND?: CartWhereInput | CartWhereInput[]
    OR?: CartWhereInput[]
    NOT?: CartWhereInput | CartWhereInput[]
    id?: IntFilter<"Cart"> | number
    userId?: IntFilter<"Cart"> | number
    totalAmount?: IntFilter<"Cart"> | number
    createdAt?: DateTimeFilter<"Cart"> | Date | string
    updatedAt?: DateTimeFilter<"Cart"> | Date | string
    amountGoods?: IntFilter<"Cart"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    items?: CartItemListRelationFilter
  }

  export type CartOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    amountGoods?: SortOrder
    user?: UserOrderByWithRelationInput
    items?: CartItemOrderByRelationAggregateInput
  }

  export type CartWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: CartWhereInput | CartWhereInput[]
    OR?: CartWhereInput[]
    NOT?: CartWhereInput | CartWhereInput[]
    totalAmount?: IntFilter<"Cart"> | number
    createdAt?: DateTimeFilter<"Cart"> | Date | string
    updatedAt?: DateTimeFilter<"Cart"> | Date | string
    amountGoods?: IntFilter<"Cart"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    items?: CartItemListRelationFilter
  }, "id" | "userId">

  export type CartOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    amountGoods?: SortOrder
    _count?: CartCountOrderByAggregateInput
    _avg?: CartAvgOrderByAggregateInput
    _max?: CartMaxOrderByAggregateInput
    _min?: CartMinOrderByAggregateInput
    _sum?: CartSumOrderByAggregateInput
  }

  export type CartScalarWhereWithAggregatesInput = {
    AND?: CartScalarWhereWithAggregatesInput | CartScalarWhereWithAggregatesInput[]
    OR?: CartScalarWhereWithAggregatesInput[]
    NOT?: CartScalarWhereWithAggregatesInput | CartScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Cart"> | number
    userId?: IntWithAggregatesFilter<"Cart"> | number
    totalAmount?: IntWithAggregatesFilter<"Cart"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Cart"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Cart"> | Date | string
    amountGoods?: IntWithAggregatesFilter<"Cart"> | number
  }

  export type CartItemWhereInput = {
    AND?: CartItemWhereInput | CartItemWhereInput[]
    OR?: CartItemWhereInput[]
    NOT?: CartItemWhereInput | CartItemWhereInput[]
    id?: IntFilter<"CartItem"> | number
    cartId?: IntFilter<"CartItem"> | number
    productVariantId?: IntNullableFilter<"CartItem"> | number | null
    productId?: IntFilter<"CartItem"> | number
    sizeId?: IntNullableFilter<"CartItem"> | number | null
    quantity?: IntFilter<"CartItem"> | number
    createdAt?: DateTimeFilter<"CartItem"> | Date | string
    updatedAt?: DateTimeFilter<"CartItem"> | Date | string
    cart?: XOR<CartScalarRelationFilter, CartWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    productVariant?: XOR<ProductVariantNullableScalarRelationFilter, ProductVariantWhereInput> | null
    size?: XOR<SizesNullableScalarRelationFilter, SizesWhereInput> | null
    ingredients?: IngredientListRelationFilter
    cartSubProduct?: CartSubProductListRelationFilter
  }

  export type CartItemOrderByWithRelationInput = {
    id?: SortOrder
    cartId?: SortOrder
    productVariantId?: SortOrderInput | SortOrder
    productId?: SortOrder
    sizeId?: SortOrderInput | SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cart?: CartOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
    productVariant?: ProductVariantOrderByWithRelationInput
    size?: SizesOrderByWithRelationInput
    ingredients?: IngredientOrderByRelationAggregateInput
    cartSubProduct?: CartSubProductOrderByRelationAggregateInput
  }

  export type CartItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CartItemWhereInput | CartItemWhereInput[]
    OR?: CartItemWhereInput[]
    NOT?: CartItemWhereInput | CartItemWhereInput[]
    cartId?: IntFilter<"CartItem"> | number
    productVariantId?: IntNullableFilter<"CartItem"> | number | null
    productId?: IntFilter<"CartItem"> | number
    sizeId?: IntNullableFilter<"CartItem"> | number | null
    quantity?: IntFilter<"CartItem"> | number
    createdAt?: DateTimeFilter<"CartItem"> | Date | string
    updatedAt?: DateTimeFilter<"CartItem"> | Date | string
    cart?: XOR<CartScalarRelationFilter, CartWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    productVariant?: XOR<ProductVariantNullableScalarRelationFilter, ProductVariantWhereInput> | null
    size?: XOR<SizesNullableScalarRelationFilter, SizesWhereInput> | null
    ingredients?: IngredientListRelationFilter
    cartSubProduct?: CartSubProductListRelationFilter
  }, "id">

  export type CartItemOrderByWithAggregationInput = {
    id?: SortOrder
    cartId?: SortOrder
    productVariantId?: SortOrderInput | SortOrder
    productId?: SortOrder
    sizeId?: SortOrderInput | SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CartItemCountOrderByAggregateInput
    _avg?: CartItemAvgOrderByAggregateInput
    _max?: CartItemMaxOrderByAggregateInput
    _min?: CartItemMinOrderByAggregateInput
    _sum?: CartItemSumOrderByAggregateInput
  }

  export type CartItemScalarWhereWithAggregatesInput = {
    AND?: CartItemScalarWhereWithAggregatesInput | CartItemScalarWhereWithAggregatesInput[]
    OR?: CartItemScalarWhereWithAggregatesInput[]
    NOT?: CartItemScalarWhereWithAggregatesInput | CartItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CartItem"> | number
    cartId?: IntWithAggregatesFilter<"CartItem"> | number
    productVariantId?: IntNullableWithAggregatesFilter<"CartItem"> | number | null
    productId?: IntWithAggregatesFilter<"CartItem"> | number
    sizeId?: IntNullableWithAggregatesFilter<"CartItem"> | number | null
    quantity?: IntWithAggregatesFilter<"CartItem"> | number
    createdAt?: DateTimeWithAggregatesFilter<"CartItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CartItem"> | Date | string
  }

  export type CartSubProductWhereInput = {
    AND?: CartSubProductWhereInput | CartSubProductWhereInput[]
    OR?: CartSubProductWhereInput[]
    NOT?: CartSubProductWhereInput | CartSubProductWhereInput[]
    id?: IntFilter<"CartSubProduct"> | number
    createdAt?: DateTimeFilter<"CartSubProduct"> | Date | string
    updatedAt?: DateTimeFilter<"CartSubProduct"> | Date | string
    subProductId?: IntFilter<"CartSubProduct"> | number
    sizeId?: IntFilter<"CartSubProduct"> | number
    variantId?: IntFilter<"CartSubProduct"> | number
    cartItemId?: IntFilter<"CartSubProduct"> | number
    index?: IntFilter<"CartSubProduct"> | number
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    variant?: XOR<ProductVariantScalarRelationFilter, ProductVariantWhereInput>
    size?: XOR<SizesScalarRelationFilter, SizesWhereInput>
    cartItem?: XOR<CartItemScalarRelationFilter, CartItemWhereInput>
  }

  export type CartSubProductOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subProductId?: SortOrder
    sizeId?: SortOrder
    variantId?: SortOrder
    cartItemId?: SortOrder
    index?: SortOrder
    product?: ProductOrderByWithRelationInput
    variant?: ProductVariantOrderByWithRelationInput
    size?: SizesOrderByWithRelationInput
    cartItem?: CartItemOrderByWithRelationInput
  }

  export type CartSubProductWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CartSubProductWhereInput | CartSubProductWhereInput[]
    OR?: CartSubProductWhereInput[]
    NOT?: CartSubProductWhereInput | CartSubProductWhereInput[]
    createdAt?: DateTimeFilter<"CartSubProduct"> | Date | string
    updatedAt?: DateTimeFilter<"CartSubProduct"> | Date | string
    subProductId?: IntFilter<"CartSubProduct"> | number
    sizeId?: IntFilter<"CartSubProduct"> | number
    variantId?: IntFilter<"CartSubProduct"> | number
    cartItemId?: IntFilter<"CartSubProduct"> | number
    index?: IntFilter<"CartSubProduct"> | number
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
    variant?: XOR<ProductVariantScalarRelationFilter, ProductVariantWhereInput>
    size?: XOR<SizesScalarRelationFilter, SizesWhereInput>
    cartItem?: XOR<CartItemScalarRelationFilter, CartItemWhereInput>
  }, "id">

  export type CartSubProductOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subProductId?: SortOrder
    sizeId?: SortOrder
    variantId?: SortOrder
    cartItemId?: SortOrder
    index?: SortOrder
    _count?: CartSubProductCountOrderByAggregateInput
    _avg?: CartSubProductAvgOrderByAggregateInput
    _max?: CartSubProductMaxOrderByAggregateInput
    _min?: CartSubProductMinOrderByAggregateInput
    _sum?: CartSubProductSumOrderByAggregateInput
  }

  export type CartSubProductScalarWhereWithAggregatesInput = {
    AND?: CartSubProductScalarWhereWithAggregatesInput | CartSubProductScalarWhereWithAggregatesInput[]
    OR?: CartSubProductScalarWhereWithAggregatesInput[]
    NOT?: CartSubProductScalarWhereWithAggregatesInput | CartSubProductScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CartSubProduct"> | number
    createdAt?: DateTimeWithAggregatesFilter<"CartSubProduct"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CartSubProduct"> | Date | string
    subProductId?: IntWithAggregatesFilter<"CartSubProduct"> | number
    sizeId?: IntWithAggregatesFilter<"CartSubProduct"> | number
    variantId?: IntWithAggregatesFilter<"CartSubProduct"> | number
    cartItemId?: IntWithAggregatesFilter<"CartSubProduct"> | number
    index?: IntWithAggregatesFilter<"CartSubProduct"> | number
  }

  export type OrderWhereInput = {
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    id?: IntFilter<"Order"> | number
    userId?: IntFilter<"Order"> | number
    totalAmount?: IntFilter<"Order"> | number
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    paymentId?: StringNullableFilter<"Order"> | string | null
    email?: StringFilter<"Order"> | string
    phone?: StringFilter<"Order"> | string
    address?: StringFilter<"Order"> | string
    comment?: StringNullableFilter<"Order"> | string | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    firstName?: StringFilter<"Order"> | string
    items?: JsonFilter<"Order">
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type OrderOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    paymentId?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    items?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type OrderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OrderWhereInput | OrderWhereInput[]
    OR?: OrderWhereInput[]
    NOT?: OrderWhereInput | OrderWhereInput[]
    userId?: IntFilter<"Order"> | number
    totalAmount?: IntFilter<"Order"> | number
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    paymentId?: StringNullableFilter<"Order"> | string | null
    email?: StringFilter<"Order"> | string
    phone?: StringFilter<"Order"> | string
    address?: StringFilter<"Order"> | string
    comment?: StringNullableFilter<"Order"> | string | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    firstName?: StringFilter<"Order"> | string
    items?: JsonFilter<"Order">
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type OrderOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    paymentId?: SortOrderInput | SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    items?: SortOrder
    _count?: OrderCountOrderByAggregateInput
    _avg?: OrderAvgOrderByAggregateInput
    _max?: OrderMaxOrderByAggregateInput
    _min?: OrderMinOrderByAggregateInput
    _sum?: OrderSumOrderByAggregateInput
  }

  export type OrderScalarWhereWithAggregatesInput = {
    AND?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    OR?: OrderScalarWhereWithAggregatesInput[]
    NOT?: OrderScalarWhereWithAggregatesInput | OrderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Order"> | number
    userId?: IntWithAggregatesFilter<"Order"> | number
    totalAmount?: IntWithAggregatesFilter<"Order"> | number
    status?: EnumOrderStatusWithAggregatesFilter<"Order"> | $Enums.OrderStatus
    paymentId?: StringNullableWithAggregatesFilter<"Order"> | string | null
    email?: StringWithAggregatesFilter<"Order"> | string
    phone?: StringWithAggregatesFilter<"Order"> | string
    address?: StringWithAggregatesFilter<"Order"> | string
    comment?: StringNullableWithAggregatesFilter<"Order"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Order"> | Date | string
    firstName?: StringWithAggregatesFilter<"Order"> | string
    items?: JsonWithAggregatesFilter<"Order">
  }

  export type DeliveryAddressWhereInput = {
    AND?: DeliveryAddressWhereInput | DeliveryAddressWhereInput[]
    OR?: DeliveryAddressWhereInput[]
    NOT?: DeliveryAddressWhereInput | DeliveryAddressWhereInput[]
    id?: IntFilter<"DeliveryAddress"> | number
    userId?: IntFilter<"DeliveryAddress"> | number
    address?: StringFilter<"DeliveryAddress"> | string
    isDefault?: BoolFilter<"DeliveryAddress"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type DeliveryAddressOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    isDefault?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type DeliveryAddressWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DeliveryAddressWhereInput | DeliveryAddressWhereInput[]
    OR?: DeliveryAddressWhereInput[]
    NOT?: DeliveryAddressWhereInput | DeliveryAddressWhereInput[]
    userId?: IntFilter<"DeliveryAddress"> | number
    address?: StringFilter<"DeliveryAddress"> | string
    isDefault?: BoolFilter<"DeliveryAddress"> | boolean
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type DeliveryAddressOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    isDefault?: SortOrder
    _count?: DeliveryAddressCountOrderByAggregateInput
    _avg?: DeliveryAddressAvgOrderByAggregateInput
    _max?: DeliveryAddressMaxOrderByAggregateInput
    _min?: DeliveryAddressMinOrderByAggregateInput
    _sum?: DeliveryAddressSumOrderByAggregateInput
  }

  export type DeliveryAddressScalarWhereWithAggregatesInput = {
    AND?: DeliveryAddressScalarWhereWithAggregatesInput | DeliveryAddressScalarWhereWithAggregatesInput[]
    OR?: DeliveryAddressScalarWhereWithAggregatesInput[]
    NOT?: DeliveryAddressScalarWhereWithAggregatesInput | DeliveryAddressScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DeliveryAddress"> | number
    userId?: IntWithAggregatesFilter<"DeliveryAddress"> | number
    address?: StringWithAggregatesFilter<"DeliveryAddress"> | string
    isDefault?: BoolWithAggregatesFilter<"DeliveryAddress"> | boolean
  }

  export type VerificationCodeWhereInput = {
    AND?: VerificationCodeWhereInput | VerificationCodeWhereInput[]
    OR?: VerificationCodeWhereInput[]
    NOT?: VerificationCodeWhereInput | VerificationCodeWhereInput[]
    id?: IntFilter<"VerificationCode"> | number
    userId?: IntFilter<"VerificationCode"> | number
    code?: StringFilter<"VerificationCode"> | string
    createdAt?: DateTimeFilter<"VerificationCode"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type VerificationCodeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type VerificationCodeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    userId_code?: VerificationCodeUserIdCodeCompoundUniqueInput
    AND?: VerificationCodeWhereInput | VerificationCodeWhereInput[]
    OR?: VerificationCodeWhereInput[]
    NOT?: VerificationCodeWhereInput | VerificationCodeWhereInput[]
    code?: StringFilter<"VerificationCode"> | string
    createdAt?: DateTimeFilter<"VerificationCode"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId" | "userId_code">

  export type VerificationCodeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
    _count?: VerificationCodeCountOrderByAggregateInput
    _avg?: VerificationCodeAvgOrderByAggregateInput
    _max?: VerificationCodeMaxOrderByAggregateInput
    _min?: VerificationCodeMinOrderByAggregateInput
    _sum?: VerificationCodeSumOrderByAggregateInput
  }

  export type VerificationCodeScalarWhereWithAggregatesInput = {
    AND?: VerificationCodeScalarWhereWithAggregatesInput | VerificationCodeScalarWhereWithAggregatesInput[]
    OR?: VerificationCodeScalarWhereWithAggregatesInput[]
    NOT?: VerificationCodeScalarWhereWithAggregatesInput | VerificationCodeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"VerificationCode"> | number
    userId?: IntWithAggregatesFilter<"VerificationCode"> | number
    code?: StringWithAggregatesFilter<"VerificationCode"> | string
    createdAt?: DateTimeWithAggregatesFilter<"VerificationCode"> | Date | string
  }

  export type StoryWhereInput = {
    AND?: StoryWhereInput | StoryWhereInput[]
    OR?: StoryWhereInput[]
    NOT?: StoryWhereInput | StoryWhereInput[]
    id?: IntFilter<"Story"> | number
    createdAt?: DateTimeFilter<"Story"> | Date | string
    previewImage?: StringFilter<"Story"> | string
    items?: StoryItemListRelationFilter
  }

  export type StoryOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    previewImage?: SortOrder
    items?: StoryItemOrderByRelationAggregateInput
  }

  export type StoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StoryWhereInput | StoryWhereInput[]
    OR?: StoryWhereInput[]
    NOT?: StoryWhereInput | StoryWhereInput[]
    createdAt?: DateTimeFilter<"Story"> | Date | string
    previewImage?: StringFilter<"Story"> | string
    items?: StoryItemListRelationFilter
  }, "id">

  export type StoryOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    previewImage?: SortOrder
    _count?: StoryCountOrderByAggregateInput
    _avg?: StoryAvgOrderByAggregateInput
    _max?: StoryMaxOrderByAggregateInput
    _min?: StoryMinOrderByAggregateInput
    _sum?: StorySumOrderByAggregateInput
  }

  export type StoryScalarWhereWithAggregatesInput = {
    AND?: StoryScalarWhereWithAggregatesInput | StoryScalarWhereWithAggregatesInput[]
    OR?: StoryScalarWhereWithAggregatesInput[]
    NOT?: StoryScalarWhereWithAggregatesInput | StoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Story"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Story"> | Date | string
    previewImage?: StringWithAggregatesFilter<"Story"> | string
  }

  export type StoryItemWhereInput = {
    AND?: StoryItemWhereInput | StoryItemWhereInput[]
    OR?: StoryItemWhereInput[]
    NOT?: StoryItemWhereInput | StoryItemWhereInput[]
    id?: IntFilter<"StoryItem"> | number
    storyId?: IntFilter<"StoryItem"> | number
    createdAt?: DateTimeFilter<"StoryItem"> | Date | string
    source?: StringFilter<"StoryItem"> | string
    story?: XOR<StoryScalarRelationFilter, StoryWhereInput>
  }

  export type StoryItemOrderByWithRelationInput = {
    id?: SortOrder
    storyId?: SortOrder
    createdAt?: SortOrder
    source?: SortOrder
    story?: StoryOrderByWithRelationInput
  }

  export type StoryItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StoryItemWhereInput | StoryItemWhereInput[]
    OR?: StoryItemWhereInput[]
    NOT?: StoryItemWhereInput | StoryItemWhereInput[]
    storyId?: IntFilter<"StoryItem"> | number
    createdAt?: DateTimeFilter<"StoryItem"> | Date | string
    source?: StringFilter<"StoryItem"> | string
    story?: XOR<StoryScalarRelationFilter, StoryWhereInput>
  }, "id">

  export type StoryItemOrderByWithAggregationInput = {
    id?: SortOrder
    storyId?: SortOrder
    createdAt?: SortOrder
    source?: SortOrder
    _count?: StoryItemCountOrderByAggregateInput
    _avg?: StoryItemAvgOrderByAggregateInput
    _max?: StoryItemMaxOrderByAggregateInput
    _min?: StoryItemMinOrderByAggregateInput
    _sum?: StoryItemSumOrderByAggregateInput
  }

  export type StoryItemScalarWhereWithAggregatesInput = {
    AND?: StoryItemScalarWhereWithAggregatesInput | StoryItemScalarWhereWithAggregatesInput[]
    OR?: StoryItemScalarWhereWithAggregatesInput[]
    NOT?: StoryItemScalarWhereWithAggregatesInput | StoryItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StoryItem"> | number
    storyId?: IntWithAggregatesFilter<"StoryItem"> | number
    createdAt?: DateTimeWithAggregatesFilter<"StoryItem"> | Date | string
    source?: StringWithAggregatesFilter<"StoryItem"> | string
  }

  export type UserCreateInput = {
    fullName?: string | null
    email: string
    password?: string | null
    role?: $Enums.UserRole | null
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    picture?: string | null
    method: $Enums.AuthMethod
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    cart?: CartCreateNestedOneWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    verificationCode?: VerificationCodeCreateNestedOneWithoutUserInput
    deliveryAddress?: DeliveryAddressCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    fullName?: string | null
    email: string
    password?: string | null
    role?: $Enums.UserRole | null
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    picture?: string | null
    method: $Enums.AuthMethod
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    cart?: CartUncheckedCreateNestedOneWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    verificationCode?: VerificationCodeUncheckedCreateNestedOneWithoutUserInput
    deliveryAddress?: DeliveryAddressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    cart?: CartUpdateOneWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    verificationCode?: VerificationCodeUpdateOneWithoutUserNestedInput
    deliveryAddress?: DeliveryAddressUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    cart?: CartUncheckedUpdateOneWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    verificationCode?: VerificationCodeUncheckedUpdateOneWithoutUserNestedInput
    deliveryAddress?: DeliveryAddressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    fullName?: string | null
    email: string
    password?: string | null
    role?: $Enums.UserRole | null
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    picture?: string | null
    method: $Enums.AuthMethod
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    refreshToken?: string | null
    accessToken?: string | null
    expiresAt: number
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    type: string
    provider: string
    refreshToken?: string | null
    accessToken?: string | null
    expiresAt: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: number | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AccountCreateManyInput = {
    id?: string
    type: string
    provider: string
    refreshToken?: string | null
    accessToken?: string | null
    expiresAt: number
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: number | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TokenCreateInput = {
    id?: string
    email: string
    token: string
    type: $Enums.TokenType
    expiresIn: Date | string
    createdAt?: Date | string
  }

  export type TokenUncheckedCreateInput = {
    id?: string
    email: string
    token: string
    type: $Enums.TokenType
    expiresIn: Date | string
    createdAt?: Date | string
  }

  export type TokenUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenCreateManyInput = {
    id?: string
    email: string
    token: string
    type: $Enums.TokenType
    expiresIn: Date | string
    createdAt?: Date | string
  }

  export type TokenUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TokenUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    type?: EnumTokenTypeFieldUpdateOperationsInput | $Enums.TokenType
    expiresIn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateInput = {
    name: string
    slug: string
    type: $Enums.TypeProduct
    createdAt?: Date | string
    updatedAt?: Date | string
    parameters?: ParametersCreateNestedManyWithoutCategoriesInput
    proportions?: ProportionsCreateNestedManyWithoutCategoriesInput
    ingredients?: IngredientCreateNestedManyWithoutCategoriesInput
    products?: ProductCreateNestedManyWithoutCategoryInput
    variantTypes?: VariantTypesCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    name: string
    slug: string
    type: $Enums.TypeProduct
    createdAt?: Date | string
    updatedAt?: Date | string
    parameters?: ParametersUncheckedCreateNestedManyWithoutCategoriesInput
    proportions?: ProportionsUncheckedCreateNestedManyWithoutCategoriesInput
    ingredients?: IngredientUncheckedCreateNestedManyWithoutCategoriesInput
    products?: ProductUncheckedCreateNestedManyWithoutCategoryInput
    variantTypes?: VariantTypesUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parameters?: ParametersUpdateManyWithoutCategoriesNestedInput
    proportions?: ProportionsUpdateManyWithoutCategoriesNestedInput
    ingredients?: IngredientUpdateManyWithoutCategoriesNestedInput
    products?: ProductUpdateManyWithoutCategoryNestedInput
    variantTypes?: VariantTypesUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parameters?: ParametersUncheckedUpdateManyWithoutCategoriesNestedInput
    proportions?: ProportionsUncheckedUpdateManyWithoutCategoriesNestedInput
    ingredients?: IngredientUncheckedUpdateManyWithoutCategoriesNestedInput
    products?: ProductUncheckedUpdateManyWithoutCategoryNestedInput
    variantTypes?: VariantTypesUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    name: string
    slug: string
    type: $Enums.TypeProduct
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    description?: string | null
    type: $Enums.TypeProduct
    price?: number | null
    ingredients?: IngredientCreateNestedManyWithoutProductInput
    CartItem?: CartItemCreateNestedManyWithoutProductInput
    category: CategoryCreateNestedOneWithoutProductsInput
    productVariant?: ProductVariantCreateNestedManyWithoutProductInput
    subProduct?: SubProductCreateNestedManyWithoutProductInput
    CartSubProduct?: CartSubProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    description?: string | null
    categoryId: number
    type: $Enums.TypeProduct
    price?: number | null
    ingredients?: IngredientUncheckedCreateNestedManyWithoutProductInput
    CartItem?: CartItemUncheckedCreateNestedManyWithoutProductInput
    productVariant?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    subProduct?: SubProductUncheckedCreateNestedManyWithoutProductInput
    CartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    price?: NullableIntFieldUpdateOperationsInput | number | null
    ingredients?: IngredientUpdateManyWithoutProductNestedInput
    CartItem?: CartItemUpdateManyWithoutProductNestedInput
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    productVariant?: ProductVariantUpdateManyWithoutProductNestedInput
    subProduct?: SubProductUpdateManyWithoutProductNestedInput
    CartSubProduct?: CartSubProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    price?: NullableIntFieldUpdateOperationsInput | number | null
    ingredients?: IngredientUncheckedUpdateManyWithoutProductNestedInput
    CartItem?: CartItemUncheckedUpdateManyWithoutProductNestedInput
    productVariant?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    subProduct?: SubProductUncheckedUpdateManyWithoutProductNestedInput
    CartSubProduct?: CartSubProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    description?: string | null
    categoryId: number
    type: $Enums.TypeProduct
    price?: number | null
  }

  export type ProductUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    price?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    price?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProductVariantCreateInput = {
    quantity?: number | null
    image: string
    priceKit?: number | null
    parameter?: ParametersCreateNestedOneWithoutProductVariantInput
    sizes?: SizesCreateNestedManyWithoutProductVariantInput
    productAttribute?: ProductAttributeCreateNestedOneWithoutProductVariantInput
    Product: ProductCreateNestedOneWithoutProductVariantInput
    subProduct?: SubProductCreateNestedManyWithoutParentVariantInput
    parentSubProduct?: SubProductCreateNestedManyWithoutVariantInput
    CartItem?: CartItemCreateNestedManyWithoutProductVariantInput
    CartSubProduct?: CartSubProductCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantUncheckedCreateInput = {
    id?: number
    parameterId?: number | null
    quantity?: number | null
    productId: number
    image: string
    priceKit?: number | null
    sizes?: SizesUncheckedCreateNestedManyWithoutProductVariantInput
    productAttribute?: ProductAttributeUncheckedCreateNestedOneWithoutProductVariantInput
    subProduct?: SubProductUncheckedCreateNestedManyWithoutParentVariantInput
    parentSubProduct?: SubProductUncheckedCreateNestedManyWithoutVariantInput
    CartItem?: CartItemUncheckedCreateNestedManyWithoutProductVariantInput
    CartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantUpdateInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    priceKit?: NullableIntFieldUpdateOperationsInput | number | null
    parameter?: ParametersUpdateOneWithoutProductVariantNestedInput
    sizes?: SizesUpdateManyWithoutProductVariantNestedInput
    productAttribute?: ProductAttributeUpdateOneWithoutProductVariantNestedInput
    Product?: ProductUpdateOneRequiredWithoutProductVariantNestedInput
    subProduct?: SubProductUpdateManyWithoutParentVariantNestedInput
    parentSubProduct?: SubProductUpdateManyWithoutVariantNestedInput
    CartItem?: CartItemUpdateManyWithoutProductVariantNestedInput
    CartSubProduct?: CartSubProductUpdateManyWithoutVariantNestedInput
  }

  export type ProductVariantUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    parameterId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    priceKit?: NullableIntFieldUpdateOperationsInput | number | null
    sizes?: SizesUncheckedUpdateManyWithoutProductVariantNestedInput
    productAttribute?: ProductAttributeUncheckedUpdateOneWithoutProductVariantNestedInput
    subProduct?: SubProductUncheckedUpdateManyWithoutParentVariantNestedInput
    parentSubProduct?: SubProductUncheckedUpdateManyWithoutVariantNestedInput
    CartItem?: CartItemUncheckedUpdateManyWithoutProductVariantNestedInput
    CartSubProduct?: CartSubProductUncheckedUpdateManyWithoutVariantNestedInput
  }

  export type ProductVariantCreateManyInput = {
    id?: number
    parameterId?: number | null
    quantity?: number | null
    productId: number
    image: string
    priceKit?: number | null
  }

  export type ProductVariantUpdateManyMutationInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    priceKit?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProductVariantUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    parameterId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    priceKit?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SubProductCreateInput = {
    quantity?: number | null
    isReplace?: boolean
    createdAt?: Date | string
    product: ProductCreateNestedOneWithoutSubProductInput
    variant: ProductVariantCreateNestedOneWithoutParentSubProductInput
    parentVariant: ProductVariantCreateNestedOneWithoutSubProductInput
    size: SizesCreateNestedOneWithoutSubProductInput
  }

  export type SubProductUncheckedCreateInput = {
    id?: number
    productId: number
    variantId: number
    parentVariantId: number
    subSizeId: number
    quantity?: number | null
    isReplace?: boolean
    createdAt?: Date | string
  }

  export type SubProductUpdateInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    isReplace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutSubProductNestedInput
    variant?: ProductVariantUpdateOneRequiredWithoutParentSubProductNestedInput
    parentVariant?: ProductVariantUpdateOneRequiredWithoutSubProductNestedInput
    size?: SizesUpdateOneRequiredWithoutSubProductNestedInput
  }

  export type SubProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    variantId?: IntFieldUpdateOperationsInput | number
    parentVariantId?: IntFieldUpdateOperationsInput | number
    subSizeId?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    isReplace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubProductCreateManyInput = {
    id?: number
    productId: number
    variantId: number
    parentVariantId: number
    subSizeId: number
    quantity?: number | null
    isReplace?: boolean
    createdAt?: Date | string
  }

  export type SubProductUpdateManyMutationInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    isReplace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    variantId?: IntFieldUpdateOperationsInput | number
    parentVariantId?: IntFieldUpdateOperationsInput | number
    subSizeId?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    isReplace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductAttributeCreateInput = {
    name?: string | null
    productVariant: ProductVariantCreateNestedOneWithoutProductAttributeInput
    variantTypes?: VariantTypesCreateNestedOneWithoutProductAttributeInput
  }

  export type ProductAttributeUncheckedCreateInput = {
    id?: number
    name?: string | null
    productVariantId: number
    variantTypesId?: number | null
  }

  export type ProductAttributeUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    productVariant?: ProductVariantUpdateOneRequiredWithoutProductAttributeNestedInput
    variantTypes?: VariantTypesUpdateOneWithoutProductAttributeNestedInput
  }

  export type ProductAttributeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    productVariantId?: IntFieldUpdateOperationsInput | number
    variantTypesId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProductAttributeCreateManyInput = {
    id?: number
    name?: string | null
    productVariantId: number
    variantTypesId?: number | null
  }

  export type ProductAttributeUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductAttributeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    productVariantId?: IntFieldUpdateOperationsInput | number
    variantTypesId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type VariantTypesCreateInput = {
    value: string
    typeProduct: $Enums.TypeProduct
    categories?: CategoryCreateNestedManyWithoutVariantTypesInput
    productAttribute?: ProductAttributeCreateNestedManyWithoutVariantTypesInput
  }

  export type VariantTypesUncheckedCreateInput = {
    id?: number
    value: string
    typeProduct: $Enums.TypeProduct
    categories?: CategoryUncheckedCreateNestedManyWithoutVariantTypesInput
    productAttribute?: ProductAttributeUncheckedCreateNestedManyWithoutVariantTypesInput
  }

  export type VariantTypesUpdateInput = {
    value?: StringFieldUpdateOperationsInput | string
    typeProduct?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    categories?: CategoryUpdateManyWithoutVariantTypesNestedInput
    productAttribute?: ProductAttributeUpdateManyWithoutVariantTypesNestedInput
  }

  export type VariantTypesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    typeProduct?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    categories?: CategoryUncheckedUpdateManyWithoutVariantTypesNestedInput
    productAttribute?: ProductAttributeUncheckedUpdateManyWithoutVariantTypesNestedInput
  }

  export type VariantTypesCreateManyInput = {
    id?: number
    value: string
    typeProduct: $Enums.TypeProduct
  }

  export type VariantTypesUpdateManyMutationInput = {
    value?: StringFieldUpdateOperationsInput | string
    typeProduct?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
  }

  export type VariantTypesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    typeProduct?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
  }

  export type ParametersCreateInput = {
    parameter: string
    categories?: CategoryCreateNestedManyWithoutParametersInput
    ProductVariant?: ProductVariantCreateNestedManyWithoutParameterInput
  }

  export type ParametersUncheckedCreateInput = {
    id?: number
    parameter: string
    categories?: CategoryUncheckedCreateNestedManyWithoutParametersInput
    ProductVariant?: ProductVariantUncheckedCreateNestedManyWithoutParameterInput
  }

  export type ParametersUpdateInput = {
    parameter?: StringFieldUpdateOperationsInput | string
    categories?: CategoryUpdateManyWithoutParametersNestedInput
    ProductVariant?: ProductVariantUpdateManyWithoutParameterNestedInput
  }

  export type ParametersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    parameter?: StringFieldUpdateOperationsInput | string
    categories?: CategoryUncheckedUpdateManyWithoutParametersNestedInput
    ProductVariant?: ProductVariantUncheckedUpdateManyWithoutParameterNestedInput
  }

  export type ParametersCreateManyInput = {
    id?: number
    parameter: string
  }

  export type ParametersUpdateManyMutationInput = {
    parameter?: StringFieldUpdateOperationsInput | string
  }

  export type ParametersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    parameter?: StringFieldUpdateOperationsInput | string
  }

  export type ProportionsCreateInput = {
    value: string
    categories?: CategoryCreateNestedManyWithoutProportionsInput
    sizes?: SizesCreateNestedManyWithoutProportionInput
  }

  export type ProportionsUncheckedCreateInput = {
    id?: number
    value: string
    categories?: CategoryUncheckedCreateNestedManyWithoutProportionsInput
    sizes?: SizesUncheckedCreateNestedManyWithoutProportionInput
  }

  export type ProportionsUpdateInput = {
    value?: StringFieldUpdateOperationsInput | string
    categories?: CategoryUpdateManyWithoutProportionsNestedInput
    sizes?: SizesUpdateManyWithoutProportionNestedInput
  }

  export type ProportionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    categories?: CategoryUncheckedUpdateManyWithoutProportionsNestedInput
    sizes?: SizesUncheckedUpdateManyWithoutProportionNestedInput
  }

  export type ProportionsCreateManyInput = {
    id?: number
    value: string
  }

  export type ProportionsUpdateManyMutationInput = {
    value?: StringFieldUpdateOperationsInput | string
  }

  export type ProportionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type SizesCreateInput = {
    price: number
    weight?: string | null
    quantity?: number | null
    proportion: ProportionsCreateNestedOneWithoutSizesInput
    ingredients?: IngredientCreateNestedManyWithoutSizesInput
    productVariant: ProductVariantCreateNestedOneWithoutSizesInput
    SubProduct?: SubProductCreateNestedManyWithoutSizeInput
    CartItem?: CartItemCreateNestedManyWithoutSizeInput
    CartSubProduct?: CartSubProductCreateNestedManyWithoutSizeInput
  }

  export type SizesUncheckedCreateInput = {
    id?: number
    proportionId: number
    price: number
    weight?: string | null
    productVariantId: number
    quantity?: number | null
    ingredients?: IngredientUncheckedCreateNestedManyWithoutSizesInput
    SubProduct?: SubProductUncheckedCreateNestedManyWithoutSizeInput
    CartItem?: CartItemUncheckedCreateNestedManyWithoutSizeInput
    CartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutSizeInput
  }

  export type SizesUpdateInput = {
    price?: IntFieldUpdateOperationsInput | number
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    proportion?: ProportionsUpdateOneRequiredWithoutSizesNestedInput
    ingredients?: IngredientUpdateManyWithoutSizesNestedInput
    productVariant?: ProductVariantUpdateOneRequiredWithoutSizesNestedInput
    SubProduct?: SubProductUpdateManyWithoutSizeNestedInput
    CartItem?: CartItemUpdateManyWithoutSizeNestedInput
    CartSubProduct?: CartSubProductUpdateManyWithoutSizeNestedInput
  }

  export type SizesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    proportionId?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    productVariantId?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    ingredients?: IngredientUncheckedUpdateManyWithoutSizesNestedInput
    SubProduct?: SubProductUncheckedUpdateManyWithoutSizeNestedInput
    CartItem?: CartItemUncheckedUpdateManyWithoutSizeNestedInput
    CartSubProduct?: CartSubProductUncheckedUpdateManyWithoutSizeNestedInput
  }

  export type SizesCreateManyInput = {
    id?: number
    proportionId: number
    price: number
    weight?: string | null
    productVariantId: number
    quantity?: number | null
  }

  export type SizesUpdateManyMutationInput = {
    price?: IntFieldUpdateOperationsInput | number
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SizesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    proportionId?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    productVariantId?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IngredientCreateInput = {
    name: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    categories?: CategoryCreateNestedManyWithoutIngredientsInput
    sizes?: SizesCreateNestedManyWithoutIngredientsInput
    product?: ProductCreateNestedManyWithoutIngredientsInput
    cartItems?: CartItemCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientUncheckedCreateInput = {
    id?: number
    name: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    categories?: CategoryUncheckedCreateNestedManyWithoutIngredientsInput
    sizes?: SizesUncheckedCreateNestedManyWithoutIngredientsInput
    product?: ProductUncheckedCreateNestedManyWithoutIngredientsInput
    cartItems?: CartItemUncheckedCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    categories?: CategoryUpdateManyWithoutIngredientsNestedInput
    sizes?: SizesUpdateManyWithoutIngredientsNestedInput
    product?: ProductUpdateManyWithoutIngredientsNestedInput
    cartItems?: CartItemUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    categories?: CategoryUncheckedUpdateManyWithoutIngredientsNestedInput
    sizes?: SizesUncheckedUpdateManyWithoutIngredientsNestedInput
    product?: ProductUncheckedUpdateManyWithoutIngredientsNestedInput
    cartItems?: CartItemUncheckedUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientCreateManyInput = {
    id?: number
    name: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
  }

  export type IngredientUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type IngredientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type CartCreateInput = {
    totalAmount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    amountGoods?: number
    user: UserCreateNestedOneWithoutCartInput
    items?: CartItemCreateNestedManyWithoutCartInput
  }

  export type CartUncheckedCreateInput = {
    id?: number
    userId: number
    totalAmount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    amountGoods?: number
    items?: CartItemUncheckedCreateNestedManyWithoutCartInput
  }

  export type CartUpdateInput = {
    totalAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amountGoods?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutCartNestedInput
    items?: CartItemUpdateManyWithoutCartNestedInput
  }

  export type CartUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    totalAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amountGoods?: IntFieldUpdateOperationsInput | number
    items?: CartItemUncheckedUpdateManyWithoutCartNestedInput
  }

  export type CartCreateManyInput = {
    id?: number
    userId: number
    totalAmount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    amountGoods?: number
  }

  export type CartUpdateManyMutationInput = {
    totalAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amountGoods?: IntFieldUpdateOperationsInput | number
  }

  export type CartUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    totalAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amountGoods?: IntFieldUpdateOperationsInput | number
  }

  export type CartItemCreateInput = {
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cart: CartCreateNestedOneWithoutItemsInput
    product: ProductCreateNestedOneWithoutCartItemInput
    productVariant?: ProductVariantCreateNestedOneWithoutCartItemInput
    size?: SizesCreateNestedOneWithoutCartItemInput
    ingredients?: IngredientCreateNestedManyWithoutCartItemsInput
    cartSubProduct?: CartSubProductCreateNestedManyWithoutCartItemInput
  }

  export type CartItemUncheckedCreateInput = {
    id?: number
    cartId: number
    productVariantId?: number | null
    productId: number
    sizeId?: number | null
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ingredients?: IngredientUncheckedCreateNestedManyWithoutCartItemsInput
    cartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutCartItemInput
  }

  export type CartItemUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cart?: CartUpdateOneRequiredWithoutItemsNestedInput
    product?: ProductUpdateOneRequiredWithoutCartItemNestedInput
    productVariant?: ProductVariantUpdateOneWithoutCartItemNestedInput
    size?: SizesUpdateOneWithoutCartItemNestedInput
    ingredients?: IngredientUpdateManyWithoutCartItemsNestedInput
    cartSubProduct?: CartSubProductUpdateManyWithoutCartItemNestedInput
  }

  export type CartItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cartId?: IntFieldUpdateOperationsInput | number
    productVariantId?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: IntFieldUpdateOperationsInput | number
    sizeId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ingredients?: IngredientUncheckedUpdateManyWithoutCartItemsNestedInput
    cartSubProduct?: CartSubProductUncheckedUpdateManyWithoutCartItemNestedInput
  }

  export type CartItemCreateManyInput = {
    id?: number
    cartId: number
    productVariantId?: number | null
    productId: number
    sizeId?: number | null
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CartItemUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cartId?: IntFieldUpdateOperationsInput | number
    productVariantId?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: IntFieldUpdateOperationsInput | number
    sizeId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartSubProductCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    index: number
    product: ProductCreateNestedOneWithoutCartSubProductInput
    variant: ProductVariantCreateNestedOneWithoutCartSubProductInput
    size: SizesCreateNestedOneWithoutCartSubProductInput
    cartItem: CartItemCreateNestedOneWithoutCartSubProductInput
  }

  export type CartSubProductUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subProductId: number
    sizeId: number
    variantId: number
    cartItemId: number
    index: number
  }

  export type CartSubProductUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    index?: IntFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutCartSubProductNestedInput
    variant?: ProductVariantUpdateOneRequiredWithoutCartSubProductNestedInput
    size?: SizesUpdateOneRequiredWithoutCartSubProductNestedInput
    cartItem?: CartItemUpdateOneRequiredWithoutCartSubProductNestedInput
  }

  export type CartSubProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subProductId?: IntFieldUpdateOperationsInput | number
    sizeId?: IntFieldUpdateOperationsInput | number
    variantId?: IntFieldUpdateOperationsInput | number
    cartItemId?: IntFieldUpdateOperationsInput | number
    index?: IntFieldUpdateOperationsInput | number
  }

  export type CartSubProductCreateManyInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subProductId: number
    sizeId: number
    variantId: number
    cartItemId: number
    index: number
  }

  export type CartSubProductUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    index?: IntFieldUpdateOperationsInput | number
  }

  export type CartSubProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subProductId?: IntFieldUpdateOperationsInput | number
    sizeId?: IntFieldUpdateOperationsInput | number
    variantId?: IntFieldUpdateOperationsInput | number
    cartItemId?: IntFieldUpdateOperationsInput | number
    index?: IntFieldUpdateOperationsInput | number
  }

  export type OrderCreateInput = {
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentId?: string | null
    email: string
    phone: string
    address: string
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    items: JsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutOrdersInput
  }

  export type OrderUncheckedCreateInput = {
    id?: number
    userId: number
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentId?: string | null
    email: string
    phone: string
    address: string
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    items: JsonNullValueInput | InputJsonValue
  }

  export type OrderUpdateInput = {
    totalAmount?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutOrdersNestedInput
  }

  export type OrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    totalAmount?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
  }

  export type OrderCreateManyInput = {
    id?: number
    userId: number
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentId?: string | null
    email: string
    phone: string
    address: string
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    items: JsonNullValueInput | InputJsonValue
  }

  export type OrderUpdateManyMutationInput = {
    totalAmount?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
  }

  export type OrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    totalAmount?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
  }

  export type DeliveryAddressCreateInput = {
    address: string
    isDefault?: boolean
    user: UserCreateNestedOneWithoutDeliveryAddressInput
  }

  export type DeliveryAddressUncheckedCreateInput = {
    id?: number
    userId: number
    address: string
    isDefault?: boolean
  }

  export type DeliveryAddressUpdateInput = {
    address?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutDeliveryAddressNestedInput
  }

  export type DeliveryAddressUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DeliveryAddressCreateManyInput = {
    id?: number
    userId: number
    address: string
    isDefault?: boolean
  }

  export type DeliveryAddressUpdateManyMutationInput = {
    address?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DeliveryAddressUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VerificationCodeCreateInput = {
    code: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutVerificationCodeInput
  }

  export type VerificationCodeUncheckedCreateInput = {
    id?: number
    userId: number
    code: string
    createdAt?: Date | string
  }

  export type VerificationCodeUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutVerificationCodeNestedInput
  }

  export type VerificationCodeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationCodeCreateManyInput = {
    id?: number
    userId: number
    code: string
    createdAt?: Date | string
  }

  export type VerificationCodeUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationCodeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StoryCreateInput = {
    createdAt?: Date | string
    previewImage: string
    items?: StoryItemCreateNestedManyWithoutStoryInput
  }

  export type StoryUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    previewImage: string
    items?: StoryItemUncheckedCreateNestedManyWithoutStoryInput
  }

  export type StoryUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    previewImage?: StringFieldUpdateOperationsInput | string
    items?: StoryItemUpdateManyWithoutStoryNestedInput
  }

  export type StoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    previewImage?: StringFieldUpdateOperationsInput | string
    items?: StoryItemUncheckedUpdateManyWithoutStoryNestedInput
  }

  export type StoryCreateManyInput = {
    id?: number
    createdAt?: Date | string
    previewImage: string
  }

  export type StoryUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    previewImage?: StringFieldUpdateOperationsInput | string
  }

  export type StoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    previewImage?: StringFieldUpdateOperationsInput | string
  }

  export type StoryItemCreateInput = {
    createdAt?: Date | string
    source: string
    story: StoryCreateNestedOneWithoutItemsInput
  }

  export type StoryItemUncheckedCreateInput = {
    id?: number
    storyId: number
    createdAt?: Date | string
    source: string
  }

  export type StoryItemUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    source?: StringFieldUpdateOperationsInput | string
    story?: StoryUpdateOneRequiredWithoutItemsNestedInput
  }

  export type StoryItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    storyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    source?: StringFieldUpdateOperationsInput | string
  }

  export type StoryItemCreateManyInput = {
    id?: number
    storyId: number
    createdAt?: Date | string
    source: string
  }

  export type StoryItemUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    source?: StringFieldUpdateOperationsInput | string
  }

  export type StoryItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    storyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    source?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableFilter<$PrismaModel> | $Enums.UserRole | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumAuthMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthMethod | EnumAuthMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthMethodFilter<$PrismaModel> | $Enums.AuthMethod
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type CartNullableScalarRelationFilter = {
    is?: CartWhereInput | null
    isNot?: CartWhereInput | null
  }

  export type OrderListRelationFilter = {
    every?: OrderWhereInput
    some?: OrderWhereInput
    none?: OrderWhereInput
  }

  export type VerificationCodeNullableScalarRelationFilter = {
    is?: VerificationCodeWhereInput | null
    isNot?: VerificationCodeWhereInput | null
  }

  export type DeliveryAddressListRelationFilter = {
    every?: DeliveryAddressWhereInput
    some?: DeliveryAddressWhereInput
    none?: DeliveryAddressWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DeliveryAddressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    isTwoFactorEnabled?: SortOrder
    picture?: SortOrder
    method?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    isTwoFactorEnabled?: SortOrder
    picture?: SortOrder
    method?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isVerified?: SortOrder
    isTwoFactorEnabled?: SortOrder
    picture?: SortOrder
    method?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.UserRole | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumUserRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumUserRoleNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumAuthMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthMethod | EnumAuthMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthMethodWithAggregatesFilter<$PrismaModel> | $Enums.AuthMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuthMethodFilter<$PrismaModel>
    _max?: NestedEnumAuthMethodFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    refreshToken?: SortOrder
    accessToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expiresAt?: SortOrder
    userId?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    refreshToken?: SortOrder
    accessToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    refreshToken?: SortOrder
    accessToken?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expiresAt?: SortOrder
    userId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumTokenTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenType | EnumTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTypeFilter<$PrismaModel> | $Enums.TokenType
  }

  export type TokenCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    type?: SortOrder
    expiresIn?: SortOrder
    createdAt?: SortOrder
  }

  export type TokenMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    type?: SortOrder
    expiresIn?: SortOrder
    createdAt?: SortOrder
  }

  export type TokenMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    token?: SortOrder
    type?: SortOrder
    expiresIn?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumTokenTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenType | EnumTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTypeWithAggregatesFilter<$PrismaModel> | $Enums.TokenType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTokenTypeFilter<$PrismaModel>
    _max?: NestedEnumTokenTypeFilter<$PrismaModel>
  }

  export type EnumTypeProductFilter<$PrismaModel = never> = {
    equals?: $Enums.TypeProduct | EnumTypeProductFieldRefInput<$PrismaModel>
    in?: $Enums.TypeProduct[] | ListEnumTypeProductFieldRefInput<$PrismaModel>
    notIn?: $Enums.TypeProduct[] | ListEnumTypeProductFieldRefInput<$PrismaModel>
    not?: NestedEnumTypeProductFilter<$PrismaModel> | $Enums.TypeProduct
  }

  export type ParametersListRelationFilter = {
    every?: ParametersWhereInput
    some?: ParametersWhereInput
    none?: ParametersWhereInput
  }

  export type ProportionsListRelationFilter = {
    every?: ProportionsWhereInput
    some?: ProportionsWhereInput
    none?: ProportionsWhereInput
  }

  export type IngredientListRelationFilter = {
    every?: IngredientWhereInput
    some?: IngredientWhereInput
    none?: IngredientWhereInput
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type VariantTypesListRelationFilter = {
    every?: VariantTypesWhereInput
    some?: VariantTypesWhereInput
    none?: VariantTypesWhereInput
  }

  export type ParametersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProportionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IngredientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VariantTypesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumTypeProductWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TypeProduct | EnumTypeProductFieldRefInput<$PrismaModel>
    in?: $Enums.TypeProduct[] | ListEnumTypeProductFieldRefInput<$PrismaModel>
    notIn?: $Enums.TypeProduct[] | ListEnumTypeProductFieldRefInput<$PrismaModel>
    not?: NestedEnumTypeProductWithAggregatesFilter<$PrismaModel> | $Enums.TypeProduct
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTypeProductFilter<$PrismaModel>
    _max?: NestedEnumTypeProductFilter<$PrismaModel>
  }

  export type CartItemListRelationFilter = {
    every?: CartItemWhereInput
    some?: CartItemWhereInput
    none?: CartItemWhereInput
  }

  export type CategoryScalarRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type ProductVariantListRelationFilter = {
    every?: ProductVariantWhereInput
    some?: ProductVariantWhereInput
    none?: ProductVariantWhereInput
  }

  export type SubProductListRelationFilter = {
    every?: SubProductWhereInput
    some?: SubProductWhereInput
    none?: SubProductWhereInput
  }

  export type CartSubProductListRelationFilter = {
    every?: CartSubProductWhereInput
    some?: CartSubProductWhereInput
    none?: CartSubProductWhereInput
  }

  export type CartItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductVariantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CartSubProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    image?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    type?: SortOrder
    price?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    price?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    image?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    type?: SortOrder
    price?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    image?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    type?: SortOrder
    price?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    price?: SortOrder
  }

  export type ParametersNullableScalarRelationFilter = {
    is?: ParametersWhereInput | null
    isNot?: ParametersWhereInput | null
  }

  export type SizesListRelationFilter = {
    every?: SizesWhereInput
    some?: SizesWhereInput
    none?: SizesWhereInput
  }

  export type ProductAttributeNullableScalarRelationFilter = {
    is?: ProductAttributeWhereInput | null
    isNot?: ProductAttributeWhereInput | null
  }

  export type ProductScalarRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type SizesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductVariantCountOrderByAggregateInput = {
    id?: SortOrder
    parameterId?: SortOrder
    quantity?: SortOrder
    productId?: SortOrder
    image?: SortOrder
    priceKit?: SortOrder
  }

  export type ProductVariantAvgOrderByAggregateInput = {
    id?: SortOrder
    parameterId?: SortOrder
    quantity?: SortOrder
    productId?: SortOrder
    priceKit?: SortOrder
  }

  export type ProductVariantMaxOrderByAggregateInput = {
    id?: SortOrder
    parameterId?: SortOrder
    quantity?: SortOrder
    productId?: SortOrder
    image?: SortOrder
    priceKit?: SortOrder
  }

  export type ProductVariantMinOrderByAggregateInput = {
    id?: SortOrder
    parameterId?: SortOrder
    quantity?: SortOrder
    productId?: SortOrder
    image?: SortOrder
    priceKit?: SortOrder
  }

  export type ProductVariantSumOrderByAggregateInput = {
    id?: SortOrder
    parameterId?: SortOrder
    quantity?: SortOrder
    productId?: SortOrder
    priceKit?: SortOrder
  }

  export type ProductVariantScalarRelationFilter = {
    is?: ProductVariantWhereInput
    isNot?: ProductVariantWhereInput
  }

  export type SizesScalarRelationFilter = {
    is?: SizesWhereInput
    isNot?: SizesWhereInput
  }

  export type SubProductCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    variantId?: SortOrder
    parentVariantId?: SortOrder
    subSizeId?: SortOrder
    quantity?: SortOrder
    isReplace?: SortOrder
    createdAt?: SortOrder
  }

  export type SubProductAvgOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    variantId?: SortOrder
    parentVariantId?: SortOrder
    subSizeId?: SortOrder
    quantity?: SortOrder
  }

  export type SubProductMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    variantId?: SortOrder
    parentVariantId?: SortOrder
    subSizeId?: SortOrder
    quantity?: SortOrder
    isReplace?: SortOrder
    createdAt?: SortOrder
  }

  export type SubProductMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    variantId?: SortOrder
    parentVariantId?: SortOrder
    subSizeId?: SortOrder
    quantity?: SortOrder
    isReplace?: SortOrder
    createdAt?: SortOrder
  }

  export type SubProductSumOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    variantId?: SortOrder
    parentVariantId?: SortOrder
    subSizeId?: SortOrder
    quantity?: SortOrder
  }

  export type VariantTypesNullableScalarRelationFilter = {
    is?: VariantTypesWhereInput | null
    isNot?: VariantTypesWhereInput | null
  }

  export type ProductAttributeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    productVariantId?: SortOrder
    variantTypesId?: SortOrder
  }

  export type ProductAttributeAvgOrderByAggregateInput = {
    id?: SortOrder
    productVariantId?: SortOrder
    variantTypesId?: SortOrder
  }

  export type ProductAttributeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    productVariantId?: SortOrder
    variantTypesId?: SortOrder
  }

  export type ProductAttributeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    productVariantId?: SortOrder
    variantTypesId?: SortOrder
  }

  export type ProductAttributeSumOrderByAggregateInput = {
    id?: SortOrder
    productVariantId?: SortOrder
    variantTypesId?: SortOrder
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type ProductAttributeListRelationFilter = {
    every?: ProductAttributeWhereInput
    some?: ProductAttributeWhereInput
    none?: ProductAttributeWhereInput
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductAttributeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VariantTypesCountOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    typeProduct?: SortOrder
  }

  export type VariantTypesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type VariantTypesMaxOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    typeProduct?: SortOrder
  }

  export type VariantTypesMinOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    typeProduct?: SortOrder
  }

  export type VariantTypesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ParametersCountOrderByAggregateInput = {
    id?: SortOrder
    parameter?: SortOrder
  }

  export type ParametersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ParametersMaxOrderByAggregateInput = {
    id?: SortOrder
    parameter?: SortOrder
  }

  export type ParametersMinOrderByAggregateInput = {
    id?: SortOrder
    parameter?: SortOrder
  }

  export type ParametersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProportionsCountOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
  }

  export type ProportionsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProportionsMaxOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
  }

  export type ProportionsMinOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
  }

  export type ProportionsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProportionsScalarRelationFilter = {
    is?: ProportionsWhereInput
    isNot?: ProportionsWhereInput
  }

  export type SizesCountOrderByAggregateInput = {
    id?: SortOrder
    proportionId?: SortOrder
    price?: SortOrder
    weight?: SortOrder
    productVariantId?: SortOrder
    quantity?: SortOrder
  }

  export type SizesAvgOrderByAggregateInput = {
    id?: SortOrder
    proportionId?: SortOrder
    price?: SortOrder
    productVariantId?: SortOrder
    quantity?: SortOrder
  }

  export type SizesMaxOrderByAggregateInput = {
    id?: SortOrder
    proportionId?: SortOrder
    price?: SortOrder
    weight?: SortOrder
    productVariantId?: SortOrder
    quantity?: SortOrder
  }

  export type SizesMinOrderByAggregateInput = {
    id?: SortOrder
    proportionId?: SortOrder
    price?: SortOrder
    weight?: SortOrder
    productVariantId?: SortOrder
    quantity?: SortOrder
  }

  export type SizesSumOrderByAggregateInput = {
    id?: SortOrder
    proportionId?: SortOrder
    price?: SortOrder
    productVariantId?: SortOrder
    quantity?: SortOrder
  }

  export type IngredientCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    image?: SortOrder
  }

  export type IngredientAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type IngredientMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    image?: SortOrder
  }

  export type IngredientMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    image?: SortOrder
  }

  export type IngredientSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CartCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    amountGoods?: SortOrder
  }

  export type CartAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
    amountGoods?: SortOrder
  }

  export type CartMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    amountGoods?: SortOrder
  }

  export type CartMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    amountGoods?: SortOrder
  }

  export type CartSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
    amountGoods?: SortOrder
  }

  export type CartScalarRelationFilter = {
    is?: CartWhereInput
    isNot?: CartWhereInput
  }

  export type ProductVariantNullableScalarRelationFilter = {
    is?: ProductVariantWhereInput | null
    isNot?: ProductVariantWhereInput | null
  }

  export type SizesNullableScalarRelationFilter = {
    is?: SizesWhereInput | null
    isNot?: SizesWhereInput | null
  }

  export type CartItemCountOrderByAggregateInput = {
    id?: SortOrder
    cartId?: SortOrder
    productVariantId?: SortOrder
    productId?: SortOrder
    sizeId?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CartItemAvgOrderByAggregateInput = {
    id?: SortOrder
    cartId?: SortOrder
    productVariantId?: SortOrder
    productId?: SortOrder
    sizeId?: SortOrder
    quantity?: SortOrder
  }

  export type CartItemMaxOrderByAggregateInput = {
    id?: SortOrder
    cartId?: SortOrder
    productVariantId?: SortOrder
    productId?: SortOrder
    sizeId?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CartItemMinOrderByAggregateInput = {
    id?: SortOrder
    cartId?: SortOrder
    productVariantId?: SortOrder
    productId?: SortOrder
    sizeId?: SortOrder
    quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CartItemSumOrderByAggregateInput = {
    id?: SortOrder
    cartId?: SortOrder
    productVariantId?: SortOrder
    productId?: SortOrder
    sizeId?: SortOrder
    quantity?: SortOrder
  }

  export type CartItemScalarRelationFilter = {
    is?: CartItemWhereInput
    isNot?: CartItemWhereInput
  }

  export type CartSubProductCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subProductId?: SortOrder
    sizeId?: SortOrder
    variantId?: SortOrder
    cartItemId?: SortOrder
    index?: SortOrder
  }

  export type CartSubProductAvgOrderByAggregateInput = {
    id?: SortOrder
    subProductId?: SortOrder
    sizeId?: SortOrder
    variantId?: SortOrder
    cartItemId?: SortOrder
    index?: SortOrder
  }

  export type CartSubProductMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subProductId?: SortOrder
    sizeId?: SortOrder
    variantId?: SortOrder
    cartItemId?: SortOrder
    index?: SortOrder
  }

  export type CartSubProductMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subProductId?: SortOrder
    sizeId?: SortOrder
    variantId?: SortOrder
    cartItemId?: SortOrder
    index?: SortOrder
  }

  export type CartSubProductSumOrderByAggregateInput = {
    id?: SortOrder
    subProductId?: SortOrder
    sizeId?: SortOrder
    variantId?: SortOrder
    cartItemId?: SortOrder
    index?: SortOrder
  }

  export type EnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type OrderCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    paymentId?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
    items?: SortOrder
  }

  export type OrderAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
  }

  export type OrderMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    paymentId?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
  }

  export type OrderMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
    status?: SortOrder
    paymentId?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    firstName?: SortOrder
  }

  export type OrderSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    totalAmount?: SortOrder
  }

  export type EnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DeliveryAddressCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    isDefault?: SortOrder
  }

  export type DeliveryAddressAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type DeliveryAddressMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    isDefault?: SortOrder
  }

  export type DeliveryAddressMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    isDefault?: SortOrder
  }

  export type DeliveryAddressSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type VerificationCodeUserIdCodeCompoundUniqueInput = {
    userId: number
    code: string
  }

  export type VerificationCodeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
  }

  export type VerificationCodeAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type VerificationCodeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
  }

  export type VerificationCodeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    code?: SortOrder
    createdAt?: SortOrder
  }

  export type VerificationCodeSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type StoryItemListRelationFilter = {
    every?: StoryItemWhereInput
    some?: StoryItemWhereInput
    none?: StoryItemWhereInput
  }

  export type StoryItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StoryCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    previewImage?: SortOrder
  }

  export type StoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StoryMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    previewImage?: SortOrder
  }

  export type StoryMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    previewImage?: SortOrder
  }

  export type StorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StoryScalarRelationFilter = {
    is?: StoryWhereInput
    isNot?: StoryWhereInput
  }

  export type StoryItemCountOrderByAggregateInput = {
    id?: SortOrder
    storyId?: SortOrder
    createdAt?: SortOrder
    source?: SortOrder
  }

  export type StoryItemAvgOrderByAggregateInput = {
    id?: SortOrder
    storyId?: SortOrder
  }

  export type StoryItemMaxOrderByAggregateInput = {
    id?: SortOrder
    storyId?: SortOrder
    createdAt?: SortOrder
    source?: SortOrder
  }

  export type StoryItemMinOrderByAggregateInput = {
    id?: SortOrder
    storyId?: SortOrder
    createdAt?: SortOrder
    source?: SortOrder
  }

  export type StoryItemSumOrderByAggregateInput = {
    id?: SortOrder
    storyId?: SortOrder
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type CartCreateNestedOneWithoutUserInput = {
    create?: XOR<CartCreateWithoutUserInput, CartUncheckedCreateWithoutUserInput>
    connectOrCreate?: CartCreateOrConnectWithoutUserInput
    connect?: CartWhereUniqueInput
  }

  export type OrderCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type VerificationCodeCreateNestedOneWithoutUserInput = {
    create?: XOR<VerificationCodeCreateWithoutUserInput, VerificationCodeUncheckedCreateWithoutUserInput>
    connectOrCreate?: VerificationCodeCreateOrConnectWithoutUserInput
    connect?: VerificationCodeWhereUniqueInput
  }

  export type DeliveryAddressCreateNestedManyWithoutUserInput = {
    create?: XOR<DeliveryAddressCreateWithoutUserInput, DeliveryAddressUncheckedCreateWithoutUserInput> | DeliveryAddressCreateWithoutUserInput[] | DeliveryAddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DeliveryAddressCreateOrConnectWithoutUserInput | DeliveryAddressCreateOrConnectWithoutUserInput[]
    createMany?: DeliveryAddressCreateManyUserInputEnvelope
    connect?: DeliveryAddressWhereUniqueInput | DeliveryAddressWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type CartUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<CartCreateWithoutUserInput, CartUncheckedCreateWithoutUserInput>
    connectOrCreate?: CartCreateOrConnectWithoutUserInput
    connect?: CartWhereUniqueInput
  }

  export type OrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
  }

  export type VerificationCodeUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<VerificationCodeCreateWithoutUserInput, VerificationCodeUncheckedCreateWithoutUserInput>
    connectOrCreate?: VerificationCodeCreateOrConnectWithoutUserInput
    connect?: VerificationCodeWhereUniqueInput
  }

  export type DeliveryAddressUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DeliveryAddressCreateWithoutUserInput, DeliveryAddressUncheckedCreateWithoutUserInput> | DeliveryAddressCreateWithoutUserInput[] | DeliveryAddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DeliveryAddressCreateOrConnectWithoutUserInput | DeliveryAddressCreateOrConnectWithoutUserInput[]
    createMany?: DeliveryAddressCreateManyUserInputEnvelope
    connect?: DeliveryAddressWhereUniqueInput | DeliveryAddressWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableEnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumAuthMethodFieldUpdateOperationsInput = {
    set?: $Enums.AuthMethod
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type CartUpdateOneWithoutUserNestedInput = {
    create?: XOR<CartCreateWithoutUserInput, CartUncheckedCreateWithoutUserInput>
    connectOrCreate?: CartCreateOrConnectWithoutUserInput
    upsert?: CartUpsertWithoutUserInput
    disconnect?: CartWhereInput | boolean
    delete?: CartWhereInput | boolean
    connect?: CartWhereUniqueInput
    update?: XOR<XOR<CartUpdateToOneWithWhereWithoutUserInput, CartUpdateWithoutUserInput>, CartUncheckedUpdateWithoutUserInput>
  }

  export type OrderUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type VerificationCodeUpdateOneWithoutUserNestedInput = {
    create?: XOR<VerificationCodeCreateWithoutUserInput, VerificationCodeUncheckedCreateWithoutUserInput>
    connectOrCreate?: VerificationCodeCreateOrConnectWithoutUserInput
    upsert?: VerificationCodeUpsertWithoutUserInput
    disconnect?: VerificationCodeWhereInput | boolean
    delete?: VerificationCodeWhereInput | boolean
    connect?: VerificationCodeWhereUniqueInput
    update?: XOR<XOR<VerificationCodeUpdateToOneWithWhereWithoutUserInput, VerificationCodeUpdateWithoutUserInput>, VerificationCodeUncheckedUpdateWithoutUserInput>
  }

  export type DeliveryAddressUpdateManyWithoutUserNestedInput = {
    create?: XOR<DeliveryAddressCreateWithoutUserInput, DeliveryAddressUncheckedCreateWithoutUserInput> | DeliveryAddressCreateWithoutUserInput[] | DeliveryAddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DeliveryAddressCreateOrConnectWithoutUserInput | DeliveryAddressCreateOrConnectWithoutUserInput[]
    upsert?: DeliveryAddressUpsertWithWhereUniqueWithoutUserInput | DeliveryAddressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DeliveryAddressCreateManyUserInputEnvelope
    set?: DeliveryAddressWhereUniqueInput | DeliveryAddressWhereUniqueInput[]
    disconnect?: DeliveryAddressWhereUniqueInput | DeliveryAddressWhereUniqueInput[]
    delete?: DeliveryAddressWhereUniqueInput | DeliveryAddressWhereUniqueInput[]
    connect?: DeliveryAddressWhereUniqueInput | DeliveryAddressWhereUniqueInput[]
    update?: DeliveryAddressUpdateWithWhereUniqueWithoutUserInput | DeliveryAddressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DeliveryAddressUpdateManyWithWhereWithoutUserInput | DeliveryAddressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DeliveryAddressScalarWhereInput | DeliveryAddressScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type CartUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<CartCreateWithoutUserInput, CartUncheckedCreateWithoutUserInput>
    connectOrCreate?: CartCreateOrConnectWithoutUserInput
    upsert?: CartUpsertWithoutUserInput
    disconnect?: CartWhereInput | boolean
    delete?: CartWhereInput | boolean
    connect?: CartWhereUniqueInput
    update?: XOR<XOR<CartUpdateToOneWithWhereWithoutUserInput, CartUpdateWithoutUserInput>, CartUncheckedUpdateWithoutUserInput>
  }

  export type OrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput> | OrderCreateWithoutUserInput[] | OrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrderCreateOrConnectWithoutUserInput | OrderCreateOrConnectWithoutUserInput[]
    upsert?: OrderUpsertWithWhereUniqueWithoutUserInput | OrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrderCreateManyUserInputEnvelope
    set?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    disconnect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    delete?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    connect?: OrderWhereUniqueInput | OrderWhereUniqueInput[]
    update?: OrderUpdateWithWhereUniqueWithoutUserInput | OrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrderUpdateManyWithWhereWithoutUserInput | OrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrderScalarWhereInput | OrderScalarWhereInput[]
  }

  export type VerificationCodeUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<VerificationCodeCreateWithoutUserInput, VerificationCodeUncheckedCreateWithoutUserInput>
    connectOrCreate?: VerificationCodeCreateOrConnectWithoutUserInput
    upsert?: VerificationCodeUpsertWithoutUserInput
    disconnect?: VerificationCodeWhereInput | boolean
    delete?: VerificationCodeWhereInput | boolean
    connect?: VerificationCodeWhereUniqueInput
    update?: XOR<XOR<VerificationCodeUpdateToOneWithWhereWithoutUserInput, VerificationCodeUpdateWithoutUserInput>, VerificationCodeUncheckedUpdateWithoutUserInput>
  }

  export type DeliveryAddressUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DeliveryAddressCreateWithoutUserInput, DeliveryAddressUncheckedCreateWithoutUserInput> | DeliveryAddressCreateWithoutUserInput[] | DeliveryAddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DeliveryAddressCreateOrConnectWithoutUserInput | DeliveryAddressCreateOrConnectWithoutUserInput[]
    upsert?: DeliveryAddressUpsertWithWhereUniqueWithoutUserInput | DeliveryAddressUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DeliveryAddressCreateManyUserInputEnvelope
    set?: DeliveryAddressWhereUniqueInput | DeliveryAddressWhereUniqueInput[]
    disconnect?: DeliveryAddressWhereUniqueInput | DeliveryAddressWhereUniqueInput[]
    delete?: DeliveryAddressWhereUniqueInput | DeliveryAddressWhereUniqueInput[]
    connect?: DeliveryAddressWhereUniqueInput | DeliveryAddressWhereUniqueInput[]
    update?: DeliveryAddressUpdateWithWhereUniqueWithoutUserInput | DeliveryAddressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DeliveryAddressUpdateManyWithWhereWithoutUserInput | DeliveryAddressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DeliveryAddressScalarWhereInput | DeliveryAddressScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumTokenTypeFieldUpdateOperationsInput = {
    set?: $Enums.TokenType
  }

  export type ParametersCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<ParametersCreateWithoutCategoriesInput, ParametersUncheckedCreateWithoutCategoriesInput> | ParametersCreateWithoutCategoriesInput[] | ParametersUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: ParametersCreateOrConnectWithoutCategoriesInput | ParametersCreateOrConnectWithoutCategoriesInput[]
    connect?: ParametersWhereUniqueInput | ParametersWhereUniqueInput[]
  }

  export type ProportionsCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<ProportionsCreateWithoutCategoriesInput, ProportionsUncheckedCreateWithoutCategoriesInput> | ProportionsCreateWithoutCategoriesInput[] | ProportionsUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: ProportionsCreateOrConnectWithoutCategoriesInput | ProportionsCreateOrConnectWithoutCategoriesInput[]
    connect?: ProportionsWhereUniqueInput | ProportionsWhereUniqueInput[]
  }

  export type IngredientCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<IngredientCreateWithoutCategoriesInput, IngredientUncheckedCreateWithoutCategoriesInput> | IngredientCreateWithoutCategoriesInput[] | IngredientUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: IngredientCreateOrConnectWithoutCategoriesInput | IngredientCreateOrConnectWithoutCategoriesInput[]
    connect?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
  }

  export type ProductCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type VariantTypesCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<VariantTypesCreateWithoutCategoriesInput, VariantTypesUncheckedCreateWithoutCategoriesInput> | VariantTypesCreateWithoutCategoriesInput[] | VariantTypesUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: VariantTypesCreateOrConnectWithoutCategoriesInput | VariantTypesCreateOrConnectWithoutCategoriesInput[]
    connect?: VariantTypesWhereUniqueInput | VariantTypesWhereUniqueInput[]
  }

  export type ParametersUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<ParametersCreateWithoutCategoriesInput, ParametersUncheckedCreateWithoutCategoriesInput> | ParametersCreateWithoutCategoriesInput[] | ParametersUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: ParametersCreateOrConnectWithoutCategoriesInput | ParametersCreateOrConnectWithoutCategoriesInput[]
    connect?: ParametersWhereUniqueInput | ParametersWhereUniqueInput[]
  }

  export type ProportionsUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<ProportionsCreateWithoutCategoriesInput, ProportionsUncheckedCreateWithoutCategoriesInput> | ProportionsCreateWithoutCategoriesInput[] | ProportionsUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: ProportionsCreateOrConnectWithoutCategoriesInput | ProportionsCreateOrConnectWithoutCategoriesInput[]
    connect?: ProportionsWhereUniqueInput | ProportionsWhereUniqueInput[]
  }

  export type IngredientUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<IngredientCreateWithoutCategoriesInput, IngredientUncheckedCreateWithoutCategoriesInput> | IngredientCreateWithoutCategoriesInput[] | IngredientUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: IngredientCreateOrConnectWithoutCategoriesInput | IngredientCreateOrConnectWithoutCategoriesInput[]
    connect?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type VariantTypesUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<VariantTypesCreateWithoutCategoriesInput, VariantTypesUncheckedCreateWithoutCategoriesInput> | VariantTypesCreateWithoutCategoriesInput[] | VariantTypesUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: VariantTypesCreateOrConnectWithoutCategoriesInput | VariantTypesCreateOrConnectWithoutCategoriesInput[]
    connect?: VariantTypesWhereUniqueInput | VariantTypesWhereUniqueInput[]
  }

  export type EnumTypeProductFieldUpdateOperationsInput = {
    set?: $Enums.TypeProduct
  }

  export type ParametersUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<ParametersCreateWithoutCategoriesInput, ParametersUncheckedCreateWithoutCategoriesInput> | ParametersCreateWithoutCategoriesInput[] | ParametersUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: ParametersCreateOrConnectWithoutCategoriesInput | ParametersCreateOrConnectWithoutCategoriesInput[]
    upsert?: ParametersUpsertWithWhereUniqueWithoutCategoriesInput | ParametersUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: ParametersWhereUniqueInput | ParametersWhereUniqueInput[]
    disconnect?: ParametersWhereUniqueInput | ParametersWhereUniqueInput[]
    delete?: ParametersWhereUniqueInput | ParametersWhereUniqueInput[]
    connect?: ParametersWhereUniqueInput | ParametersWhereUniqueInput[]
    update?: ParametersUpdateWithWhereUniqueWithoutCategoriesInput | ParametersUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: ParametersUpdateManyWithWhereWithoutCategoriesInput | ParametersUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: ParametersScalarWhereInput | ParametersScalarWhereInput[]
  }

  export type ProportionsUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<ProportionsCreateWithoutCategoriesInput, ProportionsUncheckedCreateWithoutCategoriesInput> | ProportionsCreateWithoutCategoriesInput[] | ProportionsUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: ProportionsCreateOrConnectWithoutCategoriesInput | ProportionsCreateOrConnectWithoutCategoriesInput[]
    upsert?: ProportionsUpsertWithWhereUniqueWithoutCategoriesInput | ProportionsUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: ProportionsWhereUniqueInput | ProportionsWhereUniqueInput[]
    disconnect?: ProportionsWhereUniqueInput | ProportionsWhereUniqueInput[]
    delete?: ProportionsWhereUniqueInput | ProportionsWhereUniqueInput[]
    connect?: ProportionsWhereUniqueInput | ProportionsWhereUniqueInput[]
    update?: ProportionsUpdateWithWhereUniqueWithoutCategoriesInput | ProportionsUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: ProportionsUpdateManyWithWhereWithoutCategoriesInput | ProportionsUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: ProportionsScalarWhereInput | ProportionsScalarWhereInput[]
  }

  export type IngredientUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<IngredientCreateWithoutCategoriesInput, IngredientUncheckedCreateWithoutCategoriesInput> | IngredientCreateWithoutCategoriesInput[] | IngredientUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: IngredientCreateOrConnectWithoutCategoriesInput | IngredientCreateOrConnectWithoutCategoriesInput[]
    upsert?: IngredientUpsertWithWhereUniqueWithoutCategoriesInput | IngredientUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    disconnect?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    delete?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    connect?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    update?: IngredientUpdateWithWhereUniqueWithoutCategoriesInput | IngredientUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: IngredientUpdateManyWithWhereWithoutCategoriesInput | IngredientUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: IngredientScalarWhereInput | IngredientScalarWhereInput[]
  }

  export type ProductUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCategoryInput | ProductUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCategoryInput | ProductUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCategoryInput | ProductUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type VariantTypesUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<VariantTypesCreateWithoutCategoriesInput, VariantTypesUncheckedCreateWithoutCategoriesInput> | VariantTypesCreateWithoutCategoriesInput[] | VariantTypesUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: VariantTypesCreateOrConnectWithoutCategoriesInput | VariantTypesCreateOrConnectWithoutCategoriesInput[]
    upsert?: VariantTypesUpsertWithWhereUniqueWithoutCategoriesInput | VariantTypesUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: VariantTypesWhereUniqueInput | VariantTypesWhereUniqueInput[]
    disconnect?: VariantTypesWhereUniqueInput | VariantTypesWhereUniqueInput[]
    delete?: VariantTypesWhereUniqueInput | VariantTypesWhereUniqueInput[]
    connect?: VariantTypesWhereUniqueInput | VariantTypesWhereUniqueInput[]
    update?: VariantTypesUpdateWithWhereUniqueWithoutCategoriesInput | VariantTypesUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: VariantTypesUpdateManyWithWhereWithoutCategoriesInput | VariantTypesUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: VariantTypesScalarWhereInput | VariantTypesScalarWhereInput[]
  }

  export type ParametersUncheckedUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<ParametersCreateWithoutCategoriesInput, ParametersUncheckedCreateWithoutCategoriesInput> | ParametersCreateWithoutCategoriesInput[] | ParametersUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: ParametersCreateOrConnectWithoutCategoriesInput | ParametersCreateOrConnectWithoutCategoriesInput[]
    upsert?: ParametersUpsertWithWhereUniqueWithoutCategoriesInput | ParametersUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: ParametersWhereUniqueInput | ParametersWhereUniqueInput[]
    disconnect?: ParametersWhereUniqueInput | ParametersWhereUniqueInput[]
    delete?: ParametersWhereUniqueInput | ParametersWhereUniqueInput[]
    connect?: ParametersWhereUniqueInput | ParametersWhereUniqueInput[]
    update?: ParametersUpdateWithWhereUniqueWithoutCategoriesInput | ParametersUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: ParametersUpdateManyWithWhereWithoutCategoriesInput | ParametersUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: ParametersScalarWhereInput | ParametersScalarWhereInput[]
  }

  export type ProportionsUncheckedUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<ProportionsCreateWithoutCategoriesInput, ProportionsUncheckedCreateWithoutCategoriesInput> | ProportionsCreateWithoutCategoriesInput[] | ProportionsUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: ProportionsCreateOrConnectWithoutCategoriesInput | ProportionsCreateOrConnectWithoutCategoriesInput[]
    upsert?: ProportionsUpsertWithWhereUniqueWithoutCategoriesInput | ProportionsUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: ProportionsWhereUniqueInput | ProportionsWhereUniqueInput[]
    disconnect?: ProportionsWhereUniqueInput | ProportionsWhereUniqueInput[]
    delete?: ProportionsWhereUniqueInput | ProportionsWhereUniqueInput[]
    connect?: ProportionsWhereUniqueInput | ProportionsWhereUniqueInput[]
    update?: ProportionsUpdateWithWhereUniqueWithoutCategoriesInput | ProportionsUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: ProportionsUpdateManyWithWhereWithoutCategoriesInput | ProportionsUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: ProportionsScalarWhereInput | ProportionsScalarWhereInput[]
  }

  export type IngredientUncheckedUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<IngredientCreateWithoutCategoriesInput, IngredientUncheckedCreateWithoutCategoriesInput> | IngredientCreateWithoutCategoriesInput[] | IngredientUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: IngredientCreateOrConnectWithoutCategoriesInput | IngredientCreateOrConnectWithoutCategoriesInput[]
    upsert?: IngredientUpsertWithWhereUniqueWithoutCategoriesInput | IngredientUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    disconnect?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    delete?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    connect?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    update?: IngredientUpdateWithWhereUniqueWithoutCategoriesInput | IngredientUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: IngredientUpdateManyWithWhereWithoutCategoriesInput | IngredientUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: IngredientScalarWhereInput | IngredientScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCategoryInput | ProductUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCategoryInput | ProductUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCategoryInput | ProductUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type VariantTypesUncheckedUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<VariantTypesCreateWithoutCategoriesInput, VariantTypesUncheckedCreateWithoutCategoriesInput> | VariantTypesCreateWithoutCategoriesInput[] | VariantTypesUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: VariantTypesCreateOrConnectWithoutCategoriesInput | VariantTypesCreateOrConnectWithoutCategoriesInput[]
    upsert?: VariantTypesUpsertWithWhereUniqueWithoutCategoriesInput | VariantTypesUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: VariantTypesWhereUniqueInput | VariantTypesWhereUniqueInput[]
    disconnect?: VariantTypesWhereUniqueInput | VariantTypesWhereUniqueInput[]
    delete?: VariantTypesWhereUniqueInput | VariantTypesWhereUniqueInput[]
    connect?: VariantTypesWhereUniqueInput | VariantTypesWhereUniqueInput[]
    update?: VariantTypesUpdateWithWhereUniqueWithoutCategoriesInput | VariantTypesUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: VariantTypesUpdateManyWithWhereWithoutCategoriesInput | VariantTypesUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: VariantTypesScalarWhereInput | VariantTypesScalarWhereInput[]
  }

  export type IngredientCreateNestedManyWithoutProductInput = {
    create?: XOR<IngredientCreateWithoutProductInput, IngredientUncheckedCreateWithoutProductInput> | IngredientCreateWithoutProductInput[] | IngredientUncheckedCreateWithoutProductInput[]
    connectOrCreate?: IngredientCreateOrConnectWithoutProductInput | IngredientCreateOrConnectWithoutProductInput[]
    connect?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
  }

  export type CartItemCreateNestedManyWithoutProductInput = {
    create?: XOR<CartItemCreateWithoutProductInput, CartItemUncheckedCreateWithoutProductInput> | CartItemCreateWithoutProductInput[] | CartItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutProductInput | CartItemCreateOrConnectWithoutProductInput[]
    createMany?: CartItemCreateManyProductInputEnvelope
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type CategoryCreateNestedOneWithoutProductsInput = {
    create?: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProductsInput
    connect?: CategoryWhereUniqueInput
  }

  export type ProductVariantCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductVariantCreateWithoutProductInput, ProductVariantUncheckedCreateWithoutProductInput> | ProductVariantCreateWithoutProductInput[] | ProductVariantUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductVariantCreateOrConnectWithoutProductInput | ProductVariantCreateOrConnectWithoutProductInput[]
    createMany?: ProductVariantCreateManyProductInputEnvelope
    connect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
  }

  export type SubProductCreateNestedManyWithoutProductInput = {
    create?: XOR<SubProductCreateWithoutProductInput, SubProductUncheckedCreateWithoutProductInput> | SubProductCreateWithoutProductInput[] | SubProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SubProductCreateOrConnectWithoutProductInput | SubProductCreateOrConnectWithoutProductInput[]
    createMany?: SubProductCreateManyProductInputEnvelope
    connect?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
  }

  export type CartSubProductCreateNestedManyWithoutProductInput = {
    create?: XOR<CartSubProductCreateWithoutProductInput, CartSubProductUncheckedCreateWithoutProductInput> | CartSubProductCreateWithoutProductInput[] | CartSubProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: CartSubProductCreateOrConnectWithoutProductInput | CartSubProductCreateOrConnectWithoutProductInput[]
    createMany?: CartSubProductCreateManyProductInputEnvelope
    connect?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
  }

  export type IngredientUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<IngredientCreateWithoutProductInput, IngredientUncheckedCreateWithoutProductInput> | IngredientCreateWithoutProductInput[] | IngredientUncheckedCreateWithoutProductInput[]
    connectOrCreate?: IngredientCreateOrConnectWithoutProductInput | IngredientCreateOrConnectWithoutProductInput[]
    connect?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
  }

  export type CartItemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<CartItemCreateWithoutProductInput, CartItemUncheckedCreateWithoutProductInput> | CartItemCreateWithoutProductInput[] | CartItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutProductInput | CartItemCreateOrConnectWithoutProductInput[]
    createMany?: CartItemCreateManyProductInputEnvelope
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type ProductVariantUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductVariantCreateWithoutProductInput, ProductVariantUncheckedCreateWithoutProductInput> | ProductVariantCreateWithoutProductInput[] | ProductVariantUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductVariantCreateOrConnectWithoutProductInput | ProductVariantCreateOrConnectWithoutProductInput[]
    createMany?: ProductVariantCreateManyProductInputEnvelope
    connect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
  }

  export type SubProductUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<SubProductCreateWithoutProductInput, SubProductUncheckedCreateWithoutProductInput> | SubProductCreateWithoutProductInput[] | SubProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SubProductCreateOrConnectWithoutProductInput | SubProductCreateOrConnectWithoutProductInput[]
    createMany?: SubProductCreateManyProductInputEnvelope
    connect?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
  }

  export type CartSubProductUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<CartSubProductCreateWithoutProductInput, CartSubProductUncheckedCreateWithoutProductInput> | CartSubProductCreateWithoutProductInput[] | CartSubProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: CartSubProductCreateOrConnectWithoutProductInput | CartSubProductCreateOrConnectWithoutProductInput[]
    createMany?: CartSubProductCreateManyProductInputEnvelope
    connect?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
  }

  export type IngredientUpdateManyWithoutProductNestedInput = {
    create?: XOR<IngredientCreateWithoutProductInput, IngredientUncheckedCreateWithoutProductInput> | IngredientCreateWithoutProductInput[] | IngredientUncheckedCreateWithoutProductInput[]
    connectOrCreate?: IngredientCreateOrConnectWithoutProductInput | IngredientCreateOrConnectWithoutProductInput[]
    upsert?: IngredientUpsertWithWhereUniqueWithoutProductInput | IngredientUpsertWithWhereUniqueWithoutProductInput[]
    set?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    disconnect?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    delete?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    connect?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    update?: IngredientUpdateWithWhereUniqueWithoutProductInput | IngredientUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: IngredientUpdateManyWithWhereWithoutProductInput | IngredientUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: IngredientScalarWhereInput | IngredientScalarWhereInput[]
  }

  export type CartItemUpdateManyWithoutProductNestedInput = {
    create?: XOR<CartItemCreateWithoutProductInput, CartItemUncheckedCreateWithoutProductInput> | CartItemCreateWithoutProductInput[] | CartItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutProductInput | CartItemCreateOrConnectWithoutProductInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutProductInput | CartItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: CartItemCreateManyProductInputEnvelope
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutProductInput | CartItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutProductInput | CartItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type CategoryUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProductsInput
    upsert?: CategoryUpsertWithoutProductsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutProductsInput, CategoryUpdateWithoutProductsInput>, CategoryUncheckedUpdateWithoutProductsInput>
  }

  export type ProductVariantUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductVariantCreateWithoutProductInput, ProductVariantUncheckedCreateWithoutProductInput> | ProductVariantCreateWithoutProductInput[] | ProductVariantUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductVariantCreateOrConnectWithoutProductInput | ProductVariantCreateOrConnectWithoutProductInput[]
    upsert?: ProductVariantUpsertWithWhereUniqueWithoutProductInput | ProductVariantUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductVariantCreateManyProductInputEnvelope
    set?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    disconnect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    delete?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    connect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    update?: ProductVariantUpdateWithWhereUniqueWithoutProductInput | ProductVariantUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductVariantUpdateManyWithWhereWithoutProductInput | ProductVariantUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductVariantScalarWhereInput | ProductVariantScalarWhereInput[]
  }

  export type SubProductUpdateManyWithoutProductNestedInput = {
    create?: XOR<SubProductCreateWithoutProductInput, SubProductUncheckedCreateWithoutProductInput> | SubProductCreateWithoutProductInput[] | SubProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SubProductCreateOrConnectWithoutProductInput | SubProductCreateOrConnectWithoutProductInput[]
    upsert?: SubProductUpsertWithWhereUniqueWithoutProductInput | SubProductUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: SubProductCreateManyProductInputEnvelope
    set?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    disconnect?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    delete?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    connect?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    update?: SubProductUpdateWithWhereUniqueWithoutProductInput | SubProductUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: SubProductUpdateManyWithWhereWithoutProductInput | SubProductUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: SubProductScalarWhereInput | SubProductScalarWhereInput[]
  }

  export type CartSubProductUpdateManyWithoutProductNestedInput = {
    create?: XOR<CartSubProductCreateWithoutProductInput, CartSubProductUncheckedCreateWithoutProductInput> | CartSubProductCreateWithoutProductInput[] | CartSubProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: CartSubProductCreateOrConnectWithoutProductInput | CartSubProductCreateOrConnectWithoutProductInput[]
    upsert?: CartSubProductUpsertWithWhereUniqueWithoutProductInput | CartSubProductUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: CartSubProductCreateManyProductInputEnvelope
    set?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    disconnect?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    delete?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    connect?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    update?: CartSubProductUpdateWithWhereUniqueWithoutProductInput | CartSubProductUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: CartSubProductUpdateManyWithWhereWithoutProductInput | CartSubProductUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: CartSubProductScalarWhereInput | CartSubProductScalarWhereInput[]
  }

  export type IngredientUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<IngredientCreateWithoutProductInput, IngredientUncheckedCreateWithoutProductInput> | IngredientCreateWithoutProductInput[] | IngredientUncheckedCreateWithoutProductInput[]
    connectOrCreate?: IngredientCreateOrConnectWithoutProductInput | IngredientCreateOrConnectWithoutProductInput[]
    upsert?: IngredientUpsertWithWhereUniqueWithoutProductInput | IngredientUpsertWithWhereUniqueWithoutProductInput[]
    set?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    disconnect?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    delete?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    connect?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    update?: IngredientUpdateWithWhereUniqueWithoutProductInput | IngredientUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: IngredientUpdateManyWithWhereWithoutProductInput | IngredientUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: IngredientScalarWhereInput | IngredientScalarWhereInput[]
  }

  export type CartItemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<CartItemCreateWithoutProductInput, CartItemUncheckedCreateWithoutProductInput> | CartItemCreateWithoutProductInput[] | CartItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutProductInput | CartItemCreateOrConnectWithoutProductInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutProductInput | CartItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: CartItemCreateManyProductInputEnvelope
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutProductInput | CartItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutProductInput | CartItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type ProductVariantUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductVariantCreateWithoutProductInput, ProductVariantUncheckedCreateWithoutProductInput> | ProductVariantCreateWithoutProductInput[] | ProductVariantUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductVariantCreateOrConnectWithoutProductInput | ProductVariantCreateOrConnectWithoutProductInput[]
    upsert?: ProductVariantUpsertWithWhereUniqueWithoutProductInput | ProductVariantUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductVariantCreateManyProductInputEnvelope
    set?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    disconnect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    delete?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    connect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    update?: ProductVariantUpdateWithWhereUniqueWithoutProductInput | ProductVariantUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductVariantUpdateManyWithWhereWithoutProductInput | ProductVariantUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductVariantScalarWhereInput | ProductVariantScalarWhereInput[]
  }

  export type SubProductUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<SubProductCreateWithoutProductInput, SubProductUncheckedCreateWithoutProductInput> | SubProductCreateWithoutProductInput[] | SubProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: SubProductCreateOrConnectWithoutProductInput | SubProductCreateOrConnectWithoutProductInput[]
    upsert?: SubProductUpsertWithWhereUniqueWithoutProductInput | SubProductUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: SubProductCreateManyProductInputEnvelope
    set?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    disconnect?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    delete?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    connect?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    update?: SubProductUpdateWithWhereUniqueWithoutProductInput | SubProductUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: SubProductUpdateManyWithWhereWithoutProductInput | SubProductUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: SubProductScalarWhereInput | SubProductScalarWhereInput[]
  }

  export type CartSubProductUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<CartSubProductCreateWithoutProductInput, CartSubProductUncheckedCreateWithoutProductInput> | CartSubProductCreateWithoutProductInput[] | CartSubProductUncheckedCreateWithoutProductInput[]
    connectOrCreate?: CartSubProductCreateOrConnectWithoutProductInput | CartSubProductCreateOrConnectWithoutProductInput[]
    upsert?: CartSubProductUpsertWithWhereUniqueWithoutProductInput | CartSubProductUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: CartSubProductCreateManyProductInputEnvelope
    set?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    disconnect?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    delete?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    connect?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    update?: CartSubProductUpdateWithWhereUniqueWithoutProductInput | CartSubProductUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: CartSubProductUpdateManyWithWhereWithoutProductInput | CartSubProductUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: CartSubProductScalarWhereInput | CartSubProductScalarWhereInput[]
  }

  export type ParametersCreateNestedOneWithoutProductVariantInput = {
    create?: XOR<ParametersCreateWithoutProductVariantInput, ParametersUncheckedCreateWithoutProductVariantInput>
    connectOrCreate?: ParametersCreateOrConnectWithoutProductVariantInput
    connect?: ParametersWhereUniqueInput
  }

  export type SizesCreateNestedManyWithoutProductVariantInput = {
    create?: XOR<SizesCreateWithoutProductVariantInput, SizesUncheckedCreateWithoutProductVariantInput> | SizesCreateWithoutProductVariantInput[] | SizesUncheckedCreateWithoutProductVariantInput[]
    connectOrCreate?: SizesCreateOrConnectWithoutProductVariantInput | SizesCreateOrConnectWithoutProductVariantInput[]
    createMany?: SizesCreateManyProductVariantInputEnvelope
    connect?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
  }

  export type ProductAttributeCreateNestedOneWithoutProductVariantInput = {
    create?: XOR<ProductAttributeCreateWithoutProductVariantInput, ProductAttributeUncheckedCreateWithoutProductVariantInput>
    connectOrCreate?: ProductAttributeCreateOrConnectWithoutProductVariantInput
    connect?: ProductAttributeWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutProductVariantInput = {
    create?: XOR<ProductCreateWithoutProductVariantInput, ProductUncheckedCreateWithoutProductVariantInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProductVariantInput
    connect?: ProductWhereUniqueInput
  }

  export type SubProductCreateNestedManyWithoutParentVariantInput = {
    create?: XOR<SubProductCreateWithoutParentVariantInput, SubProductUncheckedCreateWithoutParentVariantInput> | SubProductCreateWithoutParentVariantInput[] | SubProductUncheckedCreateWithoutParentVariantInput[]
    connectOrCreate?: SubProductCreateOrConnectWithoutParentVariantInput | SubProductCreateOrConnectWithoutParentVariantInput[]
    createMany?: SubProductCreateManyParentVariantInputEnvelope
    connect?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
  }

  export type SubProductCreateNestedManyWithoutVariantInput = {
    create?: XOR<SubProductCreateWithoutVariantInput, SubProductUncheckedCreateWithoutVariantInput> | SubProductCreateWithoutVariantInput[] | SubProductUncheckedCreateWithoutVariantInput[]
    connectOrCreate?: SubProductCreateOrConnectWithoutVariantInput | SubProductCreateOrConnectWithoutVariantInput[]
    createMany?: SubProductCreateManyVariantInputEnvelope
    connect?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
  }

  export type CartItemCreateNestedManyWithoutProductVariantInput = {
    create?: XOR<CartItemCreateWithoutProductVariantInput, CartItemUncheckedCreateWithoutProductVariantInput> | CartItemCreateWithoutProductVariantInput[] | CartItemUncheckedCreateWithoutProductVariantInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutProductVariantInput | CartItemCreateOrConnectWithoutProductVariantInput[]
    createMany?: CartItemCreateManyProductVariantInputEnvelope
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type CartSubProductCreateNestedManyWithoutVariantInput = {
    create?: XOR<CartSubProductCreateWithoutVariantInput, CartSubProductUncheckedCreateWithoutVariantInput> | CartSubProductCreateWithoutVariantInput[] | CartSubProductUncheckedCreateWithoutVariantInput[]
    connectOrCreate?: CartSubProductCreateOrConnectWithoutVariantInput | CartSubProductCreateOrConnectWithoutVariantInput[]
    createMany?: CartSubProductCreateManyVariantInputEnvelope
    connect?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
  }

  export type SizesUncheckedCreateNestedManyWithoutProductVariantInput = {
    create?: XOR<SizesCreateWithoutProductVariantInput, SizesUncheckedCreateWithoutProductVariantInput> | SizesCreateWithoutProductVariantInput[] | SizesUncheckedCreateWithoutProductVariantInput[]
    connectOrCreate?: SizesCreateOrConnectWithoutProductVariantInput | SizesCreateOrConnectWithoutProductVariantInput[]
    createMany?: SizesCreateManyProductVariantInputEnvelope
    connect?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
  }

  export type ProductAttributeUncheckedCreateNestedOneWithoutProductVariantInput = {
    create?: XOR<ProductAttributeCreateWithoutProductVariantInput, ProductAttributeUncheckedCreateWithoutProductVariantInput>
    connectOrCreate?: ProductAttributeCreateOrConnectWithoutProductVariantInput
    connect?: ProductAttributeWhereUniqueInput
  }

  export type SubProductUncheckedCreateNestedManyWithoutParentVariantInput = {
    create?: XOR<SubProductCreateWithoutParentVariantInput, SubProductUncheckedCreateWithoutParentVariantInput> | SubProductCreateWithoutParentVariantInput[] | SubProductUncheckedCreateWithoutParentVariantInput[]
    connectOrCreate?: SubProductCreateOrConnectWithoutParentVariantInput | SubProductCreateOrConnectWithoutParentVariantInput[]
    createMany?: SubProductCreateManyParentVariantInputEnvelope
    connect?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
  }

  export type SubProductUncheckedCreateNestedManyWithoutVariantInput = {
    create?: XOR<SubProductCreateWithoutVariantInput, SubProductUncheckedCreateWithoutVariantInput> | SubProductCreateWithoutVariantInput[] | SubProductUncheckedCreateWithoutVariantInput[]
    connectOrCreate?: SubProductCreateOrConnectWithoutVariantInput | SubProductCreateOrConnectWithoutVariantInput[]
    createMany?: SubProductCreateManyVariantInputEnvelope
    connect?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
  }

  export type CartItemUncheckedCreateNestedManyWithoutProductVariantInput = {
    create?: XOR<CartItemCreateWithoutProductVariantInput, CartItemUncheckedCreateWithoutProductVariantInput> | CartItemCreateWithoutProductVariantInput[] | CartItemUncheckedCreateWithoutProductVariantInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutProductVariantInput | CartItemCreateOrConnectWithoutProductVariantInput[]
    createMany?: CartItemCreateManyProductVariantInputEnvelope
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type CartSubProductUncheckedCreateNestedManyWithoutVariantInput = {
    create?: XOR<CartSubProductCreateWithoutVariantInput, CartSubProductUncheckedCreateWithoutVariantInput> | CartSubProductCreateWithoutVariantInput[] | CartSubProductUncheckedCreateWithoutVariantInput[]
    connectOrCreate?: CartSubProductCreateOrConnectWithoutVariantInput | CartSubProductCreateOrConnectWithoutVariantInput[]
    createMany?: CartSubProductCreateManyVariantInputEnvelope
    connect?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
  }

  export type ParametersUpdateOneWithoutProductVariantNestedInput = {
    create?: XOR<ParametersCreateWithoutProductVariantInput, ParametersUncheckedCreateWithoutProductVariantInput>
    connectOrCreate?: ParametersCreateOrConnectWithoutProductVariantInput
    upsert?: ParametersUpsertWithoutProductVariantInput
    disconnect?: ParametersWhereInput | boolean
    delete?: ParametersWhereInput | boolean
    connect?: ParametersWhereUniqueInput
    update?: XOR<XOR<ParametersUpdateToOneWithWhereWithoutProductVariantInput, ParametersUpdateWithoutProductVariantInput>, ParametersUncheckedUpdateWithoutProductVariantInput>
  }

  export type SizesUpdateManyWithoutProductVariantNestedInput = {
    create?: XOR<SizesCreateWithoutProductVariantInput, SizesUncheckedCreateWithoutProductVariantInput> | SizesCreateWithoutProductVariantInput[] | SizesUncheckedCreateWithoutProductVariantInput[]
    connectOrCreate?: SizesCreateOrConnectWithoutProductVariantInput | SizesCreateOrConnectWithoutProductVariantInput[]
    upsert?: SizesUpsertWithWhereUniqueWithoutProductVariantInput | SizesUpsertWithWhereUniqueWithoutProductVariantInput[]
    createMany?: SizesCreateManyProductVariantInputEnvelope
    set?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
    disconnect?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
    delete?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
    connect?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
    update?: SizesUpdateWithWhereUniqueWithoutProductVariantInput | SizesUpdateWithWhereUniqueWithoutProductVariantInput[]
    updateMany?: SizesUpdateManyWithWhereWithoutProductVariantInput | SizesUpdateManyWithWhereWithoutProductVariantInput[]
    deleteMany?: SizesScalarWhereInput | SizesScalarWhereInput[]
  }

  export type ProductAttributeUpdateOneWithoutProductVariantNestedInput = {
    create?: XOR<ProductAttributeCreateWithoutProductVariantInput, ProductAttributeUncheckedCreateWithoutProductVariantInput>
    connectOrCreate?: ProductAttributeCreateOrConnectWithoutProductVariantInput
    upsert?: ProductAttributeUpsertWithoutProductVariantInput
    disconnect?: ProductAttributeWhereInput | boolean
    delete?: ProductAttributeWhereInput | boolean
    connect?: ProductAttributeWhereUniqueInput
    update?: XOR<XOR<ProductAttributeUpdateToOneWithWhereWithoutProductVariantInput, ProductAttributeUpdateWithoutProductVariantInput>, ProductAttributeUncheckedUpdateWithoutProductVariantInput>
  }

  export type ProductUpdateOneRequiredWithoutProductVariantNestedInput = {
    create?: XOR<ProductCreateWithoutProductVariantInput, ProductUncheckedCreateWithoutProductVariantInput>
    connectOrCreate?: ProductCreateOrConnectWithoutProductVariantInput
    upsert?: ProductUpsertWithoutProductVariantInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutProductVariantInput, ProductUpdateWithoutProductVariantInput>, ProductUncheckedUpdateWithoutProductVariantInput>
  }

  export type SubProductUpdateManyWithoutParentVariantNestedInput = {
    create?: XOR<SubProductCreateWithoutParentVariantInput, SubProductUncheckedCreateWithoutParentVariantInput> | SubProductCreateWithoutParentVariantInput[] | SubProductUncheckedCreateWithoutParentVariantInput[]
    connectOrCreate?: SubProductCreateOrConnectWithoutParentVariantInput | SubProductCreateOrConnectWithoutParentVariantInput[]
    upsert?: SubProductUpsertWithWhereUniqueWithoutParentVariantInput | SubProductUpsertWithWhereUniqueWithoutParentVariantInput[]
    createMany?: SubProductCreateManyParentVariantInputEnvelope
    set?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    disconnect?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    delete?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    connect?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    update?: SubProductUpdateWithWhereUniqueWithoutParentVariantInput | SubProductUpdateWithWhereUniqueWithoutParentVariantInput[]
    updateMany?: SubProductUpdateManyWithWhereWithoutParentVariantInput | SubProductUpdateManyWithWhereWithoutParentVariantInput[]
    deleteMany?: SubProductScalarWhereInput | SubProductScalarWhereInput[]
  }

  export type SubProductUpdateManyWithoutVariantNestedInput = {
    create?: XOR<SubProductCreateWithoutVariantInput, SubProductUncheckedCreateWithoutVariantInput> | SubProductCreateWithoutVariantInput[] | SubProductUncheckedCreateWithoutVariantInput[]
    connectOrCreate?: SubProductCreateOrConnectWithoutVariantInput | SubProductCreateOrConnectWithoutVariantInput[]
    upsert?: SubProductUpsertWithWhereUniqueWithoutVariantInput | SubProductUpsertWithWhereUniqueWithoutVariantInput[]
    createMany?: SubProductCreateManyVariantInputEnvelope
    set?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    disconnect?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    delete?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    connect?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    update?: SubProductUpdateWithWhereUniqueWithoutVariantInput | SubProductUpdateWithWhereUniqueWithoutVariantInput[]
    updateMany?: SubProductUpdateManyWithWhereWithoutVariantInput | SubProductUpdateManyWithWhereWithoutVariantInput[]
    deleteMany?: SubProductScalarWhereInput | SubProductScalarWhereInput[]
  }

  export type CartItemUpdateManyWithoutProductVariantNestedInput = {
    create?: XOR<CartItemCreateWithoutProductVariantInput, CartItemUncheckedCreateWithoutProductVariantInput> | CartItemCreateWithoutProductVariantInput[] | CartItemUncheckedCreateWithoutProductVariantInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutProductVariantInput | CartItemCreateOrConnectWithoutProductVariantInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutProductVariantInput | CartItemUpsertWithWhereUniqueWithoutProductVariantInput[]
    createMany?: CartItemCreateManyProductVariantInputEnvelope
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutProductVariantInput | CartItemUpdateWithWhereUniqueWithoutProductVariantInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutProductVariantInput | CartItemUpdateManyWithWhereWithoutProductVariantInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type CartSubProductUpdateManyWithoutVariantNestedInput = {
    create?: XOR<CartSubProductCreateWithoutVariantInput, CartSubProductUncheckedCreateWithoutVariantInput> | CartSubProductCreateWithoutVariantInput[] | CartSubProductUncheckedCreateWithoutVariantInput[]
    connectOrCreate?: CartSubProductCreateOrConnectWithoutVariantInput | CartSubProductCreateOrConnectWithoutVariantInput[]
    upsert?: CartSubProductUpsertWithWhereUniqueWithoutVariantInput | CartSubProductUpsertWithWhereUniqueWithoutVariantInput[]
    createMany?: CartSubProductCreateManyVariantInputEnvelope
    set?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    disconnect?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    delete?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    connect?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    update?: CartSubProductUpdateWithWhereUniqueWithoutVariantInput | CartSubProductUpdateWithWhereUniqueWithoutVariantInput[]
    updateMany?: CartSubProductUpdateManyWithWhereWithoutVariantInput | CartSubProductUpdateManyWithWhereWithoutVariantInput[]
    deleteMany?: CartSubProductScalarWhereInput | CartSubProductScalarWhereInput[]
  }

  export type SizesUncheckedUpdateManyWithoutProductVariantNestedInput = {
    create?: XOR<SizesCreateWithoutProductVariantInput, SizesUncheckedCreateWithoutProductVariantInput> | SizesCreateWithoutProductVariantInput[] | SizesUncheckedCreateWithoutProductVariantInput[]
    connectOrCreate?: SizesCreateOrConnectWithoutProductVariantInput | SizesCreateOrConnectWithoutProductVariantInput[]
    upsert?: SizesUpsertWithWhereUniqueWithoutProductVariantInput | SizesUpsertWithWhereUniqueWithoutProductVariantInput[]
    createMany?: SizesCreateManyProductVariantInputEnvelope
    set?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
    disconnect?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
    delete?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
    connect?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
    update?: SizesUpdateWithWhereUniqueWithoutProductVariantInput | SizesUpdateWithWhereUniqueWithoutProductVariantInput[]
    updateMany?: SizesUpdateManyWithWhereWithoutProductVariantInput | SizesUpdateManyWithWhereWithoutProductVariantInput[]
    deleteMany?: SizesScalarWhereInput | SizesScalarWhereInput[]
  }

  export type ProductAttributeUncheckedUpdateOneWithoutProductVariantNestedInput = {
    create?: XOR<ProductAttributeCreateWithoutProductVariantInput, ProductAttributeUncheckedCreateWithoutProductVariantInput>
    connectOrCreate?: ProductAttributeCreateOrConnectWithoutProductVariantInput
    upsert?: ProductAttributeUpsertWithoutProductVariantInput
    disconnect?: ProductAttributeWhereInput | boolean
    delete?: ProductAttributeWhereInput | boolean
    connect?: ProductAttributeWhereUniqueInput
    update?: XOR<XOR<ProductAttributeUpdateToOneWithWhereWithoutProductVariantInput, ProductAttributeUpdateWithoutProductVariantInput>, ProductAttributeUncheckedUpdateWithoutProductVariantInput>
  }

  export type SubProductUncheckedUpdateManyWithoutParentVariantNestedInput = {
    create?: XOR<SubProductCreateWithoutParentVariantInput, SubProductUncheckedCreateWithoutParentVariantInput> | SubProductCreateWithoutParentVariantInput[] | SubProductUncheckedCreateWithoutParentVariantInput[]
    connectOrCreate?: SubProductCreateOrConnectWithoutParentVariantInput | SubProductCreateOrConnectWithoutParentVariantInput[]
    upsert?: SubProductUpsertWithWhereUniqueWithoutParentVariantInput | SubProductUpsertWithWhereUniqueWithoutParentVariantInput[]
    createMany?: SubProductCreateManyParentVariantInputEnvelope
    set?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    disconnect?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    delete?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    connect?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    update?: SubProductUpdateWithWhereUniqueWithoutParentVariantInput | SubProductUpdateWithWhereUniqueWithoutParentVariantInput[]
    updateMany?: SubProductUpdateManyWithWhereWithoutParentVariantInput | SubProductUpdateManyWithWhereWithoutParentVariantInput[]
    deleteMany?: SubProductScalarWhereInput | SubProductScalarWhereInput[]
  }

  export type SubProductUncheckedUpdateManyWithoutVariantNestedInput = {
    create?: XOR<SubProductCreateWithoutVariantInput, SubProductUncheckedCreateWithoutVariantInput> | SubProductCreateWithoutVariantInput[] | SubProductUncheckedCreateWithoutVariantInput[]
    connectOrCreate?: SubProductCreateOrConnectWithoutVariantInput | SubProductCreateOrConnectWithoutVariantInput[]
    upsert?: SubProductUpsertWithWhereUniqueWithoutVariantInput | SubProductUpsertWithWhereUniqueWithoutVariantInput[]
    createMany?: SubProductCreateManyVariantInputEnvelope
    set?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    disconnect?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    delete?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    connect?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    update?: SubProductUpdateWithWhereUniqueWithoutVariantInput | SubProductUpdateWithWhereUniqueWithoutVariantInput[]
    updateMany?: SubProductUpdateManyWithWhereWithoutVariantInput | SubProductUpdateManyWithWhereWithoutVariantInput[]
    deleteMany?: SubProductScalarWhereInput | SubProductScalarWhereInput[]
  }

  export type CartItemUncheckedUpdateManyWithoutProductVariantNestedInput = {
    create?: XOR<CartItemCreateWithoutProductVariantInput, CartItemUncheckedCreateWithoutProductVariantInput> | CartItemCreateWithoutProductVariantInput[] | CartItemUncheckedCreateWithoutProductVariantInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutProductVariantInput | CartItemCreateOrConnectWithoutProductVariantInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutProductVariantInput | CartItemUpsertWithWhereUniqueWithoutProductVariantInput[]
    createMany?: CartItemCreateManyProductVariantInputEnvelope
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutProductVariantInput | CartItemUpdateWithWhereUniqueWithoutProductVariantInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutProductVariantInput | CartItemUpdateManyWithWhereWithoutProductVariantInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type CartSubProductUncheckedUpdateManyWithoutVariantNestedInput = {
    create?: XOR<CartSubProductCreateWithoutVariantInput, CartSubProductUncheckedCreateWithoutVariantInput> | CartSubProductCreateWithoutVariantInput[] | CartSubProductUncheckedCreateWithoutVariantInput[]
    connectOrCreate?: CartSubProductCreateOrConnectWithoutVariantInput | CartSubProductCreateOrConnectWithoutVariantInput[]
    upsert?: CartSubProductUpsertWithWhereUniqueWithoutVariantInput | CartSubProductUpsertWithWhereUniqueWithoutVariantInput[]
    createMany?: CartSubProductCreateManyVariantInputEnvelope
    set?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    disconnect?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    delete?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    connect?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    update?: CartSubProductUpdateWithWhereUniqueWithoutVariantInput | CartSubProductUpdateWithWhereUniqueWithoutVariantInput[]
    updateMany?: CartSubProductUpdateManyWithWhereWithoutVariantInput | CartSubProductUpdateManyWithWhereWithoutVariantInput[]
    deleteMany?: CartSubProductScalarWhereInput | CartSubProductScalarWhereInput[]
  }

  export type ProductCreateNestedOneWithoutSubProductInput = {
    create?: XOR<ProductCreateWithoutSubProductInput, ProductUncheckedCreateWithoutSubProductInput>
    connectOrCreate?: ProductCreateOrConnectWithoutSubProductInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductVariantCreateNestedOneWithoutParentSubProductInput = {
    create?: XOR<ProductVariantCreateWithoutParentSubProductInput, ProductVariantUncheckedCreateWithoutParentSubProductInput>
    connectOrCreate?: ProductVariantCreateOrConnectWithoutParentSubProductInput
    connect?: ProductVariantWhereUniqueInput
  }

  export type ProductVariantCreateNestedOneWithoutSubProductInput = {
    create?: XOR<ProductVariantCreateWithoutSubProductInput, ProductVariantUncheckedCreateWithoutSubProductInput>
    connectOrCreate?: ProductVariantCreateOrConnectWithoutSubProductInput
    connect?: ProductVariantWhereUniqueInput
  }

  export type SizesCreateNestedOneWithoutSubProductInput = {
    create?: XOR<SizesCreateWithoutSubProductInput, SizesUncheckedCreateWithoutSubProductInput>
    connectOrCreate?: SizesCreateOrConnectWithoutSubProductInput
    connect?: SizesWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutSubProductNestedInput = {
    create?: XOR<ProductCreateWithoutSubProductInput, ProductUncheckedCreateWithoutSubProductInput>
    connectOrCreate?: ProductCreateOrConnectWithoutSubProductInput
    upsert?: ProductUpsertWithoutSubProductInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutSubProductInput, ProductUpdateWithoutSubProductInput>, ProductUncheckedUpdateWithoutSubProductInput>
  }

  export type ProductVariantUpdateOneRequiredWithoutParentSubProductNestedInput = {
    create?: XOR<ProductVariantCreateWithoutParentSubProductInput, ProductVariantUncheckedCreateWithoutParentSubProductInput>
    connectOrCreate?: ProductVariantCreateOrConnectWithoutParentSubProductInput
    upsert?: ProductVariantUpsertWithoutParentSubProductInput
    connect?: ProductVariantWhereUniqueInput
    update?: XOR<XOR<ProductVariantUpdateToOneWithWhereWithoutParentSubProductInput, ProductVariantUpdateWithoutParentSubProductInput>, ProductVariantUncheckedUpdateWithoutParentSubProductInput>
  }

  export type ProductVariantUpdateOneRequiredWithoutSubProductNestedInput = {
    create?: XOR<ProductVariantCreateWithoutSubProductInput, ProductVariantUncheckedCreateWithoutSubProductInput>
    connectOrCreate?: ProductVariantCreateOrConnectWithoutSubProductInput
    upsert?: ProductVariantUpsertWithoutSubProductInput
    connect?: ProductVariantWhereUniqueInput
    update?: XOR<XOR<ProductVariantUpdateToOneWithWhereWithoutSubProductInput, ProductVariantUpdateWithoutSubProductInput>, ProductVariantUncheckedUpdateWithoutSubProductInput>
  }

  export type SizesUpdateOneRequiredWithoutSubProductNestedInput = {
    create?: XOR<SizesCreateWithoutSubProductInput, SizesUncheckedCreateWithoutSubProductInput>
    connectOrCreate?: SizesCreateOrConnectWithoutSubProductInput
    upsert?: SizesUpsertWithoutSubProductInput
    connect?: SizesWhereUniqueInput
    update?: XOR<XOR<SizesUpdateToOneWithWhereWithoutSubProductInput, SizesUpdateWithoutSubProductInput>, SizesUncheckedUpdateWithoutSubProductInput>
  }

  export type ProductVariantCreateNestedOneWithoutProductAttributeInput = {
    create?: XOR<ProductVariantCreateWithoutProductAttributeInput, ProductVariantUncheckedCreateWithoutProductAttributeInput>
    connectOrCreate?: ProductVariantCreateOrConnectWithoutProductAttributeInput
    connect?: ProductVariantWhereUniqueInput
  }

  export type VariantTypesCreateNestedOneWithoutProductAttributeInput = {
    create?: XOR<VariantTypesCreateWithoutProductAttributeInput, VariantTypesUncheckedCreateWithoutProductAttributeInput>
    connectOrCreate?: VariantTypesCreateOrConnectWithoutProductAttributeInput
    connect?: VariantTypesWhereUniqueInput
  }

  export type ProductVariantUpdateOneRequiredWithoutProductAttributeNestedInput = {
    create?: XOR<ProductVariantCreateWithoutProductAttributeInput, ProductVariantUncheckedCreateWithoutProductAttributeInput>
    connectOrCreate?: ProductVariantCreateOrConnectWithoutProductAttributeInput
    upsert?: ProductVariantUpsertWithoutProductAttributeInput
    connect?: ProductVariantWhereUniqueInput
    update?: XOR<XOR<ProductVariantUpdateToOneWithWhereWithoutProductAttributeInput, ProductVariantUpdateWithoutProductAttributeInput>, ProductVariantUncheckedUpdateWithoutProductAttributeInput>
  }

  export type VariantTypesUpdateOneWithoutProductAttributeNestedInput = {
    create?: XOR<VariantTypesCreateWithoutProductAttributeInput, VariantTypesUncheckedCreateWithoutProductAttributeInput>
    connectOrCreate?: VariantTypesCreateOrConnectWithoutProductAttributeInput
    upsert?: VariantTypesUpsertWithoutProductAttributeInput
    disconnect?: VariantTypesWhereInput | boolean
    delete?: VariantTypesWhereInput | boolean
    connect?: VariantTypesWhereUniqueInput
    update?: XOR<XOR<VariantTypesUpdateToOneWithWhereWithoutProductAttributeInput, VariantTypesUpdateWithoutProductAttributeInput>, VariantTypesUncheckedUpdateWithoutProductAttributeInput>
  }

  export type CategoryCreateNestedManyWithoutVariantTypesInput = {
    create?: XOR<CategoryCreateWithoutVariantTypesInput, CategoryUncheckedCreateWithoutVariantTypesInput> | CategoryCreateWithoutVariantTypesInput[] | CategoryUncheckedCreateWithoutVariantTypesInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutVariantTypesInput | CategoryCreateOrConnectWithoutVariantTypesInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type ProductAttributeCreateNestedManyWithoutVariantTypesInput = {
    create?: XOR<ProductAttributeCreateWithoutVariantTypesInput, ProductAttributeUncheckedCreateWithoutVariantTypesInput> | ProductAttributeCreateWithoutVariantTypesInput[] | ProductAttributeUncheckedCreateWithoutVariantTypesInput[]
    connectOrCreate?: ProductAttributeCreateOrConnectWithoutVariantTypesInput | ProductAttributeCreateOrConnectWithoutVariantTypesInput[]
    createMany?: ProductAttributeCreateManyVariantTypesInputEnvelope
    connect?: ProductAttributeWhereUniqueInput | ProductAttributeWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutVariantTypesInput = {
    create?: XOR<CategoryCreateWithoutVariantTypesInput, CategoryUncheckedCreateWithoutVariantTypesInput> | CategoryCreateWithoutVariantTypesInput[] | CategoryUncheckedCreateWithoutVariantTypesInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutVariantTypesInput | CategoryCreateOrConnectWithoutVariantTypesInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type ProductAttributeUncheckedCreateNestedManyWithoutVariantTypesInput = {
    create?: XOR<ProductAttributeCreateWithoutVariantTypesInput, ProductAttributeUncheckedCreateWithoutVariantTypesInput> | ProductAttributeCreateWithoutVariantTypesInput[] | ProductAttributeUncheckedCreateWithoutVariantTypesInput[]
    connectOrCreate?: ProductAttributeCreateOrConnectWithoutVariantTypesInput | ProductAttributeCreateOrConnectWithoutVariantTypesInput[]
    createMany?: ProductAttributeCreateManyVariantTypesInputEnvelope
    connect?: ProductAttributeWhereUniqueInput | ProductAttributeWhereUniqueInput[]
  }

  export type CategoryUpdateManyWithoutVariantTypesNestedInput = {
    create?: XOR<CategoryCreateWithoutVariantTypesInput, CategoryUncheckedCreateWithoutVariantTypesInput> | CategoryCreateWithoutVariantTypesInput[] | CategoryUncheckedCreateWithoutVariantTypesInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutVariantTypesInput | CategoryCreateOrConnectWithoutVariantTypesInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutVariantTypesInput | CategoryUpsertWithWhereUniqueWithoutVariantTypesInput[]
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutVariantTypesInput | CategoryUpdateWithWhereUniqueWithoutVariantTypesInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutVariantTypesInput | CategoryUpdateManyWithWhereWithoutVariantTypesInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type ProductAttributeUpdateManyWithoutVariantTypesNestedInput = {
    create?: XOR<ProductAttributeCreateWithoutVariantTypesInput, ProductAttributeUncheckedCreateWithoutVariantTypesInput> | ProductAttributeCreateWithoutVariantTypesInput[] | ProductAttributeUncheckedCreateWithoutVariantTypesInput[]
    connectOrCreate?: ProductAttributeCreateOrConnectWithoutVariantTypesInput | ProductAttributeCreateOrConnectWithoutVariantTypesInput[]
    upsert?: ProductAttributeUpsertWithWhereUniqueWithoutVariantTypesInput | ProductAttributeUpsertWithWhereUniqueWithoutVariantTypesInput[]
    createMany?: ProductAttributeCreateManyVariantTypesInputEnvelope
    set?: ProductAttributeWhereUniqueInput | ProductAttributeWhereUniqueInput[]
    disconnect?: ProductAttributeWhereUniqueInput | ProductAttributeWhereUniqueInput[]
    delete?: ProductAttributeWhereUniqueInput | ProductAttributeWhereUniqueInput[]
    connect?: ProductAttributeWhereUniqueInput | ProductAttributeWhereUniqueInput[]
    update?: ProductAttributeUpdateWithWhereUniqueWithoutVariantTypesInput | ProductAttributeUpdateWithWhereUniqueWithoutVariantTypesInput[]
    updateMany?: ProductAttributeUpdateManyWithWhereWithoutVariantTypesInput | ProductAttributeUpdateManyWithWhereWithoutVariantTypesInput[]
    deleteMany?: ProductAttributeScalarWhereInput | ProductAttributeScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutVariantTypesNestedInput = {
    create?: XOR<CategoryCreateWithoutVariantTypesInput, CategoryUncheckedCreateWithoutVariantTypesInput> | CategoryCreateWithoutVariantTypesInput[] | CategoryUncheckedCreateWithoutVariantTypesInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutVariantTypesInput | CategoryCreateOrConnectWithoutVariantTypesInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutVariantTypesInput | CategoryUpsertWithWhereUniqueWithoutVariantTypesInput[]
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutVariantTypesInput | CategoryUpdateWithWhereUniqueWithoutVariantTypesInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutVariantTypesInput | CategoryUpdateManyWithWhereWithoutVariantTypesInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type ProductAttributeUncheckedUpdateManyWithoutVariantTypesNestedInput = {
    create?: XOR<ProductAttributeCreateWithoutVariantTypesInput, ProductAttributeUncheckedCreateWithoutVariantTypesInput> | ProductAttributeCreateWithoutVariantTypesInput[] | ProductAttributeUncheckedCreateWithoutVariantTypesInput[]
    connectOrCreate?: ProductAttributeCreateOrConnectWithoutVariantTypesInput | ProductAttributeCreateOrConnectWithoutVariantTypesInput[]
    upsert?: ProductAttributeUpsertWithWhereUniqueWithoutVariantTypesInput | ProductAttributeUpsertWithWhereUniqueWithoutVariantTypesInput[]
    createMany?: ProductAttributeCreateManyVariantTypesInputEnvelope
    set?: ProductAttributeWhereUniqueInput | ProductAttributeWhereUniqueInput[]
    disconnect?: ProductAttributeWhereUniqueInput | ProductAttributeWhereUniqueInput[]
    delete?: ProductAttributeWhereUniqueInput | ProductAttributeWhereUniqueInput[]
    connect?: ProductAttributeWhereUniqueInput | ProductAttributeWhereUniqueInput[]
    update?: ProductAttributeUpdateWithWhereUniqueWithoutVariantTypesInput | ProductAttributeUpdateWithWhereUniqueWithoutVariantTypesInput[]
    updateMany?: ProductAttributeUpdateManyWithWhereWithoutVariantTypesInput | ProductAttributeUpdateManyWithWhereWithoutVariantTypesInput[]
    deleteMany?: ProductAttributeScalarWhereInput | ProductAttributeScalarWhereInput[]
  }

  export type CategoryCreateNestedManyWithoutParametersInput = {
    create?: XOR<CategoryCreateWithoutParametersInput, CategoryUncheckedCreateWithoutParametersInput> | CategoryCreateWithoutParametersInput[] | CategoryUncheckedCreateWithoutParametersInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParametersInput | CategoryCreateOrConnectWithoutParametersInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type ProductVariantCreateNestedManyWithoutParameterInput = {
    create?: XOR<ProductVariantCreateWithoutParameterInput, ProductVariantUncheckedCreateWithoutParameterInput> | ProductVariantCreateWithoutParameterInput[] | ProductVariantUncheckedCreateWithoutParameterInput[]
    connectOrCreate?: ProductVariantCreateOrConnectWithoutParameterInput | ProductVariantCreateOrConnectWithoutParameterInput[]
    createMany?: ProductVariantCreateManyParameterInputEnvelope
    connect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutParametersInput = {
    create?: XOR<CategoryCreateWithoutParametersInput, CategoryUncheckedCreateWithoutParametersInput> | CategoryCreateWithoutParametersInput[] | CategoryUncheckedCreateWithoutParametersInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParametersInput | CategoryCreateOrConnectWithoutParametersInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type ProductVariantUncheckedCreateNestedManyWithoutParameterInput = {
    create?: XOR<ProductVariantCreateWithoutParameterInput, ProductVariantUncheckedCreateWithoutParameterInput> | ProductVariantCreateWithoutParameterInput[] | ProductVariantUncheckedCreateWithoutParameterInput[]
    connectOrCreate?: ProductVariantCreateOrConnectWithoutParameterInput | ProductVariantCreateOrConnectWithoutParameterInput[]
    createMany?: ProductVariantCreateManyParameterInputEnvelope
    connect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
  }

  export type CategoryUpdateManyWithoutParametersNestedInput = {
    create?: XOR<CategoryCreateWithoutParametersInput, CategoryUncheckedCreateWithoutParametersInput> | CategoryCreateWithoutParametersInput[] | CategoryUncheckedCreateWithoutParametersInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParametersInput | CategoryCreateOrConnectWithoutParametersInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParametersInput | CategoryUpsertWithWhereUniqueWithoutParametersInput[]
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParametersInput | CategoryUpdateWithWhereUniqueWithoutParametersInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParametersInput | CategoryUpdateManyWithWhereWithoutParametersInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type ProductVariantUpdateManyWithoutParameterNestedInput = {
    create?: XOR<ProductVariantCreateWithoutParameterInput, ProductVariantUncheckedCreateWithoutParameterInput> | ProductVariantCreateWithoutParameterInput[] | ProductVariantUncheckedCreateWithoutParameterInput[]
    connectOrCreate?: ProductVariantCreateOrConnectWithoutParameterInput | ProductVariantCreateOrConnectWithoutParameterInput[]
    upsert?: ProductVariantUpsertWithWhereUniqueWithoutParameterInput | ProductVariantUpsertWithWhereUniqueWithoutParameterInput[]
    createMany?: ProductVariantCreateManyParameterInputEnvelope
    set?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    disconnect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    delete?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    connect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    update?: ProductVariantUpdateWithWhereUniqueWithoutParameterInput | ProductVariantUpdateWithWhereUniqueWithoutParameterInput[]
    updateMany?: ProductVariantUpdateManyWithWhereWithoutParameterInput | ProductVariantUpdateManyWithWhereWithoutParameterInput[]
    deleteMany?: ProductVariantScalarWhereInput | ProductVariantScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutParametersNestedInput = {
    create?: XOR<CategoryCreateWithoutParametersInput, CategoryUncheckedCreateWithoutParametersInput> | CategoryCreateWithoutParametersInput[] | CategoryUncheckedCreateWithoutParametersInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutParametersInput | CategoryCreateOrConnectWithoutParametersInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutParametersInput | CategoryUpsertWithWhereUniqueWithoutParametersInput[]
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutParametersInput | CategoryUpdateWithWhereUniqueWithoutParametersInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutParametersInput | CategoryUpdateManyWithWhereWithoutParametersInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type ProductVariantUncheckedUpdateManyWithoutParameterNestedInput = {
    create?: XOR<ProductVariantCreateWithoutParameterInput, ProductVariantUncheckedCreateWithoutParameterInput> | ProductVariantCreateWithoutParameterInput[] | ProductVariantUncheckedCreateWithoutParameterInput[]
    connectOrCreate?: ProductVariantCreateOrConnectWithoutParameterInput | ProductVariantCreateOrConnectWithoutParameterInput[]
    upsert?: ProductVariantUpsertWithWhereUniqueWithoutParameterInput | ProductVariantUpsertWithWhereUniqueWithoutParameterInput[]
    createMany?: ProductVariantCreateManyParameterInputEnvelope
    set?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    disconnect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    delete?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    connect?: ProductVariantWhereUniqueInput | ProductVariantWhereUniqueInput[]
    update?: ProductVariantUpdateWithWhereUniqueWithoutParameterInput | ProductVariantUpdateWithWhereUniqueWithoutParameterInput[]
    updateMany?: ProductVariantUpdateManyWithWhereWithoutParameterInput | ProductVariantUpdateManyWithWhereWithoutParameterInput[]
    deleteMany?: ProductVariantScalarWhereInput | ProductVariantScalarWhereInput[]
  }

  export type CategoryCreateNestedManyWithoutProportionsInput = {
    create?: XOR<CategoryCreateWithoutProportionsInput, CategoryUncheckedCreateWithoutProportionsInput> | CategoryCreateWithoutProportionsInput[] | CategoryUncheckedCreateWithoutProportionsInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutProportionsInput | CategoryCreateOrConnectWithoutProportionsInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type SizesCreateNestedManyWithoutProportionInput = {
    create?: XOR<SizesCreateWithoutProportionInput, SizesUncheckedCreateWithoutProportionInput> | SizesCreateWithoutProportionInput[] | SizesUncheckedCreateWithoutProportionInput[]
    connectOrCreate?: SizesCreateOrConnectWithoutProportionInput | SizesCreateOrConnectWithoutProportionInput[]
    createMany?: SizesCreateManyProportionInputEnvelope
    connect?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutProportionsInput = {
    create?: XOR<CategoryCreateWithoutProportionsInput, CategoryUncheckedCreateWithoutProportionsInput> | CategoryCreateWithoutProportionsInput[] | CategoryUncheckedCreateWithoutProportionsInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutProportionsInput | CategoryCreateOrConnectWithoutProportionsInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type SizesUncheckedCreateNestedManyWithoutProportionInput = {
    create?: XOR<SizesCreateWithoutProportionInput, SizesUncheckedCreateWithoutProportionInput> | SizesCreateWithoutProportionInput[] | SizesUncheckedCreateWithoutProportionInput[]
    connectOrCreate?: SizesCreateOrConnectWithoutProportionInput | SizesCreateOrConnectWithoutProportionInput[]
    createMany?: SizesCreateManyProportionInputEnvelope
    connect?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
  }

  export type CategoryUpdateManyWithoutProportionsNestedInput = {
    create?: XOR<CategoryCreateWithoutProportionsInput, CategoryUncheckedCreateWithoutProportionsInput> | CategoryCreateWithoutProportionsInput[] | CategoryUncheckedCreateWithoutProportionsInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutProportionsInput | CategoryCreateOrConnectWithoutProportionsInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutProportionsInput | CategoryUpsertWithWhereUniqueWithoutProportionsInput[]
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutProportionsInput | CategoryUpdateWithWhereUniqueWithoutProportionsInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutProportionsInput | CategoryUpdateManyWithWhereWithoutProportionsInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type SizesUpdateManyWithoutProportionNestedInput = {
    create?: XOR<SizesCreateWithoutProportionInput, SizesUncheckedCreateWithoutProportionInput> | SizesCreateWithoutProportionInput[] | SizesUncheckedCreateWithoutProportionInput[]
    connectOrCreate?: SizesCreateOrConnectWithoutProportionInput | SizesCreateOrConnectWithoutProportionInput[]
    upsert?: SizesUpsertWithWhereUniqueWithoutProportionInput | SizesUpsertWithWhereUniqueWithoutProportionInput[]
    createMany?: SizesCreateManyProportionInputEnvelope
    set?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
    disconnect?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
    delete?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
    connect?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
    update?: SizesUpdateWithWhereUniqueWithoutProportionInput | SizesUpdateWithWhereUniqueWithoutProportionInput[]
    updateMany?: SizesUpdateManyWithWhereWithoutProportionInput | SizesUpdateManyWithWhereWithoutProportionInput[]
    deleteMany?: SizesScalarWhereInput | SizesScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutProportionsNestedInput = {
    create?: XOR<CategoryCreateWithoutProportionsInput, CategoryUncheckedCreateWithoutProportionsInput> | CategoryCreateWithoutProportionsInput[] | CategoryUncheckedCreateWithoutProportionsInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutProportionsInput | CategoryCreateOrConnectWithoutProportionsInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutProportionsInput | CategoryUpsertWithWhereUniqueWithoutProportionsInput[]
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutProportionsInput | CategoryUpdateWithWhereUniqueWithoutProportionsInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutProportionsInput | CategoryUpdateManyWithWhereWithoutProportionsInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type SizesUncheckedUpdateManyWithoutProportionNestedInput = {
    create?: XOR<SizesCreateWithoutProportionInput, SizesUncheckedCreateWithoutProportionInput> | SizesCreateWithoutProportionInput[] | SizesUncheckedCreateWithoutProportionInput[]
    connectOrCreate?: SizesCreateOrConnectWithoutProportionInput | SizesCreateOrConnectWithoutProportionInput[]
    upsert?: SizesUpsertWithWhereUniqueWithoutProportionInput | SizesUpsertWithWhereUniqueWithoutProportionInput[]
    createMany?: SizesCreateManyProportionInputEnvelope
    set?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
    disconnect?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
    delete?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
    connect?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
    update?: SizesUpdateWithWhereUniqueWithoutProportionInput | SizesUpdateWithWhereUniqueWithoutProportionInput[]
    updateMany?: SizesUpdateManyWithWhereWithoutProportionInput | SizesUpdateManyWithWhereWithoutProportionInput[]
    deleteMany?: SizesScalarWhereInput | SizesScalarWhereInput[]
  }

  export type ProportionsCreateNestedOneWithoutSizesInput = {
    create?: XOR<ProportionsCreateWithoutSizesInput, ProportionsUncheckedCreateWithoutSizesInput>
    connectOrCreate?: ProportionsCreateOrConnectWithoutSizesInput
    connect?: ProportionsWhereUniqueInput
  }

  export type IngredientCreateNestedManyWithoutSizesInput = {
    create?: XOR<IngredientCreateWithoutSizesInput, IngredientUncheckedCreateWithoutSizesInput> | IngredientCreateWithoutSizesInput[] | IngredientUncheckedCreateWithoutSizesInput[]
    connectOrCreate?: IngredientCreateOrConnectWithoutSizesInput | IngredientCreateOrConnectWithoutSizesInput[]
    connect?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
  }

  export type ProductVariantCreateNestedOneWithoutSizesInput = {
    create?: XOR<ProductVariantCreateWithoutSizesInput, ProductVariantUncheckedCreateWithoutSizesInput>
    connectOrCreate?: ProductVariantCreateOrConnectWithoutSizesInput
    connect?: ProductVariantWhereUniqueInput
  }

  export type SubProductCreateNestedManyWithoutSizeInput = {
    create?: XOR<SubProductCreateWithoutSizeInput, SubProductUncheckedCreateWithoutSizeInput> | SubProductCreateWithoutSizeInput[] | SubProductUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: SubProductCreateOrConnectWithoutSizeInput | SubProductCreateOrConnectWithoutSizeInput[]
    createMany?: SubProductCreateManySizeInputEnvelope
    connect?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
  }

  export type CartItemCreateNestedManyWithoutSizeInput = {
    create?: XOR<CartItemCreateWithoutSizeInput, CartItemUncheckedCreateWithoutSizeInput> | CartItemCreateWithoutSizeInput[] | CartItemUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutSizeInput | CartItemCreateOrConnectWithoutSizeInput[]
    createMany?: CartItemCreateManySizeInputEnvelope
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type CartSubProductCreateNestedManyWithoutSizeInput = {
    create?: XOR<CartSubProductCreateWithoutSizeInput, CartSubProductUncheckedCreateWithoutSizeInput> | CartSubProductCreateWithoutSizeInput[] | CartSubProductUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: CartSubProductCreateOrConnectWithoutSizeInput | CartSubProductCreateOrConnectWithoutSizeInput[]
    createMany?: CartSubProductCreateManySizeInputEnvelope
    connect?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
  }

  export type IngredientUncheckedCreateNestedManyWithoutSizesInput = {
    create?: XOR<IngredientCreateWithoutSizesInput, IngredientUncheckedCreateWithoutSizesInput> | IngredientCreateWithoutSizesInput[] | IngredientUncheckedCreateWithoutSizesInput[]
    connectOrCreate?: IngredientCreateOrConnectWithoutSizesInput | IngredientCreateOrConnectWithoutSizesInput[]
    connect?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
  }

  export type SubProductUncheckedCreateNestedManyWithoutSizeInput = {
    create?: XOR<SubProductCreateWithoutSizeInput, SubProductUncheckedCreateWithoutSizeInput> | SubProductCreateWithoutSizeInput[] | SubProductUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: SubProductCreateOrConnectWithoutSizeInput | SubProductCreateOrConnectWithoutSizeInput[]
    createMany?: SubProductCreateManySizeInputEnvelope
    connect?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
  }

  export type CartItemUncheckedCreateNestedManyWithoutSizeInput = {
    create?: XOR<CartItemCreateWithoutSizeInput, CartItemUncheckedCreateWithoutSizeInput> | CartItemCreateWithoutSizeInput[] | CartItemUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutSizeInput | CartItemCreateOrConnectWithoutSizeInput[]
    createMany?: CartItemCreateManySizeInputEnvelope
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type CartSubProductUncheckedCreateNestedManyWithoutSizeInput = {
    create?: XOR<CartSubProductCreateWithoutSizeInput, CartSubProductUncheckedCreateWithoutSizeInput> | CartSubProductCreateWithoutSizeInput[] | CartSubProductUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: CartSubProductCreateOrConnectWithoutSizeInput | CartSubProductCreateOrConnectWithoutSizeInput[]
    createMany?: CartSubProductCreateManySizeInputEnvelope
    connect?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
  }

  export type ProportionsUpdateOneRequiredWithoutSizesNestedInput = {
    create?: XOR<ProportionsCreateWithoutSizesInput, ProportionsUncheckedCreateWithoutSizesInput>
    connectOrCreate?: ProportionsCreateOrConnectWithoutSizesInput
    upsert?: ProportionsUpsertWithoutSizesInput
    connect?: ProportionsWhereUniqueInput
    update?: XOR<XOR<ProportionsUpdateToOneWithWhereWithoutSizesInput, ProportionsUpdateWithoutSizesInput>, ProportionsUncheckedUpdateWithoutSizesInput>
  }

  export type IngredientUpdateManyWithoutSizesNestedInput = {
    create?: XOR<IngredientCreateWithoutSizesInput, IngredientUncheckedCreateWithoutSizesInput> | IngredientCreateWithoutSizesInput[] | IngredientUncheckedCreateWithoutSizesInput[]
    connectOrCreate?: IngredientCreateOrConnectWithoutSizesInput | IngredientCreateOrConnectWithoutSizesInput[]
    upsert?: IngredientUpsertWithWhereUniqueWithoutSizesInput | IngredientUpsertWithWhereUniqueWithoutSizesInput[]
    set?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    disconnect?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    delete?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    connect?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    update?: IngredientUpdateWithWhereUniqueWithoutSizesInput | IngredientUpdateWithWhereUniqueWithoutSizesInput[]
    updateMany?: IngredientUpdateManyWithWhereWithoutSizesInput | IngredientUpdateManyWithWhereWithoutSizesInput[]
    deleteMany?: IngredientScalarWhereInput | IngredientScalarWhereInput[]
  }

  export type ProductVariantUpdateOneRequiredWithoutSizesNestedInput = {
    create?: XOR<ProductVariantCreateWithoutSizesInput, ProductVariantUncheckedCreateWithoutSizesInput>
    connectOrCreate?: ProductVariantCreateOrConnectWithoutSizesInput
    upsert?: ProductVariantUpsertWithoutSizesInput
    connect?: ProductVariantWhereUniqueInput
    update?: XOR<XOR<ProductVariantUpdateToOneWithWhereWithoutSizesInput, ProductVariantUpdateWithoutSizesInput>, ProductVariantUncheckedUpdateWithoutSizesInput>
  }

  export type SubProductUpdateManyWithoutSizeNestedInput = {
    create?: XOR<SubProductCreateWithoutSizeInput, SubProductUncheckedCreateWithoutSizeInput> | SubProductCreateWithoutSizeInput[] | SubProductUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: SubProductCreateOrConnectWithoutSizeInput | SubProductCreateOrConnectWithoutSizeInput[]
    upsert?: SubProductUpsertWithWhereUniqueWithoutSizeInput | SubProductUpsertWithWhereUniqueWithoutSizeInput[]
    createMany?: SubProductCreateManySizeInputEnvelope
    set?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    disconnect?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    delete?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    connect?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    update?: SubProductUpdateWithWhereUniqueWithoutSizeInput | SubProductUpdateWithWhereUniqueWithoutSizeInput[]
    updateMany?: SubProductUpdateManyWithWhereWithoutSizeInput | SubProductUpdateManyWithWhereWithoutSizeInput[]
    deleteMany?: SubProductScalarWhereInput | SubProductScalarWhereInput[]
  }

  export type CartItemUpdateManyWithoutSizeNestedInput = {
    create?: XOR<CartItemCreateWithoutSizeInput, CartItemUncheckedCreateWithoutSizeInput> | CartItemCreateWithoutSizeInput[] | CartItemUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutSizeInput | CartItemCreateOrConnectWithoutSizeInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutSizeInput | CartItemUpsertWithWhereUniqueWithoutSizeInput[]
    createMany?: CartItemCreateManySizeInputEnvelope
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutSizeInput | CartItemUpdateWithWhereUniqueWithoutSizeInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutSizeInput | CartItemUpdateManyWithWhereWithoutSizeInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type CartSubProductUpdateManyWithoutSizeNestedInput = {
    create?: XOR<CartSubProductCreateWithoutSizeInput, CartSubProductUncheckedCreateWithoutSizeInput> | CartSubProductCreateWithoutSizeInput[] | CartSubProductUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: CartSubProductCreateOrConnectWithoutSizeInput | CartSubProductCreateOrConnectWithoutSizeInput[]
    upsert?: CartSubProductUpsertWithWhereUniqueWithoutSizeInput | CartSubProductUpsertWithWhereUniqueWithoutSizeInput[]
    createMany?: CartSubProductCreateManySizeInputEnvelope
    set?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    disconnect?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    delete?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    connect?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    update?: CartSubProductUpdateWithWhereUniqueWithoutSizeInput | CartSubProductUpdateWithWhereUniqueWithoutSizeInput[]
    updateMany?: CartSubProductUpdateManyWithWhereWithoutSizeInput | CartSubProductUpdateManyWithWhereWithoutSizeInput[]
    deleteMany?: CartSubProductScalarWhereInput | CartSubProductScalarWhereInput[]
  }

  export type IngredientUncheckedUpdateManyWithoutSizesNestedInput = {
    create?: XOR<IngredientCreateWithoutSizesInput, IngredientUncheckedCreateWithoutSizesInput> | IngredientCreateWithoutSizesInput[] | IngredientUncheckedCreateWithoutSizesInput[]
    connectOrCreate?: IngredientCreateOrConnectWithoutSizesInput | IngredientCreateOrConnectWithoutSizesInput[]
    upsert?: IngredientUpsertWithWhereUniqueWithoutSizesInput | IngredientUpsertWithWhereUniqueWithoutSizesInput[]
    set?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    disconnect?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    delete?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    connect?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    update?: IngredientUpdateWithWhereUniqueWithoutSizesInput | IngredientUpdateWithWhereUniqueWithoutSizesInput[]
    updateMany?: IngredientUpdateManyWithWhereWithoutSizesInput | IngredientUpdateManyWithWhereWithoutSizesInput[]
    deleteMany?: IngredientScalarWhereInput | IngredientScalarWhereInput[]
  }

  export type SubProductUncheckedUpdateManyWithoutSizeNestedInput = {
    create?: XOR<SubProductCreateWithoutSizeInput, SubProductUncheckedCreateWithoutSizeInput> | SubProductCreateWithoutSizeInput[] | SubProductUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: SubProductCreateOrConnectWithoutSizeInput | SubProductCreateOrConnectWithoutSizeInput[]
    upsert?: SubProductUpsertWithWhereUniqueWithoutSizeInput | SubProductUpsertWithWhereUniqueWithoutSizeInput[]
    createMany?: SubProductCreateManySizeInputEnvelope
    set?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    disconnect?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    delete?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    connect?: SubProductWhereUniqueInput | SubProductWhereUniqueInput[]
    update?: SubProductUpdateWithWhereUniqueWithoutSizeInput | SubProductUpdateWithWhereUniqueWithoutSizeInput[]
    updateMany?: SubProductUpdateManyWithWhereWithoutSizeInput | SubProductUpdateManyWithWhereWithoutSizeInput[]
    deleteMany?: SubProductScalarWhereInput | SubProductScalarWhereInput[]
  }

  export type CartItemUncheckedUpdateManyWithoutSizeNestedInput = {
    create?: XOR<CartItemCreateWithoutSizeInput, CartItemUncheckedCreateWithoutSizeInput> | CartItemCreateWithoutSizeInput[] | CartItemUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutSizeInput | CartItemCreateOrConnectWithoutSizeInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutSizeInput | CartItemUpsertWithWhereUniqueWithoutSizeInput[]
    createMany?: CartItemCreateManySizeInputEnvelope
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutSizeInput | CartItemUpdateWithWhereUniqueWithoutSizeInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutSizeInput | CartItemUpdateManyWithWhereWithoutSizeInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type CartSubProductUncheckedUpdateManyWithoutSizeNestedInput = {
    create?: XOR<CartSubProductCreateWithoutSizeInput, CartSubProductUncheckedCreateWithoutSizeInput> | CartSubProductCreateWithoutSizeInput[] | CartSubProductUncheckedCreateWithoutSizeInput[]
    connectOrCreate?: CartSubProductCreateOrConnectWithoutSizeInput | CartSubProductCreateOrConnectWithoutSizeInput[]
    upsert?: CartSubProductUpsertWithWhereUniqueWithoutSizeInput | CartSubProductUpsertWithWhereUniqueWithoutSizeInput[]
    createMany?: CartSubProductCreateManySizeInputEnvelope
    set?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    disconnect?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    delete?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    connect?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    update?: CartSubProductUpdateWithWhereUniqueWithoutSizeInput | CartSubProductUpdateWithWhereUniqueWithoutSizeInput[]
    updateMany?: CartSubProductUpdateManyWithWhereWithoutSizeInput | CartSubProductUpdateManyWithWhereWithoutSizeInput[]
    deleteMany?: CartSubProductScalarWhereInput | CartSubProductScalarWhereInput[]
  }

  export type CategoryCreateNestedManyWithoutIngredientsInput = {
    create?: XOR<CategoryCreateWithoutIngredientsInput, CategoryUncheckedCreateWithoutIngredientsInput> | CategoryCreateWithoutIngredientsInput[] | CategoryUncheckedCreateWithoutIngredientsInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutIngredientsInput | CategoryCreateOrConnectWithoutIngredientsInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type SizesCreateNestedManyWithoutIngredientsInput = {
    create?: XOR<SizesCreateWithoutIngredientsInput, SizesUncheckedCreateWithoutIngredientsInput> | SizesCreateWithoutIngredientsInput[] | SizesUncheckedCreateWithoutIngredientsInput[]
    connectOrCreate?: SizesCreateOrConnectWithoutIngredientsInput | SizesCreateOrConnectWithoutIngredientsInput[]
    connect?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
  }

  export type ProductCreateNestedManyWithoutIngredientsInput = {
    create?: XOR<ProductCreateWithoutIngredientsInput, ProductUncheckedCreateWithoutIngredientsInput> | ProductCreateWithoutIngredientsInput[] | ProductUncheckedCreateWithoutIngredientsInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutIngredientsInput | ProductCreateOrConnectWithoutIngredientsInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type CartItemCreateNestedManyWithoutIngredientsInput = {
    create?: XOR<CartItemCreateWithoutIngredientsInput, CartItemUncheckedCreateWithoutIngredientsInput> | CartItemCreateWithoutIngredientsInput[] | CartItemUncheckedCreateWithoutIngredientsInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutIngredientsInput | CartItemCreateOrConnectWithoutIngredientsInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutIngredientsInput = {
    create?: XOR<CategoryCreateWithoutIngredientsInput, CategoryUncheckedCreateWithoutIngredientsInput> | CategoryCreateWithoutIngredientsInput[] | CategoryUncheckedCreateWithoutIngredientsInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutIngredientsInput | CategoryCreateOrConnectWithoutIngredientsInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type SizesUncheckedCreateNestedManyWithoutIngredientsInput = {
    create?: XOR<SizesCreateWithoutIngredientsInput, SizesUncheckedCreateWithoutIngredientsInput> | SizesCreateWithoutIngredientsInput[] | SizesUncheckedCreateWithoutIngredientsInput[]
    connectOrCreate?: SizesCreateOrConnectWithoutIngredientsInput | SizesCreateOrConnectWithoutIngredientsInput[]
    connect?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutIngredientsInput = {
    create?: XOR<ProductCreateWithoutIngredientsInput, ProductUncheckedCreateWithoutIngredientsInput> | ProductCreateWithoutIngredientsInput[] | ProductUncheckedCreateWithoutIngredientsInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutIngredientsInput | ProductCreateOrConnectWithoutIngredientsInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type CartItemUncheckedCreateNestedManyWithoutIngredientsInput = {
    create?: XOR<CartItemCreateWithoutIngredientsInput, CartItemUncheckedCreateWithoutIngredientsInput> | CartItemCreateWithoutIngredientsInput[] | CartItemUncheckedCreateWithoutIngredientsInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutIngredientsInput | CartItemCreateOrConnectWithoutIngredientsInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type CategoryUpdateManyWithoutIngredientsNestedInput = {
    create?: XOR<CategoryCreateWithoutIngredientsInput, CategoryUncheckedCreateWithoutIngredientsInput> | CategoryCreateWithoutIngredientsInput[] | CategoryUncheckedCreateWithoutIngredientsInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutIngredientsInput | CategoryCreateOrConnectWithoutIngredientsInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutIngredientsInput | CategoryUpsertWithWhereUniqueWithoutIngredientsInput[]
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutIngredientsInput | CategoryUpdateWithWhereUniqueWithoutIngredientsInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutIngredientsInput | CategoryUpdateManyWithWhereWithoutIngredientsInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type SizesUpdateManyWithoutIngredientsNestedInput = {
    create?: XOR<SizesCreateWithoutIngredientsInput, SizesUncheckedCreateWithoutIngredientsInput> | SizesCreateWithoutIngredientsInput[] | SizesUncheckedCreateWithoutIngredientsInput[]
    connectOrCreate?: SizesCreateOrConnectWithoutIngredientsInput | SizesCreateOrConnectWithoutIngredientsInput[]
    upsert?: SizesUpsertWithWhereUniqueWithoutIngredientsInput | SizesUpsertWithWhereUniqueWithoutIngredientsInput[]
    set?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
    disconnect?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
    delete?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
    connect?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
    update?: SizesUpdateWithWhereUniqueWithoutIngredientsInput | SizesUpdateWithWhereUniqueWithoutIngredientsInput[]
    updateMany?: SizesUpdateManyWithWhereWithoutIngredientsInput | SizesUpdateManyWithWhereWithoutIngredientsInput[]
    deleteMany?: SizesScalarWhereInput | SizesScalarWhereInput[]
  }

  export type ProductUpdateManyWithoutIngredientsNestedInput = {
    create?: XOR<ProductCreateWithoutIngredientsInput, ProductUncheckedCreateWithoutIngredientsInput> | ProductCreateWithoutIngredientsInput[] | ProductUncheckedCreateWithoutIngredientsInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutIngredientsInput | ProductCreateOrConnectWithoutIngredientsInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutIngredientsInput | ProductUpsertWithWhereUniqueWithoutIngredientsInput[]
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutIngredientsInput | ProductUpdateWithWhereUniqueWithoutIngredientsInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutIngredientsInput | ProductUpdateManyWithWhereWithoutIngredientsInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type CartItemUpdateManyWithoutIngredientsNestedInput = {
    create?: XOR<CartItemCreateWithoutIngredientsInput, CartItemUncheckedCreateWithoutIngredientsInput> | CartItemCreateWithoutIngredientsInput[] | CartItemUncheckedCreateWithoutIngredientsInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutIngredientsInput | CartItemCreateOrConnectWithoutIngredientsInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutIngredientsInput | CartItemUpsertWithWhereUniqueWithoutIngredientsInput[]
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutIngredientsInput | CartItemUpdateWithWhereUniqueWithoutIngredientsInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutIngredientsInput | CartItemUpdateManyWithWhereWithoutIngredientsInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutIngredientsNestedInput = {
    create?: XOR<CategoryCreateWithoutIngredientsInput, CategoryUncheckedCreateWithoutIngredientsInput> | CategoryCreateWithoutIngredientsInput[] | CategoryUncheckedCreateWithoutIngredientsInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutIngredientsInput | CategoryCreateOrConnectWithoutIngredientsInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutIngredientsInput | CategoryUpsertWithWhereUniqueWithoutIngredientsInput[]
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutIngredientsInput | CategoryUpdateWithWhereUniqueWithoutIngredientsInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutIngredientsInput | CategoryUpdateManyWithWhereWithoutIngredientsInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type SizesUncheckedUpdateManyWithoutIngredientsNestedInput = {
    create?: XOR<SizesCreateWithoutIngredientsInput, SizesUncheckedCreateWithoutIngredientsInput> | SizesCreateWithoutIngredientsInput[] | SizesUncheckedCreateWithoutIngredientsInput[]
    connectOrCreate?: SizesCreateOrConnectWithoutIngredientsInput | SizesCreateOrConnectWithoutIngredientsInput[]
    upsert?: SizesUpsertWithWhereUniqueWithoutIngredientsInput | SizesUpsertWithWhereUniqueWithoutIngredientsInput[]
    set?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
    disconnect?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
    delete?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
    connect?: SizesWhereUniqueInput | SizesWhereUniqueInput[]
    update?: SizesUpdateWithWhereUniqueWithoutIngredientsInput | SizesUpdateWithWhereUniqueWithoutIngredientsInput[]
    updateMany?: SizesUpdateManyWithWhereWithoutIngredientsInput | SizesUpdateManyWithWhereWithoutIngredientsInput[]
    deleteMany?: SizesScalarWhereInput | SizesScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutIngredientsNestedInput = {
    create?: XOR<ProductCreateWithoutIngredientsInput, ProductUncheckedCreateWithoutIngredientsInput> | ProductCreateWithoutIngredientsInput[] | ProductUncheckedCreateWithoutIngredientsInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutIngredientsInput | ProductCreateOrConnectWithoutIngredientsInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutIngredientsInput | ProductUpsertWithWhereUniqueWithoutIngredientsInput[]
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutIngredientsInput | ProductUpdateWithWhereUniqueWithoutIngredientsInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutIngredientsInput | ProductUpdateManyWithWhereWithoutIngredientsInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type CartItemUncheckedUpdateManyWithoutIngredientsNestedInput = {
    create?: XOR<CartItemCreateWithoutIngredientsInput, CartItemUncheckedCreateWithoutIngredientsInput> | CartItemCreateWithoutIngredientsInput[] | CartItemUncheckedCreateWithoutIngredientsInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutIngredientsInput | CartItemCreateOrConnectWithoutIngredientsInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutIngredientsInput | CartItemUpsertWithWhereUniqueWithoutIngredientsInput[]
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutIngredientsInput | CartItemUpdateWithWhereUniqueWithoutIngredientsInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutIngredientsInput | CartItemUpdateManyWithWhereWithoutIngredientsInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCartInput = {
    create?: XOR<UserCreateWithoutCartInput, UserUncheckedCreateWithoutCartInput>
    connectOrCreate?: UserCreateOrConnectWithoutCartInput
    connect?: UserWhereUniqueInput
  }

  export type CartItemCreateNestedManyWithoutCartInput = {
    create?: XOR<CartItemCreateWithoutCartInput, CartItemUncheckedCreateWithoutCartInput> | CartItemCreateWithoutCartInput[] | CartItemUncheckedCreateWithoutCartInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutCartInput | CartItemCreateOrConnectWithoutCartInput[]
    createMany?: CartItemCreateManyCartInputEnvelope
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type CartItemUncheckedCreateNestedManyWithoutCartInput = {
    create?: XOR<CartItemCreateWithoutCartInput, CartItemUncheckedCreateWithoutCartInput> | CartItemCreateWithoutCartInput[] | CartItemUncheckedCreateWithoutCartInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutCartInput | CartItemCreateOrConnectWithoutCartInput[]
    createMany?: CartItemCreateManyCartInputEnvelope
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCartNestedInput = {
    create?: XOR<UserCreateWithoutCartInput, UserUncheckedCreateWithoutCartInput>
    connectOrCreate?: UserCreateOrConnectWithoutCartInput
    upsert?: UserUpsertWithoutCartInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCartInput, UserUpdateWithoutCartInput>, UserUncheckedUpdateWithoutCartInput>
  }

  export type CartItemUpdateManyWithoutCartNestedInput = {
    create?: XOR<CartItemCreateWithoutCartInput, CartItemUncheckedCreateWithoutCartInput> | CartItemCreateWithoutCartInput[] | CartItemUncheckedCreateWithoutCartInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutCartInput | CartItemCreateOrConnectWithoutCartInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutCartInput | CartItemUpsertWithWhereUniqueWithoutCartInput[]
    createMany?: CartItemCreateManyCartInputEnvelope
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutCartInput | CartItemUpdateWithWhereUniqueWithoutCartInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutCartInput | CartItemUpdateManyWithWhereWithoutCartInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type CartItemUncheckedUpdateManyWithoutCartNestedInput = {
    create?: XOR<CartItemCreateWithoutCartInput, CartItemUncheckedCreateWithoutCartInput> | CartItemCreateWithoutCartInput[] | CartItemUncheckedCreateWithoutCartInput[]
    connectOrCreate?: CartItemCreateOrConnectWithoutCartInput | CartItemCreateOrConnectWithoutCartInput[]
    upsert?: CartItemUpsertWithWhereUniqueWithoutCartInput | CartItemUpsertWithWhereUniqueWithoutCartInput[]
    createMany?: CartItemCreateManyCartInputEnvelope
    set?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    disconnect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    delete?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    connect?: CartItemWhereUniqueInput | CartItemWhereUniqueInput[]
    update?: CartItemUpdateWithWhereUniqueWithoutCartInput | CartItemUpdateWithWhereUniqueWithoutCartInput[]
    updateMany?: CartItemUpdateManyWithWhereWithoutCartInput | CartItemUpdateManyWithWhereWithoutCartInput[]
    deleteMany?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
  }

  export type CartCreateNestedOneWithoutItemsInput = {
    create?: XOR<CartCreateWithoutItemsInput, CartUncheckedCreateWithoutItemsInput>
    connectOrCreate?: CartCreateOrConnectWithoutItemsInput
    connect?: CartWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutCartItemInput = {
    create?: XOR<ProductCreateWithoutCartItemInput, ProductUncheckedCreateWithoutCartItemInput>
    connectOrCreate?: ProductCreateOrConnectWithoutCartItemInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductVariantCreateNestedOneWithoutCartItemInput = {
    create?: XOR<ProductVariantCreateWithoutCartItemInput, ProductVariantUncheckedCreateWithoutCartItemInput>
    connectOrCreate?: ProductVariantCreateOrConnectWithoutCartItemInput
    connect?: ProductVariantWhereUniqueInput
  }

  export type SizesCreateNestedOneWithoutCartItemInput = {
    create?: XOR<SizesCreateWithoutCartItemInput, SizesUncheckedCreateWithoutCartItemInput>
    connectOrCreate?: SizesCreateOrConnectWithoutCartItemInput
    connect?: SizesWhereUniqueInput
  }

  export type IngredientCreateNestedManyWithoutCartItemsInput = {
    create?: XOR<IngredientCreateWithoutCartItemsInput, IngredientUncheckedCreateWithoutCartItemsInput> | IngredientCreateWithoutCartItemsInput[] | IngredientUncheckedCreateWithoutCartItemsInput[]
    connectOrCreate?: IngredientCreateOrConnectWithoutCartItemsInput | IngredientCreateOrConnectWithoutCartItemsInput[]
    connect?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
  }

  export type CartSubProductCreateNestedManyWithoutCartItemInput = {
    create?: XOR<CartSubProductCreateWithoutCartItemInput, CartSubProductUncheckedCreateWithoutCartItemInput> | CartSubProductCreateWithoutCartItemInput[] | CartSubProductUncheckedCreateWithoutCartItemInput[]
    connectOrCreate?: CartSubProductCreateOrConnectWithoutCartItemInput | CartSubProductCreateOrConnectWithoutCartItemInput[]
    createMany?: CartSubProductCreateManyCartItemInputEnvelope
    connect?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
  }

  export type IngredientUncheckedCreateNestedManyWithoutCartItemsInput = {
    create?: XOR<IngredientCreateWithoutCartItemsInput, IngredientUncheckedCreateWithoutCartItemsInput> | IngredientCreateWithoutCartItemsInput[] | IngredientUncheckedCreateWithoutCartItemsInput[]
    connectOrCreate?: IngredientCreateOrConnectWithoutCartItemsInput | IngredientCreateOrConnectWithoutCartItemsInput[]
    connect?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
  }

  export type CartSubProductUncheckedCreateNestedManyWithoutCartItemInput = {
    create?: XOR<CartSubProductCreateWithoutCartItemInput, CartSubProductUncheckedCreateWithoutCartItemInput> | CartSubProductCreateWithoutCartItemInput[] | CartSubProductUncheckedCreateWithoutCartItemInput[]
    connectOrCreate?: CartSubProductCreateOrConnectWithoutCartItemInput | CartSubProductCreateOrConnectWithoutCartItemInput[]
    createMany?: CartSubProductCreateManyCartItemInputEnvelope
    connect?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
  }

  export type CartUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<CartCreateWithoutItemsInput, CartUncheckedCreateWithoutItemsInput>
    connectOrCreate?: CartCreateOrConnectWithoutItemsInput
    upsert?: CartUpsertWithoutItemsInput
    connect?: CartWhereUniqueInput
    update?: XOR<XOR<CartUpdateToOneWithWhereWithoutItemsInput, CartUpdateWithoutItemsInput>, CartUncheckedUpdateWithoutItemsInput>
  }

  export type ProductUpdateOneRequiredWithoutCartItemNestedInput = {
    create?: XOR<ProductCreateWithoutCartItemInput, ProductUncheckedCreateWithoutCartItemInput>
    connectOrCreate?: ProductCreateOrConnectWithoutCartItemInput
    upsert?: ProductUpsertWithoutCartItemInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutCartItemInput, ProductUpdateWithoutCartItemInput>, ProductUncheckedUpdateWithoutCartItemInput>
  }

  export type ProductVariantUpdateOneWithoutCartItemNestedInput = {
    create?: XOR<ProductVariantCreateWithoutCartItemInput, ProductVariantUncheckedCreateWithoutCartItemInput>
    connectOrCreate?: ProductVariantCreateOrConnectWithoutCartItemInput
    upsert?: ProductVariantUpsertWithoutCartItemInput
    disconnect?: ProductVariantWhereInput | boolean
    delete?: ProductVariantWhereInput | boolean
    connect?: ProductVariantWhereUniqueInput
    update?: XOR<XOR<ProductVariantUpdateToOneWithWhereWithoutCartItemInput, ProductVariantUpdateWithoutCartItemInput>, ProductVariantUncheckedUpdateWithoutCartItemInput>
  }

  export type SizesUpdateOneWithoutCartItemNestedInput = {
    create?: XOR<SizesCreateWithoutCartItemInput, SizesUncheckedCreateWithoutCartItemInput>
    connectOrCreate?: SizesCreateOrConnectWithoutCartItemInput
    upsert?: SizesUpsertWithoutCartItemInput
    disconnect?: SizesWhereInput | boolean
    delete?: SizesWhereInput | boolean
    connect?: SizesWhereUniqueInput
    update?: XOR<XOR<SizesUpdateToOneWithWhereWithoutCartItemInput, SizesUpdateWithoutCartItemInput>, SizesUncheckedUpdateWithoutCartItemInput>
  }

  export type IngredientUpdateManyWithoutCartItemsNestedInput = {
    create?: XOR<IngredientCreateWithoutCartItemsInput, IngredientUncheckedCreateWithoutCartItemsInput> | IngredientCreateWithoutCartItemsInput[] | IngredientUncheckedCreateWithoutCartItemsInput[]
    connectOrCreate?: IngredientCreateOrConnectWithoutCartItemsInput | IngredientCreateOrConnectWithoutCartItemsInput[]
    upsert?: IngredientUpsertWithWhereUniqueWithoutCartItemsInput | IngredientUpsertWithWhereUniqueWithoutCartItemsInput[]
    set?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    disconnect?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    delete?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    connect?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    update?: IngredientUpdateWithWhereUniqueWithoutCartItemsInput | IngredientUpdateWithWhereUniqueWithoutCartItemsInput[]
    updateMany?: IngredientUpdateManyWithWhereWithoutCartItemsInput | IngredientUpdateManyWithWhereWithoutCartItemsInput[]
    deleteMany?: IngredientScalarWhereInput | IngredientScalarWhereInput[]
  }

  export type CartSubProductUpdateManyWithoutCartItemNestedInput = {
    create?: XOR<CartSubProductCreateWithoutCartItemInput, CartSubProductUncheckedCreateWithoutCartItemInput> | CartSubProductCreateWithoutCartItemInput[] | CartSubProductUncheckedCreateWithoutCartItemInput[]
    connectOrCreate?: CartSubProductCreateOrConnectWithoutCartItemInput | CartSubProductCreateOrConnectWithoutCartItemInput[]
    upsert?: CartSubProductUpsertWithWhereUniqueWithoutCartItemInput | CartSubProductUpsertWithWhereUniqueWithoutCartItemInput[]
    createMany?: CartSubProductCreateManyCartItemInputEnvelope
    set?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    disconnect?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    delete?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    connect?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    update?: CartSubProductUpdateWithWhereUniqueWithoutCartItemInput | CartSubProductUpdateWithWhereUniqueWithoutCartItemInput[]
    updateMany?: CartSubProductUpdateManyWithWhereWithoutCartItemInput | CartSubProductUpdateManyWithWhereWithoutCartItemInput[]
    deleteMany?: CartSubProductScalarWhereInput | CartSubProductScalarWhereInput[]
  }

  export type IngredientUncheckedUpdateManyWithoutCartItemsNestedInput = {
    create?: XOR<IngredientCreateWithoutCartItemsInput, IngredientUncheckedCreateWithoutCartItemsInput> | IngredientCreateWithoutCartItemsInput[] | IngredientUncheckedCreateWithoutCartItemsInput[]
    connectOrCreate?: IngredientCreateOrConnectWithoutCartItemsInput | IngredientCreateOrConnectWithoutCartItemsInput[]
    upsert?: IngredientUpsertWithWhereUniqueWithoutCartItemsInput | IngredientUpsertWithWhereUniqueWithoutCartItemsInput[]
    set?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    disconnect?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    delete?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    connect?: IngredientWhereUniqueInput | IngredientWhereUniqueInput[]
    update?: IngredientUpdateWithWhereUniqueWithoutCartItemsInput | IngredientUpdateWithWhereUniqueWithoutCartItemsInput[]
    updateMany?: IngredientUpdateManyWithWhereWithoutCartItemsInput | IngredientUpdateManyWithWhereWithoutCartItemsInput[]
    deleteMany?: IngredientScalarWhereInput | IngredientScalarWhereInput[]
  }

  export type CartSubProductUncheckedUpdateManyWithoutCartItemNestedInput = {
    create?: XOR<CartSubProductCreateWithoutCartItemInput, CartSubProductUncheckedCreateWithoutCartItemInput> | CartSubProductCreateWithoutCartItemInput[] | CartSubProductUncheckedCreateWithoutCartItemInput[]
    connectOrCreate?: CartSubProductCreateOrConnectWithoutCartItemInput | CartSubProductCreateOrConnectWithoutCartItemInput[]
    upsert?: CartSubProductUpsertWithWhereUniqueWithoutCartItemInput | CartSubProductUpsertWithWhereUniqueWithoutCartItemInput[]
    createMany?: CartSubProductCreateManyCartItemInputEnvelope
    set?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    disconnect?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    delete?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    connect?: CartSubProductWhereUniqueInput | CartSubProductWhereUniqueInput[]
    update?: CartSubProductUpdateWithWhereUniqueWithoutCartItemInput | CartSubProductUpdateWithWhereUniqueWithoutCartItemInput[]
    updateMany?: CartSubProductUpdateManyWithWhereWithoutCartItemInput | CartSubProductUpdateManyWithWhereWithoutCartItemInput[]
    deleteMany?: CartSubProductScalarWhereInput | CartSubProductScalarWhereInput[]
  }

  export type ProductCreateNestedOneWithoutCartSubProductInput = {
    create?: XOR<ProductCreateWithoutCartSubProductInput, ProductUncheckedCreateWithoutCartSubProductInput>
    connectOrCreate?: ProductCreateOrConnectWithoutCartSubProductInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductVariantCreateNestedOneWithoutCartSubProductInput = {
    create?: XOR<ProductVariantCreateWithoutCartSubProductInput, ProductVariantUncheckedCreateWithoutCartSubProductInput>
    connectOrCreate?: ProductVariantCreateOrConnectWithoutCartSubProductInput
    connect?: ProductVariantWhereUniqueInput
  }

  export type SizesCreateNestedOneWithoutCartSubProductInput = {
    create?: XOR<SizesCreateWithoutCartSubProductInput, SizesUncheckedCreateWithoutCartSubProductInput>
    connectOrCreate?: SizesCreateOrConnectWithoutCartSubProductInput
    connect?: SizesWhereUniqueInput
  }

  export type CartItemCreateNestedOneWithoutCartSubProductInput = {
    create?: XOR<CartItemCreateWithoutCartSubProductInput, CartItemUncheckedCreateWithoutCartSubProductInput>
    connectOrCreate?: CartItemCreateOrConnectWithoutCartSubProductInput
    connect?: CartItemWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutCartSubProductNestedInput = {
    create?: XOR<ProductCreateWithoutCartSubProductInput, ProductUncheckedCreateWithoutCartSubProductInput>
    connectOrCreate?: ProductCreateOrConnectWithoutCartSubProductInput
    upsert?: ProductUpsertWithoutCartSubProductInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutCartSubProductInput, ProductUpdateWithoutCartSubProductInput>, ProductUncheckedUpdateWithoutCartSubProductInput>
  }

  export type ProductVariantUpdateOneRequiredWithoutCartSubProductNestedInput = {
    create?: XOR<ProductVariantCreateWithoutCartSubProductInput, ProductVariantUncheckedCreateWithoutCartSubProductInput>
    connectOrCreate?: ProductVariantCreateOrConnectWithoutCartSubProductInput
    upsert?: ProductVariantUpsertWithoutCartSubProductInput
    connect?: ProductVariantWhereUniqueInput
    update?: XOR<XOR<ProductVariantUpdateToOneWithWhereWithoutCartSubProductInput, ProductVariantUpdateWithoutCartSubProductInput>, ProductVariantUncheckedUpdateWithoutCartSubProductInput>
  }

  export type SizesUpdateOneRequiredWithoutCartSubProductNestedInput = {
    create?: XOR<SizesCreateWithoutCartSubProductInput, SizesUncheckedCreateWithoutCartSubProductInput>
    connectOrCreate?: SizesCreateOrConnectWithoutCartSubProductInput
    upsert?: SizesUpsertWithoutCartSubProductInput
    connect?: SizesWhereUniqueInput
    update?: XOR<XOR<SizesUpdateToOneWithWhereWithoutCartSubProductInput, SizesUpdateWithoutCartSubProductInput>, SizesUncheckedUpdateWithoutCartSubProductInput>
  }

  export type CartItemUpdateOneRequiredWithoutCartSubProductNestedInput = {
    create?: XOR<CartItemCreateWithoutCartSubProductInput, CartItemUncheckedCreateWithoutCartSubProductInput>
    connectOrCreate?: CartItemCreateOrConnectWithoutCartSubProductInput
    upsert?: CartItemUpsertWithoutCartSubProductInput
    connect?: CartItemWhereUniqueInput
    update?: XOR<XOR<CartItemUpdateToOneWithWhereWithoutCartSubProductInput, CartItemUpdateWithoutCartSubProductInput>, CartItemUncheckedUpdateWithoutCartSubProductInput>
  }

  export type UserCreateNestedOneWithoutOrdersInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    connect?: UserWhereUniqueInput
  }

  export type EnumOrderStatusFieldUpdateOperationsInput = {
    set?: $Enums.OrderStatus
  }

  export type UserUpdateOneRequiredWithoutOrdersNestedInput = {
    create?: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrdersInput
    upsert?: UserUpsertWithoutOrdersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrdersInput, UserUpdateWithoutOrdersInput>, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type UserCreateNestedOneWithoutDeliveryAddressInput = {
    create?: XOR<UserCreateWithoutDeliveryAddressInput, UserUncheckedCreateWithoutDeliveryAddressInput>
    connectOrCreate?: UserCreateOrConnectWithoutDeliveryAddressInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDeliveryAddressNestedInput = {
    create?: XOR<UserCreateWithoutDeliveryAddressInput, UserUncheckedCreateWithoutDeliveryAddressInput>
    connectOrCreate?: UserCreateOrConnectWithoutDeliveryAddressInput
    upsert?: UserUpsertWithoutDeliveryAddressInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDeliveryAddressInput, UserUpdateWithoutDeliveryAddressInput>, UserUncheckedUpdateWithoutDeliveryAddressInput>
  }

  export type UserCreateNestedOneWithoutVerificationCodeInput = {
    create?: XOR<UserCreateWithoutVerificationCodeInput, UserUncheckedCreateWithoutVerificationCodeInput>
    connectOrCreate?: UserCreateOrConnectWithoutVerificationCodeInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutVerificationCodeNestedInput = {
    create?: XOR<UserCreateWithoutVerificationCodeInput, UserUncheckedCreateWithoutVerificationCodeInput>
    connectOrCreate?: UserCreateOrConnectWithoutVerificationCodeInput
    upsert?: UserUpsertWithoutVerificationCodeInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutVerificationCodeInput, UserUpdateWithoutVerificationCodeInput>, UserUncheckedUpdateWithoutVerificationCodeInput>
  }

  export type StoryItemCreateNestedManyWithoutStoryInput = {
    create?: XOR<StoryItemCreateWithoutStoryInput, StoryItemUncheckedCreateWithoutStoryInput> | StoryItemCreateWithoutStoryInput[] | StoryItemUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: StoryItemCreateOrConnectWithoutStoryInput | StoryItemCreateOrConnectWithoutStoryInput[]
    createMany?: StoryItemCreateManyStoryInputEnvelope
    connect?: StoryItemWhereUniqueInput | StoryItemWhereUniqueInput[]
  }

  export type StoryItemUncheckedCreateNestedManyWithoutStoryInput = {
    create?: XOR<StoryItemCreateWithoutStoryInput, StoryItemUncheckedCreateWithoutStoryInput> | StoryItemCreateWithoutStoryInput[] | StoryItemUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: StoryItemCreateOrConnectWithoutStoryInput | StoryItemCreateOrConnectWithoutStoryInput[]
    createMany?: StoryItemCreateManyStoryInputEnvelope
    connect?: StoryItemWhereUniqueInput | StoryItemWhereUniqueInput[]
  }

  export type StoryItemUpdateManyWithoutStoryNestedInput = {
    create?: XOR<StoryItemCreateWithoutStoryInput, StoryItemUncheckedCreateWithoutStoryInput> | StoryItemCreateWithoutStoryInput[] | StoryItemUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: StoryItemCreateOrConnectWithoutStoryInput | StoryItemCreateOrConnectWithoutStoryInput[]
    upsert?: StoryItemUpsertWithWhereUniqueWithoutStoryInput | StoryItemUpsertWithWhereUniqueWithoutStoryInput[]
    createMany?: StoryItemCreateManyStoryInputEnvelope
    set?: StoryItemWhereUniqueInput | StoryItemWhereUniqueInput[]
    disconnect?: StoryItemWhereUniqueInput | StoryItemWhereUniqueInput[]
    delete?: StoryItemWhereUniqueInput | StoryItemWhereUniqueInput[]
    connect?: StoryItemWhereUniqueInput | StoryItemWhereUniqueInput[]
    update?: StoryItemUpdateWithWhereUniqueWithoutStoryInput | StoryItemUpdateWithWhereUniqueWithoutStoryInput[]
    updateMany?: StoryItemUpdateManyWithWhereWithoutStoryInput | StoryItemUpdateManyWithWhereWithoutStoryInput[]
    deleteMany?: StoryItemScalarWhereInput | StoryItemScalarWhereInput[]
  }

  export type StoryItemUncheckedUpdateManyWithoutStoryNestedInput = {
    create?: XOR<StoryItemCreateWithoutStoryInput, StoryItemUncheckedCreateWithoutStoryInput> | StoryItemCreateWithoutStoryInput[] | StoryItemUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: StoryItemCreateOrConnectWithoutStoryInput | StoryItemCreateOrConnectWithoutStoryInput[]
    upsert?: StoryItemUpsertWithWhereUniqueWithoutStoryInput | StoryItemUpsertWithWhereUniqueWithoutStoryInput[]
    createMany?: StoryItemCreateManyStoryInputEnvelope
    set?: StoryItemWhereUniqueInput | StoryItemWhereUniqueInput[]
    disconnect?: StoryItemWhereUniqueInput | StoryItemWhereUniqueInput[]
    delete?: StoryItemWhereUniqueInput | StoryItemWhereUniqueInput[]
    connect?: StoryItemWhereUniqueInput | StoryItemWhereUniqueInput[]
    update?: StoryItemUpdateWithWhereUniqueWithoutStoryInput | StoryItemUpdateWithWhereUniqueWithoutStoryInput[]
    updateMany?: StoryItemUpdateManyWithWhereWithoutStoryInput | StoryItemUpdateManyWithWhereWithoutStoryInput[]
    deleteMany?: StoryItemScalarWhereInput | StoryItemScalarWhereInput[]
  }

  export type StoryCreateNestedOneWithoutItemsInput = {
    create?: XOR<StoryCreateWithoutItemsInput, StoryUncheckedCreateWithoutItemsInput>
    connectOrCreate?: StoryCreateOrConnectWithoutItemsInput
    connect?: StoryWhereUniqueInput
  }

  export type StoryUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<StoryCreateWithoutItemsInput, StoryUncheckedCreateWithoutItemsInput>
    connectOrCreate?: StoryCreateOrConnectWithoutItemsInput
    upsert?: StoryUpsertWithoutItemsInput
    connect?: StoryWhereUniqueInput
    update?: XOR<XOR<StoryUpdateToOneWithWhereWithoutItemsInput, StoryUpdateWithoutItemsInput>, StoryUncheckedUpdateWithoutItemsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableFilter<$PrismaModel> | $Enums.UserRole | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumAuthMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthMethod | EnumAuthMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthMethodFilter<$PrismaModel> | $Enums.AuthMethod
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.UserRole | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumUserRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumUserRoleNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumAuthMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthMethod | EnumAuthMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthMethod[] | ListEnumAuthMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthMethodWithAggregatesFilter<$PrismaModel> | $Enums.AuthMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuthMethodFilter<$PrismaModel>
    _max?: NestedEnumAuthMethodFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumTokenTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenType | EnumTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTypeFilter<$PrismaModel> | $Enums.TokenType
  }

  export type NestedEnumTokenTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TokenType | EnumTokenTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TokenType[] | ListEnumTokenTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTokenTypeWithAggregatesFilter<$PrismaModel> | $Enums.TokenType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTokenTypeFilter<$PrismaModel>
    _max?: NestedEnumTokenTypeFilter<$PrismaModel>
  }

  export type NestedEnumTypeProductFilter<$PrismaModel = never> = {
    equals?: $Enums.TypeProduct | EnumTypeProductFieldRefInput<$PrismaModel>
    in?: $Enums.TypeProduct[] | ListEnumTypeProductFieldRefInput<$PrismaModel>
    notIn?: $Enums.TypeProduct[] | ListEnumTypeProductFieldRefInput<$PrismaModel>
    not?: NestedEnumTypeProductFilter<$PrismaModel> | $Enums.TypeProduct
  }

  export type NestedEnumTypeProductWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TypeProduct | EnumTypeProductFieldRefInput<$PrismaModel>
    in?: $Enums.TypeProduct[] | ListEnumTypeProductFieldRefInput<$PrismaModel>
    notIn?: $Enums.TypeProduct[] | ListEnumTypeProductFieldRefInput<$PrismaModel>
    not?: NestedEnumTypeProductWithAggregatesFilter<$PrismaModel> | $Enums.TypeProduct
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTypeProductFilter<$PrismaModel>
    _max?: NestedEnumTypeProductFilter<$PrismaModel>
  }

  export type NestedEnumOrderStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusFilter<$PrismaModel> | $Enums.OrderStatus
  }

  export type NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrderStatus | EnumOrderStatusFieldRefInput<$PrismaModel>
    in?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrderStatus[] | ListEnumOrderStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumOrderStatusWithAggregatesFilter<$PrismaModel> | $Enums.OrderStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrderStatusFilter<$PrismaModel>
    _max?: NestedEnumOrderStatusFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    refreshToken?: string | null
    accessToken?: string | null
    expiresAt: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    refreshToken?: string | null
    accessToken?: string | null
    expiresAt: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CartCreateWithoutUserInput = {
    totalAmount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    amountGoods?: number
    items?: CartItemCreateNestedManyWithoutCartInput
  }

  export type CartUncheckedCreateWithoutUserInput = {
    id?: number
    totalAmount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    amountGoods?: number
    items?: CartItemUncheckedCreateNestedManyWithoutCartInput
  }

  export type CartCreateOrConnectWithoutUserInput = {
    where: CartWhereUniqueInput
    create: XOR<CartCreateWithoutUserInput, CartUncheckedCreateWithoutUserInput>
  }

  export type OrderCreateWithoutUserInput = {
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentId?: string | null
    email: string
    phone: string
    address: string
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    items: JsonNullValueInput | InputJsonValue
  }

  export type OrderUncheckedCreateWithoutUserInput = {
    id?: number
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentId?: string | null
    email: string
    phone: string
    address: string
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    items: JsonNullValueInput | InputJsonValue
  }

  export type OrderCreateOrConnectWithoutUserInput = {
    where: OrderWhereUniqueInput
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderCreateManyUserInputEnvelope = {
    data: OrderCreateManyUserInput | OrderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type VerificationCodeCreateWithoutUserInput = {
    code: string
    createdAt?: Date | string
  }

  export type VerificationCodeUncheckedCreateWithoutUserInput = {
    id?: number
    code: string
    createdAt?: Date | string
  }

  export type VerificationCodeCreateOrConnectWithoutUserInput = {
    where: VerificationCodeWhereUniqueInput
    create: XOR<VerificationCodeCreateWithoutUserInput, VerificationCodeUncheckedCreateWithoutUserInput>
  }

  export type DeliveryAddressCreateWithoutUserInput = {
    address: string
    isDefault?: boolean
  }

  export type DeliveryAddressUncheckedCreateWithoutUserInput = {
    id?: number
    address: string
    isDefault?: boolean
  }

  export type DeliveryAddressCreateOrConnectWithoutUserInput = {
    where: DeliveryAddressWhereUniqueInput
    create: XOR<DeliveryAddressCreateWithoutUserInput, DeliveryAddressUncheckedCreateWithoutUserInput>
  }

  export type DeliveryAddressCreateManyUserInputEnvelope = {
    data: DeliveryAddressCreateManyUserInput | DeliveryAddressCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    refreshToken?: StringNullableFilter<"Account"> | string | null
    accessToken?: StringNullableFilter<"Account"> | string | null
    expiresAt?: IntFilter<"Account"> | number
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    userId?: IntNullableFilter<"Account"> | number | null
  }

  export type CartUpsertWithoutUserInput = {
    update: XOR<CartUpdateWithoutUserInput, CartUncheckedUpdateWithoutUserInput>
    create: XOR<CartCreateWithoutUserInput, CartUncheckedCreateWithoutUserInput>
    where?: CartWhereInput
  }

  export type CartUpdateToOneWithWhereWithoutUserInput = {
    where?: CartWhereInput
    data: XOR<CartUpdateWithoutUserInput, CartUncheckedUpdateWithoutUserInput>
  }

  export type CartUpdateWithoutUserInput = {
    totalAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amountGoods?: IntFieldUpdateOperationsInput | number
    items?: CartItemUpdateManyWithoutCartNestedInput
  }

  export type CartUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amountGoods?: IntFieldUpdateOperationsInput | number
    items?: CartItemUncheckedUpdateManyWithoutCartNestedInput
  }

  export type OrderUpsertWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    update: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
    create: XOR<OrderCreateWithoutUserInput, OrderUncheckedCreateWithoutUserInput>
  }

  export type OrderUpdateWithWhereUniqueWithoutUserInput = {
    where: OrderWhereUniqueInput
    data: XOR<OrderUpdateWithoutUserInput, OrderUncheckedUpdateWithoutUserInput>
  }

  export type OrderUpdateManyWithWhereWithoutUserInput = {
    where: OrderScalarWhereInput
    data: XOR<OrderUpdateManyMutationInput, OrderUncheckedUpdateManyWithoutUserInput>
  }

  export type OrderScalarWhereInput = {
    AND?: OrderScalarWhereInput | OrderScalarWhereInput[]
    OR?: OrderScalarWhereInput[]
    NOT?: OrderScalarWhereInput | OrderScalarWhereInput[]
    id?: IntFilter<"Order"> | number
    userId?: IntFilter<"Order"> | number
    totalAmount?: IntFilter<"Order"> | number
    status?: EnumOrderStatusFilter<"Order"> | $Enums.OrderStatus
    paymentId?: StringNullableFilter<"Order"> | string | null
    email?: StringFilter<"Order"> | string
    phone?: StringFilter<"Order"> | string
    address?: StringFilter<"Order"> | string
    comment?: StringNullableFilter<"Order"> | string | null
    createdAt?: DateTimeFilter<"Order"> | Date | string
    updatedAt?: DateTimeFilter<"Order"> | Date | string
    firstName?: StringFilter<"Order"> | string
    items?: JsonFilter<"Order">
  }

  export type VerificationCodeUpsertWithoutUserInput = {
    update: XOR<VerificationCodeUpdateWithoutUserInput, VerificationCodeUncheckedUpdateWithoutUserInput>
    create: XOR<VerificationCodeCreateWithoutUserInput, VerificationCodeUncheckedCreateWithoutUserInput>
    where?: VerificationCodeWhereInput
  }

  export type VerificationCodeUpdateToOneWithWhereWithoutUserInput = {
    where?: VerificationCodeWhereInput
    data: XOR<VerificationCodeUpdateWithoutUserInput, VerificationCodeUncheckedUpdateWithoutUserInput>
  }

  export type VerificationCodeUpdateWithoutUserInput = {
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationCodeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DeliveryAddressUpsertWithWhereUniqueWithoutUserInput = {
    where: DeliveryAddressWhereUniqueInput
    update: XOR<DeliveryAddressUpdateWithoutUserInput, DeliveryAddressUncheckedUpdateWithoutUserInput>
    create: XOR<DeliveryAddressCreateWithoutUserInput, DeliveryAddressUncheckedCreateWithoutUserInput>
  }

  export type DeliveryAddressUpdateWithWhereUniqueWithoutUserInput = {
    where: DeliveryAddressWhereUniqueInput
    data: XOR<DeliveryAddressUpdateWithoutUserInput, DeliveryAddressUncheckedUpdateWithoutUserInput>
  }

  export type DeliveryAddressUpdateManyWithWhereWithoutUserInput = {
    where: DeliveryAddressScalarWhereInput
    data: XOR<DeliveryAddressUpdateManyMutationInput, DeliveryAddressUncheckedUpdateManyWithoutUserInput>
  }

  export type DeliveryAddressScalarWhereInput = {
    AND?: DeliveryAddressScalarWhereInput | DeliveryAddressScalarWhereInput[]
    OR?: DeliveryAddressScalarWhereInput[]
    NOT?: DeliveryAddressScalarWhereInput | DeliveryAddressScalarWhereInput[]
    id?: IntFilter<"DeliveryAddress"> | number
    userId?: IntFilter<"DeliveryAddress"> | number
    address?: StringFilter<"DeliveryAddress"> | string
    isDefault?: BoolFilter<"DeliveryAddress"> | boolean
  }

  export type UserCreateWithoutAccountsInput = {
    fullName?: string | null
    email: string
    password?: string | null
    role?: $Enums.UserRole | null
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    picture?: string | null
    method: $Enums.AuthMethod
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cart?: CartCreateNestedOneWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    verificationCode?: VerificationCodeCreateNestedOneWithoutUserInput
    deliveryAddress?: DeliveryAddressCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: number
    fullName?: string | null
    email: string
    password?: string | null
    role?: $Enums.UserRole | null
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    picture?: string | null
    method: $Enums.AuthMethod
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cart?: CartUncheckedCreateNestedOneWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    verificationCode?: VerificationCodeUncheckedCreateNestedOneWithoutUserInput
    deliveryAddress?: DeliveryAddressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cart?: CartUpdateOneWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    verificationCode?: VerificationCodeUpdateOneWithoutUserNestedInput
    deliveryAddress?: DeliveryAddressUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cart?: CartUncheckedUpdateOneWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    verificationCode?: VerificationCodeUncheckedUpdateOneWithoutUserNestedInput
    deliveryAddress?: DeliveryAddressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ParametersCreateWithoutCategoriesInput = {
    parameter: string
    ProductVariant?: ProductVariantCreateNestedManyWithoutParameterInput
  }

  export type ParametersUncheckedCreateWithoutCategoriesInput = {
    id?: number
    parameter: string
    ProductVariant?: ProductVariantUncheckedCreateNestedManyWithoutParameterInput
  }

  export type ParametersCreateOrConnectWithoutCategoriesInput = {
    where: ParametersWhereUniqueInput
    create: XOR<ParametersCreateWithoutCategoriesInput, ParametersUncheckedCreateWithoutCategoriesInput>
  }

  export type ProportionsCreateWithoutCategoriesInput = {
    value: string
    sizes?: SizesCreateNestedManyWithoutProportionInput
  }

  export type ProportionsUncheckedCreateWithoutCategoriesInput = {
    id?: number
    value: string
    sizes?: SizesUncheckedCreateNestedManyWithoutProportionInput
  }

  export type ProportionsCreateOrConnectWithoutCategoriesInput = {
    where: ProportionsWhereUniqueInput
    create: XOR<ProportionsCreateWithoutCategoriesInput, ProportionsUncheckedCreateWithoutCategoriesInput>
  }

  export type IngredientCreateWithoutCategoriesInput = {
    name: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    sizes?: SizesCreateNestedManyWithoutIngredientsInput
    product?: ProductCreateNestedManyWithoutIngredientsInput
    cartItems?: CartItemCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientUncheckedCreateWithoutCategoriesInput = {
    id?: number
    name: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    sizes?: SizesUncheckedCreateNestedManyWithoutIngredientsInput
    product?: ProductUncheckedCreateNestedManyWithoutIngredientsInput
    cartItems?: CartItemUncheckedCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientCreateOrConnectWithoutCategoriesInput = {
    where: IngredientWhereUniqueInput
    create: XOR<IngredientCreateWithoutCategoriesInput, IngredientUncheckedCreateWithoutCategoriesInput>
  }

  export type ProductCreateWithoutCategoryInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    description?: string | null
    type: $Enums.TypeProduct
    price?: number | null
    ingredients?: IngredientCreateNestedManyWithoutProductInput
    CartItem?: CartItemCreateNestedManyWithoutProductInput
    productVariant?: ProductVariantCreateNestedManyWithoutProductInput
    subProduct?: SubProductCreateNestedManyWithoutProductInput
    CartSubProduct?: CartSubProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutCategoryInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    description?: string | null
    type: $Enums.TypeProduct
    price?: number | null
    ingredients?: IngredientUncheckedCreateNestedManyWithoutProductInput
    CartItem?: CartItemUncheckedCreateNestedManyWithoutProductInput
    productVariant?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    subProduct?: SubProductUncheckedCreateNestedManyWithoutProductInput
    CartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput>
  }

  export type ProductCreateManyCategoryInputEnvelope = {
    data: ProductCreateManyCategoryInput | ProductCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type VariantTypesCreateWithoutCategoriesInput = {
    value: string
    typeProduct: $Enums.TypeProduct
    productAttribute?: ProductAttributeCreateNestedManyWithoutVariantTypesInput
  }

  export type VariantTypesUncheckedCreateWithoutCategoriesInput = {
    id?: number
    value: string
    typeProduct: $Enums.TypeProduct
    productAttribute?: ProductAttributeUncheckedCreateNestedManyWithoutVariantTypesInput
  }

  export type VariantTypesCreateOrConnectWithoutCategoriesInput = {
    where: VariantTypesWhereUniqueInput
    create: XOR<VariantTypesCreateWithoutCategoriesInput, VariantTypesUncheckedCreateWithoutCategoriesInput>
  }

  export type ParametersUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: ParametersWhereUniqueInput
    update: XOR<ParametersUpdateWithoutCategoriesInput, ParametersUncheckedUpdateWithoutCategoriesInput>
    create: XOR<ParametersCreateWithoutCategoriesInput, ParametersUncheckedCreateWithoutCategoriesInput>
  }

  export type ParametersUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: ParametersWhereUniqueInput
    data: XOR<ParametersUpdateWithoutCategoriesInput, ParametersUncheckedUpdateWithoutCategoriesInput>
  }

  export type ParametersUpdateManyWithWhereWithoutCategoriesInput = {
    where: ParametersScalarWhereInput
    data: XOR<ParametersUpdateManyMutationInput, ParametersUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type ParametersScalarWhereInput = {
    AND?: ParametersScalarWhereInput | ParametersScalarWhereInput[]
    OR?: ParametersScalarWhereInput[]
    NOT?: ParametersScalarWhereInput | ParametersScalarWhereInput[]
    id?: IntFilter<"Parameters"> | number
    parameter?: StringFilter<"Parameters"> | string
  }

  export type ProportionsUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: ProportionsWhereUniqueInput
    update: XOR<ProportionsUpdateWithoutCategoriesInput, ProportionsUncheckedUpdateWithoutCategoriesInput>
    create: XOR<ProportionsCreateWithoutCategoriesInput, ProportionsUncheckedCreateWithoutCategoriesInput>
  }

  export type ProportionsUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: ProportionsWhereUniqueInput
    data: XOR<ProportionsUpdateWithoutCategoriesInput, ProportionsUncheckedUpdateWithoutCategoriesInput>
  }

  export type ProportionsUpdateManyWithWhereWithoutCategoriesInput = {
    where: ProportionsScalarWhereInput
    data: XOR<ProportionsUpdateManyMutationInput, ProportionsUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type ProportionsScalarWhereInput = {
    AND?: ProportionsScalarWhereInput | ProportionsScalarWhereInput[]
    OR?: ProportionsScalarWhereInput[]
    NOT?: ProportionsScalarWhereInput | ProportionsScalarWhereInput[]
    id?: IntFilter<"Proportions"> | number
    value?: StringFilter<"Proportions"> | string
  }

  export type IngredientUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: IngredientWhereUniqueInput
    update: XOR<IngredientUpdateWithoutCategoriesInput, IngredientUncheckedUpdateWithoutCategoriesInput>
    create: XOR<IngredientCreateWithoutCategoriesInput, IngredientUncheckedCreateWithoutCategoriesInput>
  }

  export type IngredientUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: IngredientWhereUniqueInput
    data: XOR<IngredientUpdateWithoutCategoriesInput, IngredientUncheckedUpdateWithoutCategoriesInput>
  }

  export type IngredientUpdateManyWithWhereWithoutCategoriesInput = {
    where: IngredientScalarWhereInput
    data: XOR<IngredientUpdateManyMutationInput, IngredientUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type IngredientScalarWhereInput = {
    AND?: IngredientScalarWhereInput | IngredientScalarWhereInput[]
    OR?: IngredientScalarWhereInput[]
    NOT?: IngredientScalarWhereInput | IngredientScalarWhereInput[]
    id?: IntFilter<"Ingredient"> | number
    name?: StringFilter<"Ingredient"> | string
    price?: IntFilter<"Ingredient"> | number
    createdAt?: DateTimeFilter<"Ingredient"> | Date | string
    updatedAt?: DateTimeFilter<"Ingredient"> | Date | string
    image?: StringFilter<"Ingredient"> | string
  }

  export type ProductUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutCategoryInput, ProductUncheckedUpdateWithoutCategoryInput>
    create: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutCategoryInput, ProductUncheckedUpdateWithoutCategoryInput>
  }

  export type ProductUpdateManyWithWhereWithoutCategoryInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutCategoryInput>
  }

  export type ProductScalarWhereInput = {
    AND?: ProductScalarWhereInput | ProductScalarWhereInput[]
    OR?: ProductScalarWhereInput[]
    NOT?: ProductScalarWhereInput | ProductScalarWhereInput[]
    id?: IntFilter<"Product"> | number
    name?: StringFilter<"Product"> | string
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    image?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    categoryId?: IntFilter<"Product"> | number
    type?: EnumTypeProductFilter<"Product"> | $Enums.TypeProduct
    price?: IntNullableFilter<"Product"> | number | null
  }

  export type VariantTypesUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: VariantTypesWhereUniqueInput
    update: XOR<VariantTypesUpdateWithoutCategoriesInput, VariantTypesUncheckedUpdateWithoutCategoriesInput>
    create: XOR<VariantTypesCreateWithoutCategoriesInput, VariantTypesUncheckedCreateWithoutCategoriesInput>
  }

  export type VariantTypesUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: VariantTypesWhereUniqueInput
    data: XOR<VariantTypesUpdateWithoutCategoriesInput, VariantTypesUncheckedUpdateWithoutCategoriesInput>
  }

  export type VariantTypesUpdateManyWithWhereWithoutCategoriesInput = {
    where: VariantTypesScalarWhereInput
    data: XOR<VariantTypesUpdateManyMutationInput, VariantTypesUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type VariantTypesScalarWhereInput = {
    AND?: VariantTypesScalarWhereInput | VariantTypesScalarWhereInput[]
    OR?: VariantTypesScalarWhereInput[]
    NOT?: VariantTypesScalarWhereInput | VariantTypesScalarWhereInput[]
    id?: IntFilter<"VariantTypes"> | number
    value?: StringFilter<"VariantTypes"> | string
    typeProduct?: EnumTypeProductFilter<"VariantTypes"> | $Enums.TypeProduct
  }

  export type IngredientCreateWithoutProductInput = {
    name: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    categories?: CategoryCreateNestedManyWithoutIngredientsInput
    sizes?: SizesCreateNestedManyWithoutIngredientsInput
    cartItems?: CartItemCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientUncheckedCreateWithoutProductInput = {
    id?: number
    name: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    categories?: CategoryUncheckedCreateNestedManyWithoutIngredientsInput
    sizes?: SizesUncheckedCreateNestedManyWithoutIngredientsInput
    cartItems?: CartItemUncheckedCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientCreateOrConnectWithoutProductInput = {
    where: IngredientWhereUniqueInput
    create: XOR<IngredientCreateWithoutProductInput, IngredientUncheckedCreateWithoutProductInput>
  }

  export type CartItemCreateWithoutProductInput = {
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cart: CartCreateNestedOneWithoutItemsInput
    productVariant?: ProductVariantCreateNestedOneWithoutCartItemInput
    size?: SizesCreateNestedOneWithoutCartItemInput
    ingredients?: IngredientCreateNestedManyWithoutCartItemsInput
    cartSubProduct?: CartSubProductCreateNestedManyWithoutCartItemInput
  }

  export type CartItemUncheckedCreateWithoutProductInput = {
    id?: number
    cartId: number
    productVariantId?: number | null
    sizeId?: number | null
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ingredients?: IngredientUncheckedCreateNestedManyWithoutCartItemsInput
    cartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutCartItemInput
  }

  export type CartItemCreateOrConnectWithoutProductInput = {
    where: CartItemWhereUniqueInput
    create: XOR<CartItemCreateWithoutProductInput, CartItemUncheckedCreateWithoutProductInput>
  }

  export type CartItemCreateManyProductInputEnvelope = {
    data: CartItemCreateManyProductInput | CartItemCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type CategoryCreateWithoutProductsInput = {
    name: string
    slug: string
    type: $Enums.TypeProduct
    createdAt?: Date | string
    updatedAt?: Date | string
    parameters?: ParametersCreateNestedManyWithoutCategoriesInput
    proportions?: ProportionsCreateNestedManyWithoutCategoriesInput
    ingredients?: IngredientCreateNestedManyWithoutCategoriesInput
    variantTypes?: VariantTypesCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutProductsInput = {
    id?: number
    name: string
    slug: string
    type: $Enums.TypeProduct
    createdAt?: Date | string
    updatedAt?: Date | string
    parameters?: ParametersUncheckedCreateNestedManyWithoutCategoriesInput
    proportions?: ProportionsUncheckedCreateNestedManyWithoutCategoriesInput
    ingredients?: IngredientUncheckedCreateNestedManyWithoutCategoriesInput
    variantTypes?: VariantTypesUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryCreateOrConnectWithoutProductsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
  }

  export type ProductVariantCreateWithoutProductInput = {
    quantity?: number | null
    image: string
    priceKit?: number | null
    parameter?: ParametersCreateNestedOneWithoutProductVariantInput
    sizes?: SizesCreateNestedManyWithoutProductVariantInput
    productAttribute?: ProductAttributeCreateNestedOneWithoutProductVariantInput
    subProduct?: SubProductCreateNestedManyWithoutParentVariantInput
    parentSubProduct?: SubProductCreateNestedManyWithoutVariantInput
    CartItem?: CartItemCreateNestedManyWithoutProductVariantInput
    CartSubProduct?: CartSubProductCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantUncheckedCreateWithoutProductInput = {
    id?: number
    parameterId?: number | null
    quantity?: number | null
    image: string
    priceKit?: number | null
    sizes?: SizesUncheckedCreateNestedManyWithoutProductVariantInput
    productAttribute?: ProductAttributeUncheckedCreateNestedOneWithoutProductVariantInput
    subProduct?: SubProductUncheckedCreateNestedManyWithoutParentVariantInput
    parentSubProduct?: SubProductUncheckedCreateNestedManyWithoutVariantInput
    CartItem?: CartItemUncheckedCreateNestedManyWithoutProductVariantInput
    CartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantCreateOrConnectWithoutProductInput = {
    where: ProductVariantWhereUniqueInput
    create: XOR<ProductVariantCreateWithoutProductInput, ProductVariantUncheckedCreateWithoutProductInput>
  }

  export type ProductVariantCreateManyProductInputEnvelope = {
    data: ProductVariantCreateManyProductInput | ProductVariantCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type SubProductCreateWithoutProductInput = {
    quantity?: number | null
    isReplace?: boolean
    createdAt?: Date | string
    variant: ProductVariantCreateNestedOneWithoutParentSubProductInput
    parentVariant: ProductVariantCreateNestedOneWithoutSubProductInput
    size: SizesCreateNestedOneWithoutSubProductInput
  }

  export type SubProductUncheckedCreateWithoutProductInput = {
    id?: number
    variantId: number
    parentVariantId: number
    subSizeId: number
    quantity?: number | null
    isReplace?: boolean
    createdAt?: Date | string
  }

  export type SubProductCreateOrConnectWithoutProductInput = {
    where: SubProductWhereUniqueInput
    create: XOR<SubProductCreateWithoutProductInput, SubProductUncheckedCreateWithoutProductInput>
  }

  export type SubProductCreateManyProductInputEnvelope = {
    data: SubProductCreateManyProductInput | SubProductCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type CartSubProductCreateWithoutProductInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    index: number
    variant: ProductVariantCreateNestedOneWithoutCartSubProductInput
    size: SizesCreateNestedOneWithoutCartSubProductInput
    cartItem: CartItemCreateNestedOneWithoutCartSubProductInput
  }

  export type CartSubProductUncheckedCreateWithoutProductInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    sizeId: number
    variantId: number
    cartItemId: number
    index: number
  }

  export type CartSubProductCreateOrConnectWithoutProductInput = {
    where: CartSubProductWhereUniqueInput
    create: XOR<CartSubProductCreateWithoutProductInput, CartSubProductUncheckedCreateWithoutProductInput>
  }

  export type CartSubProductCreateManyProductInputEnvelope = {
    data: CartSubProductCreateManyProductInput | CartSubProductCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type IngredientUpsertWithWhereUniqueWithoutProductInput = {
    where: IngredientWhereUniqueInput
    update: XOR<IngredientUpdateWithoutProductInput, IngredientUncheckedUpdateWithoutProductInput>
    create: XOR<IngredientCreateWithoutProductInput, IngredientUncheckedCreateWithoutProductInput>
  }

  export type IngredientUpdateWithWhereUniqueWithoutProductInput = {
    where: IngredientWhereUniqueInput
    data: XOR<IngredientUpdateWithoutProductInput, IngredientUncheckedUpdateWithoutProductInput>
  }

  export type IngredientUpdateManyWithWhereWithoutProductInput = {
    where: IngredientScalarWhereInput
    data: XOR<IngredientUpdateManyMutationInput, IngredientUncheckedUpdateManyWithoutProductInput>
  }

  export type CartItemUpsertWithWhereUniqueWithoutProductInput = {
    where: CartItemWhereUniqueInput
    update: XOR<CartItemUpdateWithoutProductInput, CartItemUncheckedUpdateWithoutProductInput>
    create: XOR<CartItemCreateWithoutProductInput, CartItemUncheckedCreateWithoutProductInput>
  }

  export type CartItemUpdateWithWhereUniqueWithoutProductInput = {
    where: CartItemWhereUniqueInput
    data: XOR<CartItemUpdateWithoutProductInput, CartItemUncheckedUpdateWithoutProductInput>
  }

  export type CartItemUpdateManyWithWhereWithoutProductInput = {
    where: CartItemScalarWhereInput
    data: XOR<CartItemUpdateManyMutationInput, CartItemUncheckedUpdateManyWithoutProductInput>
  }

  export type CartItemScalarWhereInput = {
    AND?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
    OR?: CartItemScalarWhereInput[]
    NOT?: CartItemScalarWhereInput | CartItemScalarWhereInput[]
    id?: IntFilter<"CartItem"> | number
    cartId?: IntFilter<"CartItem"> | number
    productVariantId?: IntNullableFilter<"CartItem"> | number | null
    productId?: IntFilter<"CartItem"> | number
    sizeId?: IntNullableFilter<"CartItem"> | number | null
    quantity?: IntFilter<"CartItem"> | number
    createdAt?: DateTimeFilter<"CartItem"> | Date | string
    updatedAt?: DateTimeFilter<"CartItem"> | Date | string
  }

  export type CategoryUpsertWithoutProductsInput = {
    update: XOR<CategoryUpdateWithoutProductsInput, CategoryUncheckedUpdateWithoutProductsInput>
    create: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutProductsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutProductsInput, CategoryUncheckedUpdateWithoutProductsInput>
  }

  export type CategoryUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parameters?: ParametersUpdateManyWithoutCategoriesNestedInput
    proportions?: ProportionsUpdateManyWithoutCategoriesNestedInput
    ingredients?: IngredientUpdateManyWithoutCategoriesNestedInput
    variantTypes?: VariantTypesUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutProductsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parameters?: ParametersUncheckedUpdateManyWithoutCategoriesNestedInput
    proportions?: ProportionsUncheckedUpdateManyWithoutCategoriesNestedInput
    ingredients?: IngredientUncheckedUpdateManyWithoutCategoriesNestedInput
    variantTypes?: VariantTypesUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type ProductVariantUpsertWithWhereUniqueWithoutProductInput = {
    where: ProductVariantWhereUniqueInput
    update: XOR<ProductVariantUpdateWithoutProductInput, ProductVariantUncheckedUpdateWithoutProductInput>
    create: XOR<ProductVariantCreateWithoutProductInput, ProductVariantUncheckedCreateWithoutProductInput>
  }

  export type ProductVariantUpdateWithWhereUniqueWithoutProductInput = {
    where: ProductVariantWhereUniqueInput
    data: XOR<ProductVariantUpdateWithoutProductInput, ProductVariantUncheckedUpdateWithoutProductInput>
  }

  export type ProductVariantUpdateManyWithWhereWithoutProductInput = {
    where: ProductVariantScalarWhereInput
    data: XOR<ProductVariantUpdateManyMutationInput, ProductVariantUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductVariantScalarWhereInput = {
    AND?: ProductVariantScalarWhereInput | ProductVariantScalarWhereInput[]
    OR?: ProductVariantScalarWhereInput[]
    NOT?: ProductVariantScalarWhereInput | ProductVariantScalarWhereInput[]
    id?: IntFilter<"ProductVariant"> | number
    parameterId?: IntNullableFilter<"ProductVariant"> | number | null
    quantity?: IntNullableFilter<"ProductVariant"> | number | null
    productId?: IntFilter<"ProductVariant"> | number
    image?: StringFilter<"ProductVariant"> | string
    priceKit?: IntNullableFilter<"ProductVariant"> | number | null
  }

  export type SubProductUpsertWithWhereUniqueWithoutProductInput = {
    where: SubProductWhereUniqueInput
    update: XOR<SubProductUpdateWithoutProductInput, SubProductUncheckedUpdateWithoutProductInput>
    create: XOR<SubProductCreateWithoutProductInput, SubProductUncheckedCreateWithoutProductInput>
  }

  export type SubProductUpdateWithWhereUniqueWithoutProductInput = {
    where: SubProductWhereUniqueInput
    data: XOR<SubProductUpdateWithoutProductInput, SubProductUncheckedUpdateWithoutProductInput>
  }

  export type SubProductUpdateManyWithWhereWithoutProductInput = {
    where: SubProductScalarWhereInput
    data: XOR<SubProductUpdateManyMutationInput, SubProductUncheckedUpdateManyWithoutProductInput>
  }

  export type SubProductScalarWhereInput = {
    AND?: SubProductScalarWhereInput | SubProductScalarWhereInput[]
    OR?: SubProductScalarWhereInput[]
    NOT?: SubProductScalarWhereInput | SubProductScalarWhereInput[]
    id?: IntFilter<"SubProduct"> | number
    productId?: IntFilter<"SubProduct"> | number
    variantId?: IntFilter<"SubProduct"> | number
    parentVariantId?: IntFilter<"SubProduct"> | number
    subSizeId?: IntFilter<"SubProduct"> | number
    quantity?: IntNullableFilter<"SubProduct"> | number | null
    isReplace?: BoolFilter<"SubProduct"> | boolean
    createdAt?: DateTimeFilter<"SubProduct"> | Date | string
  }

  export type CartSubProductUpsertWithWhereUniqueWithoutProductInput = {
    where: CartSubProductWhereUniqueInput
    update: XOR<CartSubProductUpdateWithoutProductInput, CartSubProductUncheckedUpdateWithoutProductInput>
    create: XOR<CartSubProductCreateWithoutProductInput, CartSubProductUncheckedCreateWithoutProductInput>
  }

  export type CartSubProductUpdateWithWhereUniqueWithoutProductInput = {
    where: CartSubProductWhereUniqueInput
    data: XOR<CartSubProductUpdateWithoutProductInput, CartSubProductUncheckedUpdateWithoutProductInput>
  }

  export type CartSubProductUpdateManyWithWhereWithoutProductInput = {
    where: CartSubProductScalarWhereInput
    data: XOR<CartSubProductUpdateManyMutationInput, CartSubProductUncheckedUpdateManyWithoutProductInput>
  }

  export type CartSubProductScalarWhereInput = {
    AND?: CartSubProductScalarWhereInput | CartSubProductScalarWhereInput[]
    OR?: CartSubProductScalarWhereInput[]
    NOT?: CartSubProductScalarWhereInput | CartSubProductScalarWhereInput[]
    id?: IntFilter<"CartSubProduct"> | number
    createdAt?: DateTimeFilter<"CartSubProduct"> | Date | string
    updatedAt?: DateTimeFilter<"CartSubProduct"> | Date | string
    subProductId?: IntFilter<"CartSubProduct"> | number
    sizeId?: IntFilter<"CartSubProduct"> | number
    variantId?: IntFilter<"CartSubProduct"> | number
    cartItemId?: IntFilter<"CartSubProduct"> | number
    index?: IntFilter<"CartSubProduct"> | number
  }

  export type ParametersCreateWithoutProductVariantInput = {
    parameter: string
    categories?: CategoryCreateNestedManyWithoutParametersInput
  }

  export type ParametersUncheckedCreateWithoutProductVariantInput = {
    id?: number
    parameter: string
    categories?: CategoryUncheckedCreateNestedManyWithoutParametersInput
  }

  export type ParametersCreateOrConnectWithoutProductVariantInput = {
    where: ParametersWhereUniqueInput
    create: XOR<ParametersCreateWithoutProductVariantInput, ParametersUncheckedCreateWithoutProductVariantInput>
  }

  export type SizesCreateWithoutProductVariantInput = {
    price: number
    weight?: string | null
    quantity?: number | null
    proportion: ProportionsCreateNestedOneWithoutSizesInput
    ingredients?: IngredientCreateNestedManyWithoutSizesInput
    SubProduct?: SubProductCreateNestedManyWithoutSizeInput
    CartItem?: CartItemCreateNestedManyWithoutSizeInput
    CartSubProduct?: CartSubProductCreateNestedManyWithoutSizeInput
  }

  export type SizesUncheckedCreateWithoutProductVariantInput = {
    id?: number
    proportionId: number
    price: number
    weight?: string | null
    quantity?: number | null
    ingredients?: IngredientUncheckedCreateNestedManyWithoutSizesInput
    SubProduct?: SubProductUncheckedCreateNestedManyWithoutSizeInput
    CartItem?: CartItemUncheckedCreateNestedManyWithoutSizeInput
    CartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutSizeInput
  }

  export type SizesCreateOrConnectWithoutProductVariantInput = {
    where: SizesWhereUniqueInput
    create: XOR<SizesCreateWithoutProductVariantInput, SizesUncheckedCreateWithoutProductVariantInput>
  }

  export type SizesCreateManyProductVariantInputEnvelope = {
    data: SizesCreateManyProductVariantInput | SizesCreateManyProductVariantInput[]
    skipDuplicates?: boolean
  }

  export type ProductAttributeCreateWithoutProductVariantInput = {
    name?: string | null
    variantTypes?: VariantTypesCreateNestedOneWithoutProductAttributeInput
  }

  export type ProductAttributeUncheckedCreateWithoutProductVariantInput = {
    id?: number
    name?: string | null
    variantTypesId?: number | null
  }

  export type ProductAttributeCreateOrConnectWithoutProductVariantInput = {
    where: ProductAttributeWhereUniqueInput
    create: XOR<ProductAttributeCreateWithoutProductVariantInput, ProductAttributeUncheckedCreateWithoutProductVariantInput>
  }

  export type ProductCreateWithoutProductVariantInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    description?: string | null
    type: $Enums.TypeProduct
    price?: number | null
    ingredients?: IngredientCreateNestedManyWithoutProductInput
    CartItem?: CartItemCreateNestedManyWithoutProductInput
    category: CategoryCreateNestedOneWithoutProductsInput
    subProduct?: SubProductCreateNestedManyWithoutProductInput
    CartSubProduct?: CartSubProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutProductVariantInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    description?: string | null
    categoryId: number
    type: $Enums.TypeProduct
    price?: number | null
    ingredients?: IngredientUncheckedCreateNestedManyWithoutProductInput
    CartItem?: CartItemUncheckedCreateNestedManyWithoutProductInput
    subProduct?: SubProductUncheckedCreateNestedManyWithoutProductInput
    CartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutProductVariantInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutProductVariantInput, ProductUncheckedCreateWithoutProductVariantInput>
  }

  export type SubProductCreateWithoutParentVariantInput = {
    quantity?: number | null
    isReplace?: boolean
    createdAt?: Date | string
    product: ProductCreateNestedOneWithoutSubProductInput
    variant: ProductVariantCreateNestedOneWithoutParentSubProductInput
    size: SizesCreateNestedOneWithoutSubProductInput
  }

  export type SubProductUncheckedCreateWithoutParentVariantInput = {
    id?: number
    productId: number
    variantId: number
    subSizeId: number
    quantity?: number | null
    isReplace?: boolean
    createdAt?: Date | string
  }

  export type SubProductCreateOrConnectWithoutParentVariantInput = {
    where: SubProductWhereUniqueInput
    create: XOR<SubProductCreateWithoutParentVariantInput, SubProductUncheckedCreateWithoutParentVariantInput>
  }

  export type SubProductCreateManyParentVariantInputEnvelope = {
    data: SubProductCreateManyParentVariantInput | SubProductCreateManyParentVariantInput[]
    skipDuplicates?: boolean
  }

  export type SubProductCreateWithoutVariantInput = {
    quantity?: number | null
    isReplace?: boolean
    createdAt?: Date | string
    product: ProductCreateNestedOneWithoutSubProductInput
    parentVariant: ProductVariantCreateNestedOneWithoutSubProductInput
    size: SizesCreateNestedOneWithoutSubProductInput
  }

  export type SubProductUncheckedCreateWithoutVariantInput = {
    id?: number
    productId: number
    parentVariantId: number
    subSizeId: number
    quantity?: number | null
    isReplace?: boolean
    createdAt?: Date | string
  }

  export type SubProductCreateOrConnectWithoutVariantInput = {
    where: SubProductWhereUniqueInput
    create: XOR<SubProductCreateWithoutVariantInput, SubProductUncheckedCreateWithoutVariantInput>
  }

  export type SubProductCreateManyVariantInputEnvelope = {
    data: SubProductCreateManyVariantInput | SubProductCreateManyVariantInput[]
    skipDuplicates?: boolean
  }

  export type CartItemCreateWithoutProductVariantInput = {
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cart: CartCreateNestedOneWithoutItemsInput
    product: ProductCreateNestedOneWithoutCartItemInput
    size?: SizesCreateNestedOneWithoutCartItemInput
    ingredients?: IngredientCreateNestedManyWithoutCartItemsInput
    cartSubProduct?: CartSubProductCreateNestedManyWithoutCartItemInput
  }

  export type CartItemUncheckedCreateWithoutProductVariantInput = {
    id?: number
    cartId: number
    productId: number
    sizeId?: number | null
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ingredients?: IngredientUncheckedCreateNestedManyWithoutCartItemsInput
    cartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutCartItemInput
  }

  export type CartItemCreateOrConnectWithoutProductVariantInput = {
    where: CartItemWhereUniqueInput
    create: XOR<CartItemCreateWithoutProductVariantInput, CartItemUncheckedCreateWithoutProductVariantInput>
  }

  export type CartItemCreateManyProductVariantInputEnvelope = {
    data: CartItemCreateManyProductVariantInput | CartItemCreateManyProductVariantInput[]
    skipDuplicates?: boolean
  }

  export type CartSubProductCreateWithoutVariantInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    index: number
    product: ProductCreateNestedOneWithoutCartSubProductInput
    size: SizesCreateNestedOneWithoutCartSubProductInput
    cartItem: CartItemCreateNestedOneWithoutCartSubProductInput
  }

  export type CartSubProductUncheckedCreateWithoutVariantInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subProductId: number
    sizeId: number
    cartItemId: number
    index: number
  }

  export type CartSubProductCreateOrConnectWithoutVariantInput = {
    where: CartSubProductWhereUniqueInput
    create: XOR<CartSubProductCreateWithoutVariantInput, CartSubProductUncheckedCreateWithoutVariantInput>
  }

  export type CartSubProductCreateManyVariantInputEnvelope = {
    data: CartSubProductCreateManyVariantInput | CartSubProductCreateManyVariantInput[]
    skipDuplicates?: boolean
  }

  export type ParametersUpsertWithoutProductVariantInput = {
    update: XOR<ParametersUpdateWithoutProductVariantInput, ParametersUncheckedUpdateWithoutProductVariantInput>
    create: XOR<ParametersCreateWithoutProductVariantInput, ParametersUncheckedCreateWithoutProductVariantInput>
    where?: ParametersWhereInput
  }

  export type ParametersUpdateToOneWithWhereWithoutProductVariantInput = {
    where?: ParametersWhereInput
    data: XOR<ParametersUpdateWithoutProductVariantInput, ParametersUncheckedUpdateWithoutProductVariantInput>
  }

  export type ParametersUpdateWithoutProductVariantInput = {
    parameter?: StringFieldUpdateOperationsInput | string
    categories?: CategoryUpdateManyWithoutParametersNestedInput
  }

  export type ParametersUncheckedUpdateWithoutProductVariantInput = {
    id?: IntFieldUpdateOperationsInput | number
    parameter?: StringFieldUpdateOperationsInput | string
    categories?: CategoryUncheckedUpdateManyWithoutParametersNestedInput
  }

  export type SizesUpsertWithWhereUniqueWithoutProductVariantInput = {
    where: SizesWhereUniqueInput
    update: XOR<SizesUpdateWithoutProductVariantInput, SizesUncheckedUpdateWithoutProductVariantInput>
    create: XOR<SizesCreateWithoutProductVariantInput, SizesUncheckedCreateWithoutProductVariantInput>
  }

  export type SizesUpdateWithWhereUniqueWithoutProductVariantInput = {
    where: SizesWhereUniqueInput
    data: XOR<SizesUpdateWithoutProductVariantInput, SizesUncheckedUpdateWithoutProductVariantInput>
  }

  export type SizesUpdateManyWithWhereWithoutProductVariantInput = {
    where: SizesScalarWhereInput
    data: XOR<SizesUpdateManyMutationInput, SizesUncheckedUpdateManyWithoutProductVariantInput>
  }

  export type SizesScalarWhereInput = {
    AND?: SizesScalarWhereInput | SizesScalarWhereInput[]
    OR?: SizesScalarWhereInput[]
    NOT?: SizesScalarWhereInput | SizesScalarWhereInput[]
    id?: IntFilter<"Sizes"> | number
    proportionId?: IntFilter<"Sizes"> | number
    price?: IntFilter<"Sizes"> | number
    weight?: StringNullableFilter<"Sizes"> | string | null
    productVariantId?: IntFilter<"Sizes"> | number
    quantity?: IntNullableFilter<"Sizes"> | number | null
  }

  export type ProductAttributeUpsertWithoutProductVariantInput = {
    update: XOR<ProductAttributeUpdateWithoutProductVariantInput, ProductAttributeUncheckedUpdateWithoutProductVariantInput>
    create: XOR<ProductAttributeCreateWithoutProductVariantInput, ProductAttributeUncheckedCreateWithoutProductVariantInput>
    where?: ProductAttributeWhereInput
  }

  export type ProductAttributeUpdateToOneWithWhereWithoutProductVariantInput = {
    where?: ProductAttributeWhereInput
    data: XOR<ProductAttributeUpdateWithoutProductVariantInput, ProductAttributeUncheckedUpdateWithoutProductVariantInput>
  }

  export type ProductAttributeUpdateWithoutProductVariantInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    variantTypes?: VariantTypesUpdateOneWithoutProductAttributeNestedInput
  }

  export type ProductAttributeUncheckedUpdateWithoutProductVariantInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    variantTypesId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProductUpsertWithoutProductVariantInput = {
    update: XOR<ProductUpdateWithoutProductVariantInput, ProductUncheckedUpdateWithoutProductVariantInput>
    create: XOR<ProductCreateWithoutProductVariantInput, ProductUncheckedCreateWithoutProductVariantInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutProductVariantInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutProductVariantInput, ProductUncheckedUpdateWithoutProductVariantInput>
  }

  export type ProductUpdateWithoutProductVariantInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    price?: NullableIntFieldUpdateOperationsInput | number | null
    ingredients?: IngredientUpdateManyWithoutProductNestedInput
    CartItem?: CartItemUpdateManyWithoutProductNestedInput
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    subProduct?: SubProductUpdateManyWithoutProductNestedInput
    CartSubProduct?: CartSubProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutProductVariantInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    price?: NullableIntFieldUpdateOperationsInput | number | null
    ingredients?: IngredientUncheckedUpdateManyWithoutProductNestedInput
    CartItem?: CartItemUncheckedUpdateManyWithoutProductNestedInput
    subProduct?: SubProductUncheckedUpdateManyWithoutProductNestedInput
    CartSubProduct?: CartSubProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type SubProductUpsertWithWhereUniqueWithoutParentVariantInput = {
    where: SubProductWhereUniqueInput
    update: XOR<SubProductUpdateWithoutParentVariantInput, SubProductUncheckedUpdateWithoutParentVariantInput>
    create: XOR<SubProductCreateWithoutParentVariantInput, SubProductUncheckedCreateWithoutParentVariantInput>
  }

  export type SubProductUpdateWithWhereUniqueWithoutParentVariantInput = {
    where: SubProductWhereUniqueInput
    data: XOR<SubProductUpdateWithoutParentVariantInput, SubProductUncheckedUpdateWithoutParentVariantInput>
  }

  export type SubProductUpdateManyWithWhereWithoutParentVariantInput = {
    where: SubProductScalarWhereInput
    data: XOR<SubProductUpdateManyMutationInput, SubProductUncheckedUpdateManyWithoutParentVariantInput>
  }

  export type SubProductUpsertWithWhereUniqueWithoutVariantInput = {
    where: SubProductWhereUniqueInput
    update: XOR<SubProductUpdateWithoutVariantInput, SubProductUncheckedUpdateWithoutVariantInput>
    create: XOR<SubProductCreateWithoutVariantInput, SubProductUncheckedCreateWithoutVariantInput>
  }

  export type SubProductUpdateWithWhereUniqueWithoutVariantInput = {
    where: SubProductWhereUniqueInput
    data: XOR<SubProductUpdateWithoutVariantInput, SubProductUncheckedUpdateWithoutVariantInput>
  }

  export type SubProductUpdateManyWithWhereWithoutVariantInput = {
    where: SubProductScalarWhereInput
    data: XOR<SubProductUpdateManyMutationInput, SubProductUncheckedUpdateManyWithoutVariantInput>
  }

  export type CartItemUpsertWithWhereUniqueWithoutProductVariantInput = {
    where: CartItemWhereUniqueInput
    update: XOR<CartItemUpdateWithoutProductVariantInput, CartItemUncheckedUpdateWithoutProductVariantInput>
    create: XOR<CartItemCreateWithoutProductVariantInput, CartItemUncheckedCreateWithoutProductVariantInput>
  }

  export type CartItemUpdateWithWhereUniqueWithoutProductVariantInput = {
    where: CartItemWhereUniqueInput
    data: XOR<CartItemUpdateWithoutProductVariantInput, CartItemUncheckedUpdateWithoutProductVariantInput>
  }

  export type CartItemUpdateManyWithWhereWithoutProductVariantInput = {
    where: CartItemScalarWhereInput
    data: XOR<CartItemUpdateManyMutationInput, CartItemUncheckedUpdateManyWithoutProductVariantInput>
  }

  export type CartSubProductUpsertWithWhereUniqueWithoutVariantInput = {
    where: CartSubProductWhereUniqueInput
    update: XOR<CartSubProductUpdateWithoutVariantInput, CartSubProductUncheckedUpdateWithoutVariantInput>
    create: XOR<CartSubProductCreateWithoutVariantInput, CartSubProductUncheckedCreateWithoutVariantInput>
  }

  export type CartSubProductUpdateWithWhereUniqueWithoutVariantInput = {
    where: CartSubProductWhereUniqueInput
    data: XOR<CartSubProductUpdateWithoutVariantInput, CartSubProductUncheckedUpdateWithoutVariantInput>
  }

  export type CartSubProductUpdateManyWithWhereWithoutVariantInput = {
    where: CartSubProductScalarWhereInput
    data: XOR<CartSubProductUpdateManyMutationInput, CartSubProductUncheckedUpdateManyWithoutVariantInput>
  }

  export type ProductCreateWithoutSubProductInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    description?: string | null
    type: $Enums.TypeProduct
    price?: number | null
    ingredients?: IngredientCreateNestedManyWithoutProductInput
    CartItem?: CartItemCreateNestedManyWithoutProductInput
    category: CategoryCreateNestedOneWithoutProductsInput
    productVariant?: ProductVariantCreateNestedManyWithoutProductInput
    CartSubProduct?: CartSubProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutSubProductInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    description?: string | null
    categoryId: number
    type: $Enums.TypeProduct
    price?: number | null
    ingredients?: IngredientUncheckedCreateNestedManyWithoutProductInput
    CartItem?: CartItemUncheckedCreateNestedManyWithoutProductInput
    productVariant?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    CartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutSubProductInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutSubProductInput, ProductUncheckedCreateWithoutSubProductInput>
  }

  export type ProductVariantCreateWithoutParentSubProductInput = {
    quantity?: number | null
    image: string
    priceKit?: number | null
    parameter?: ParametersCreateNestedOneWithoutProductVariantInput
    sizes?: SizesCreateNestedManyWithoutProductVariantInput
    productAttribute?: ProductAttributeCreateNestedOneWithoutProductVariantInput
    Product: ProductCreateNestedOneWithoutProductVariantInput
    subProduct?: SubProductCreateNestedManyWithoutParentVariantInput
    CartItem?: CartItemCreateNestedManyWithoutProductVariantInput
    CartSubProduct?: CartSubProductCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantUncheckedCreateWithoutParentSubProductInput = {
    id?: number
    parameterId?: number | null
    quantity?: number | null
    productId: number
    image: string
    priceKit?: number | null
    sizes?: SizesUncheckedCreateNestedManyWithoutProductVariantInput
    productAttribute?: ProductAttributeUncheckedCreateNestedOneWithoutProductVariantInput
    subProduct?: SubProductUncheckedCreateNestedManyWithoutParentVariantInput
    CartItem?: CartItemUncheckedCreateNestedManyWithoutProductVariantInput
    CartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantCreateOrConnectWithoutParentSubProductInput = {
    where: ProductVariantWhereUniqueInput
    create: XOR<ProductVariantCreateWithoutParentSubProductInput, ProductVariantUncheckedCreateWithoutParentSubProductInput>
  }

  export type ProductVariantCreateWithoutSubProductInput = {
    quantity?: number | null
    image: string
    priceKit?: number | null
    parameter?: ParametersCreateNestedOneWithoutProductVariantInput
    sizes?: SizesCreateNestedManyWithoutProductVariantInput
    productAttribute?: ProductAttributeCreateNestedOneWithoutProductVariantInput
    Product: ProductCreateNestedOneWithoutProductVariantInput
    parentSubProduct?: SubProductCreateNestedManyWithoutVariantInput
    CartItem?: CartItemCreateNestedManyWithoutProductVariantInput
    CartSubProduct?: CartSubProductCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantUncheckedCreateWithoutSubProductInput = {
    id?: number
    parameterId?: number | null
    quantity?: number | null
    productId: number
    image: string
    priceKit?: number | null
    sizes?: SizesUncheckedCreateNestedManyWithoutProductVariantInput
    productAttribute?: ProductAttributeUncheckedCreateNestedOneWithoutProductVariantInput
    parentSubProduct?: SubProductUncheckedCreateNestedManyWithoutVariantInput
    CartItem?: CartItemUncheckedCreateNestedManyWithoutProductVariantInput
    CartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantCreateOrConnectWithoutSubProductInput = {
    where: ProductVariantWhereUniqueInput
    create: XOR<ProductVariantCreateWithoutSubProductInput, ProductVariantUncheckedCreateWithoutSubProductInput>
  }

  export type SizesCreateWithoutSubProductInput = {
    price: number
    weight?: string | null
    quantity?: number | null
    proportion: ProportionsCreateNestedOneWithoutSizesInput
    ingredients?: IngredientCreateNestedManyWithoutSizesInput
    productVariant: ProductVariantCreateNestedOneWithoutSizesInput
    CartItem?: CartItemCreateNestedManyWithoutSizeInput
    CartSubProduct?: CartSubProductCreateNestedManyWithoutSizeInput
  }

  export type SizesUncheckedCreateWithoutSubProductInput = {
    id?: number
    proportionId: number
    price: number
    weight?: string | null
    productVariantId: number
    quantity?: number | null
    ingredients?: IngredientUncheckedCreateNestedManyWithoutSizesInput
    CartItem?: CartItemUncheckedCreateNestedManyWithoutSizeInput
    CartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutSizeInput
  }

  export type SizesCreateOrConnectWithoutSubProductInput = {
    where: SizesWhereUniqueInput
    create: XOR<SizesCreateWithoutSubProductInput, SizesUncheckedCreateWithoutSubProductInput>
  }

  export type ProductUpsertWithoutSubProductInput = {
    update: XOR<ProductUpdateWithoutSubProductInput, ProductUncheckedUpdateWithoutSubProductInput>
    create: XOR<ProductCreateWithoutSubProductInput, ProductUncheckedCreateWithoutSubProductInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutSubProductInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutSubProductInput, ProductUncheckedUpdateWithoutSubProductInput>
  }

  export type ProductUpdateWithoutSubProductInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    price?: NullableIntFieldUpdateOperationsInput | number | null
    ingredients?: IngredientUpdateManyWithoutProductNestedInput
    CartItem?: CartItemUpdateManyWithoutProductNestedInput
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    productVariant?: ProductVariantUpdateManyWithoutProductNestedInput
    CartSubProduct?: CartSubProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutSubProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    price?: NullableIntFieldUpdateOperationsInput | number | null
    ingredients?: IngredientUncheckedUpdateManyWithoutProductNestedInput
    CartItem?: CartItemUncheckedUpdateManyWithoutProductNestedInput
    productVariant?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    CartSubProduct?: CartSubProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductVariantUpsertWithoutParentSubProductInput = {
    update: XOR<ProductVariantUpdateWithoutParentSubProductInput, ProductVariantUncheckedUpdateWithoutParentSubProductInput>
    create: XOR<ProductVariantCreateWithoutParentSubProductInput, ProductVariantUncheckedCreateWithoutParentSubProductInput>
    where?: ProductVariantWhereInput
  }

  export type ProductVariantUpdateToOneWithWhereWithoutParentSubProductInput = {
    where?: ProductVariantWhereInput
    data: XOR<ProductVariantUpdateWithoutParentSubProductInput, ProductVariantUncheckedUpdateWithoutParentSubProductInput>
  }

  export type ProductVariantUpdateWithoutParentSubProductInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    priceKit?: NullableIntFieldUpdateOperationsInput | number | null
    parameter?: ParametersUpdateOneWithoutProductVariantNestedInput
    sizes?: SizesUpdateManyWithoutProductVariantNestedInput
    productAttribute?: ProductAttributeUpdateOneWithoutProductVariantNestedInput
    Product?: ProductUpdateOneRequiredWithoutProductVariantNestedInput
    subProduct?: SubProductUpdateManyWithoutParentVariantNestedInput
    CartItem?: CartItemUpdateManyWithoutProductVariantNestedInput
    CartSubProduct?: CartSubProductUpdateManyWithoutVariantNestedInput
  }

  export type ProductVariantUncheckedUpdateWithoutParentSubProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    parameterId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    priceKit?: NullableIntFieldUpdateOperationsInput | number | null
    sizes?: SizesUncheckedUpdateManyWithoutProductVariantNestedInput
    productAttribute?: ProductAttributeUncheckedUpdateOneWithoutProductVariantNestedInput
    subProduct?: SubProductUncheckedUpdateManyWithoutParentVariantNestedInput
    CartItem?: CartItemUncheckedUpdateManyWithoutProductVariantNestedInput
    CartSubProduct?: CartSubProductUncheckedUpdateManyWithoutVariantNestedInput
  }

  export type ProductVariantUpsertWithoutSubProductInput = {
    update: XOR<ProductVariantUpdateWithoutSubProductInput, ProductVariantUncheckedUpdateWithoutSubProductInput>
    create: XOR<ProductVariantCreateWithoutSubProductInput, ProductVariantUncheckedCreateWithoutSubProductInput>
    where?: ProductVariantWhereInput
  }

  export type ProductVariantUpdateToOneWithWhereWithoutSubProductInput = {
    where?: ProductVariantWhereInput
    data: XOR<ProductVariantUpdateWithoutSubProductInput, ProductVariantUncheckedUpdateWithoutSubProductInput>
  }

  export type ProductVariantUpdateWithoutSubProductInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    priceKit?: NullableIntFieldUpdateOperationsInput | number | null
    parameter?: ParametersUpdateOneWithoutProductVariantNestedInput
    sizes?: SizesUpdateManyWithoutProductVariantNestedInput
    productAttribute?: ProductAttributeUpdateOneWithoutProductVariantNestedInput
    Product?: ProductUpdateOneRequiredWithoutProductVariantNestedInput
    parentSubProduct?: SubProductUpdateManyWithoutVariantNestedInput
    CartItem?: CartItemUpdateManyWithoutProductVariantNestedInput
    CartSubProduct?: CartSubProductUpdateManyWithoutVariantNestedInput
  }

  export type ProductVariantUncheckedUpdateWithoutSubProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    parameterId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    priceKit?: NullableIntFieldUpdateOperationsInput | number | null
    sizes?: SizesUncheckedUpdateManyWithoutProductVariantNestedInput
    productAttribute?: ProductAttributeUncheckedUpdateOneWithoutProductVariantNestedInput
    parentSubProduct?: SubProductUncheckedUpdateManyWithoutVariantNestedInput
    CartItem?: CartItemUncheckedUpdateManyWithoutProductVariantNestedInput
    CartSubProduct?: CartSubProductUncheckedUpdateManyWithoutVariantNestedInput
  }

  export type SizesUpsertWithoutSubProductInput = {
    update: XOR<SizesUpdateWithoutSubProductInput, SizesUncheckedUpdateWithoutSubProductInput>
    create: XOR<SizesCreateWithoutSubProductInput, SizesUncheckedCreateWithoutSubProductInput>
    where?: SizesWhereInput
  }

  export type SizesUpdateToOneWithWhereWithoutSubProductInput = {
    where?: SizesWhereInput
    data: XOR<SizesUpdateWithoutSubProductInput, SizesUncheckedUpdateWithoutSubProductInput>
  }

  export type SizesUpdateWithoutSubProductInput = {
    price?: IntFieldUpdateOperationsInput | number
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    proportion?: ProportionsUpdateOneRequiredWithoutSizesNestedInput
    ingredients?: IngredientUpdateManyWithoutSizesNestedInput
    productVariant?: ProductVariantUpdateOneRequiredWithoutSizesNestedInput
    CartItem?: CartItemUpdateManyWithoutSizeNestedInput
    CartSubProduct?: CartSubProductUpdateManyWithoutSizeNestedInput
  }

  export type SizesUncheckedUpdateWithoutSubProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    proportionId?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    productVariantId?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    ingredients?: IngredientUncheckedUpdateManyWithoutSizesNestedInput
    CartItem?: CartItemUncheckedUpdateManyWithoutSizeNestedInput
    CartSubProduct?: CartSubProductUncheckedUpdateManyWithoutSizeNestedInput
  }

  export type ProductVariantCreateWithoutProductAttributeInput = {
    quantity?: number | null
    image: string
    priceKit?: number | null
    parameter?: ParametersCreateNestedOneWithoutProductVariantInput
    sizes?: SizesCreateNestedManyWithoutProductVariantInput
    Product: ProductCreateNestedOneWithoutProductVariantInput
    subProduct?: SubProductCreateNestedManyWithoutParentVariantInput
    parentSubProduct?: SubProductCreateNestedManyWithoutVariantInput
    CartItem?: CartItemCreateNestedManyWithoutProductVariantInput
    CartSubProduct?: CartSubProductCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantUncheckedCreateWithoutProductAttributeInput = {
    id?: number
    parameterId?: number | null
    quantity?: number | null
    productId: number
    image: string
    priceKit?: number | null
    sizes?: SizesUncheckedCreateNestedManyWithoutProductVariantInput
    subProduct?: SubProductUncheckedCreateNestedManyWithoutParentVariantInput
    parentSubProduct?: SubProductUncheckedCreateNestedManyWithoutVariantInput
    CartItem?: CartItemUncheckedCreateNestedManyWithoutProductVariantInput
    CartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantCreateOrConnectWithoutProductAttributeInput = {
    where: ProductVariantWhereUniqueInput
    create: XOR<ProductVariantCreateWithoutProductAttributeInput, ProductVariantUncheckedCreateWithoutProductAttributeInput>
  }

  export type VariantTypesCreateWithoutProductAttributeInput = {
    value: string
    typeProduct: $Enums.TypeProduct
    categories?: CategoryCreateNestedManyWithoutVariantTypesInput
  }

  export type VariantTypesUncheckedCreateWithoutProductAttributeInput = {
    id?: number
    value: string
    typeProduct: $Enums.TypeProduct
    categories?: CategoryUncheckedCreateNestedManyWithoutVariantTypesInput
  }

  export type VariantTypesCreateOrConnectWithoutProductAttributeInput = {
    where: VariantTypesWhereUniqueInput
    create: XOR<VariantTypesCreateWithoutProductAttributeInput, VariantTypesUncheckedCreateWithoutProductAttributeInput>
  }

  export type ProductVariantUpsertWithoutProductAttributeInput = {
    update: XOR<ProductVariantUpdateWithoutProductAttributeInput, ProductVariantUncheckedUpdateWithoutProductAttributeInput>
    create: XOR<ProductVariantCreateWithoutProductAttributeInput, ProductVariantUncheckedCreateWithoutProductAttributeInput>
    where?: ProductVariantWhereInput
  }

  export type ProductVariantUpdateToOneWithWhereWithoutProductAttributeInput = {
    where?: ProductVariantWhereInput
    data: XOR<ProductVariantUpdateWithoutProductAttributeInput, ProductVariantUncheckedUpdateWithoutProductAttributeInput>
  }

  export type ProductVariantUpdateWithoutProductAttributeInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    priceKit?: NullableIntFieldUpdateOperationsInput | number | null
    parameter?: ParametersUpdateOneWithoutProductVariantNestedInput
    sizes?: SizesUpdateManyWithoutProductVariantNestedInput
    Product?: ProductUpdateOneRequiredWithoutProductVariantNestedInput
    subProduct?: SubProductUpdateManyWithoutParentVariantNestedInput
    parentSubProduct?: SubProductUpdateManyWithoutVariantNestedInput
    CartItem?: CartItemUpdateManyWithoutProductVariantNestedInput
    CartSubProduct?: CartSubProductUpdateManyWithoutVariantNestedInput
  }

  export type ProductVariantUncheckedUpdateWithoutProductAttributeInput = {
    id?: IntFieldUpdateOperationsInput | number
    parameterId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    priceKit?: NullableIntFieldUpdateOperationsInput | number | null
    sizes?: SizesUncheckedUpdateManyWithoutProductVariantNestedInput
    subProduct?: SubProductUncheckedUpdateManyWithoutParentVariantNestedInput
    parentSubProduct?: SubProductUncheckedUpdateManyWithoutVariantNestedInput
    CartItem?: CartItemUncheckedUpdateManyWithoutProductVariantNestedInput
    CartSubProduct?: CartSubProductUncheckedUpdateManyWithoutVariantNestedInput
  }

  export type VariantTypesUpsertWithoutProductAttributeInput = {
    update: XOR<VariantTypesUpdateWithoutProductAttributeInput, VariantTypesUncheckedUpdateWithoutProductAttributeInput>
    create: XOR<VariantTypesCreateWithoutProductAttributeInput, VariantTypesUncheckedCreateWithoutProductAttributeInput>
    where?: VariantTypesWhereInput
  }

  export type VariantTypesUpdateToOneWithWhereWithoutProductAttributeInput = {
    where?: VariantTypesWhereInput
    data: XOR<VariantTypesUpdateWithoutProductAttributeInput, VariantTypesUncheckedUpdateWithoutProductAttributeInput>
  }

  export type VariantTypesUpdateWithoutProductAttributeInput = {
    value?: StringFieldUpdateOperationsInput | string
    typeProduct?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    categories?: CategoryUpdateManyWithoutVariantTypesNestedInput
  }

  export type VariantTypesUncheckedUpdateWithoutProductAttributeInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    typeProduct?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    categories?: CategoryUncheckedUpdateManyWithoutVariantTypesNestedInput
  }

  export type CategoryCreateWithoutVariantTypesInput = {
    name: string
    slug: string
    type: $Enums.TypeProduct
    createdAt?: Date | string
    updatedAt?: Date | string
    parameters?: ParametersCreateNestedManyWithoutCategoriesInput
    proportions?: ProportionsCreateNestedManyWithoutCategoriesInput
    ingredients?: IngredientCreateNestedManyWithoutCategoriesInput
    products?: ProductCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutVariantTypesInput = {
    id?: number
    name: string
    slug: string
    type: $Enums.TypeProduct
    createdAt?: Date | string
    updatedAt?: Date | string
    parameters?: ParametersUncheckedCreateNestedManyWithoutCategoriesInput
    proportions?: ProportionsUncheckedCreateNestedManyWithoutCategoriesInput
    ingredients?: IngredientUncheckedCreateNestedManyWithoutCategoriesInput
    products?: ProductUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutVariantTypesInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutVariantTypesInput, CategoryUncheckedCreateWithoutVariantTypesInput>
  }

  export type ProductAttributeCreateWithoutVariantTypesInput = {
    name?: string | null
    productVariant: ProductVariantCreateNestedOneWithoutProductAttributeInput
  }

  export type ProductAttributeUncheckedCreateWithoutVariantTypesInput = {
    id?: number
    name?: string | null
    productVariantId: number
  }

  export type ProductAttributeCreateOrConnectWithoutVariantTypesInput = {
    where: ProductAttributeWhereUniqueInput
    create: XOR<ProductAttributeCreateWithoutVariantTypesInput, ProductAttributeUncheckedCreateWithoutVariantTypesInput>
  }

  export type ProductAttributeCreateManyVariantTypesInputEnvelope = {
    data: ProductAttributeCreateManyVariantTypesInput | ProductAttributeCreateManyVariantTypesInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithWhereUniqueWithoutVariantTypesInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutVariantTypesInput, CategoryUncheckedUpdateWithoutVariantTypesInput>
    create: XOR<CategoryCreateWithoutVariantTypesInput, CategoryUncheckedCreateWithoutVariantTypesInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutVariantTypesInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutVariantTypesInput, CategoryUncheckedUpdateWithoutVariantTypesInput>
  }

  export type CategoryUpdateManyWithWhereWithoutVariantTypesInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutVariantTypesInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    OR?: CategoryScalarWhereInput[]
    NOT?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    slug?: StringFilter<"Category"> | string
    type?: EnumTypeProductFilter<"Category"> | $Enums.TypeProduct
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
  }

  export type ProductAttributeUpsertWithWhereUniqueWithoutVariantTypesInput = {
    where: ProductAttributeWhereUniqueInput
    update: XOR<ProductAttributeUpdateWithoutVariantTypesInput, ProductAttributeUncheckedUpdateWithoutVariantTypesInput>
    create: XOR<ProductAttributeCreateWithoutVariantTypesInput, ProductAttributeUncheckedCreateWithoutVariantTypesInput>
  }

  export type ProductAttributeUpdateWithWhereUniqueWithoutVariantTypesInput = {
    where: ProductAttributeWhereUniqueInput
    data: XOR<ProductAttributeUpdateWithoutVariantTypesInput, ProductAttributeUncheckedUpdateWithoutVariantTypesInput>
  }

  export type ProductAttributeUpdateManyWithWhereWithoutVariantTypesInput = {
    where: ProductAttributeScalarWhereInput
    data: XOR<ProductAttributeUpdateManyMutationInput, ProductAttributeUncheckedUpdateManyWithoutVariantTypesInput>
  }

  export type ProductAttributeScalarWhereInput = {
    AND?: ProductAttributeScalarWhereInput | ProductAttributeScalarWhereInput[]
    OR?: ProductAttributeScalarWhereInput[]
    NOT?: ProductAttributeScalarWhereInput | ProductAttributeScalarWhereInput[]
    id?: IntFilter<"ProductAttribute"> | number
    name?: StringNullableFilter<"ProductAttribute"> | string | null
    productVariantId?: IntFilter<"ProductAttribute"> | number
    variantTypesId?: IntNullableFilter<"ProductAttribute"> | number | null
  }

  export type CategoryCreateWithoutParametersInput = {
    name: string
    slug: string
    type: $Enums.TypeProduct
    createdAt?: Date | string
    updatedAt?: Date | string
    proportions?: ProportionsCreateNestedManyWithoutCategoriesInput
    ingredients?: IngredientCreateNestedManyWithoutCategoriesInput
    products?: ProductCreateNestedManyWithoutCategoryInput
    variantTypes?: VariantTypesCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutParametersInput = {
    id?: number
    name: string
    slug: string
    type: $Enums.TypeProduct
    createdAt?: Date | string
    updatedAt?: Date | string
    proportions?: ProportionsUncheckedCreateNestedManyWithoutCategoriesInput
    ingredients?: IngredientUncheckedCreateNestedManyWithoutCategoriesInput
    products?: ProductUncheckedCreateNestedManyWithoutCategoryInput
    variantTypes?: VariantTypesUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryCreateOrConnectWithoutParametersInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutParametersInput, CategoryUncheckedCreateWithoutParametersInput>
  }

  export type ProductVariantCreateWithoutParameterInput = {
    quantity?: number | null
    image: string
    priceKit?: number | null
    sizes?: SizesCreateNestedManyWithoutProductVariantInput
    productAttribute?: ProductAttributeCreateNestedOneWithoutProductVariantInput
    Product: ProductCreateNestedOneWithoutProductVariantInput
    subProduct?: SubProductCreateNestedManyWithoutParentVariantInput
    parentSubProduct?: SubProductCreateNestedManyWithoutVariantInput
    CartItem?: CartItemCreateNestedManyWithoutProductVariantInput
    CartSubProduct?: CartSubProductCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantUncheckedCreateWithoutParameterInput = {
    id?: number
    quantity?: number | null
    productId: number
    image: string
    priceKit?: number | null
    sizes?: SizesUncheckedCreateNestedManyWithoutProductVariantInput
    productAttribute?: ProductAttributeUncheckedCreateNestedOneWithoutProductVariantInput
    subProduct?: SubProductUncheckedCreateNestedManyWithoutParentVariantInput
    parentSubProduct?: SubProductUncheckedCreateNestedManyWithoutVariantInput
    CartItem?: CartItemUncheckedCreateNestedManyWithoutProductVariantInput
    CartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantCreateOrConnectWithoutParameterInput = {
    where: ProductVariantWhereUniqueInput
    create: XOR<ProductVariantCreateWithoutParameterInput, ProductVariantUncheckedCreateWithoutParameterInput>
  }

  export type ProductVariantCreateManyParameterInputEnvelope = {
    data: ProductVariantCreateManyParameterInput | ProductVariantCreateManyParameterInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithWhereUniqueWithoutParametersInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutParametersInput, CategoryUncheckedUpdateWithoutParametersInput>
    create: XOR<CategoryCreateWithoutParametersInput, CategoryUncheckedCreateWithoutParametersInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutParametersInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutParametersInput, CategoryUncheckedUpdateWithoutParametersInput>
  }

  export type CategoryUpdateManyWithWhereWithoutParametersInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutParametersInput>
  }

  export type ProductVariantUpsertWithWhereUniqueWithoutParameterInput = {
    where: ProductVariantWhereUniqueInput
    update: XOR<ProductVariantUpdateWithoutParameterInput, ProductVariantUncheckedUpdateWithoutParameterInput>
    create: XOR<ProductVariantCreateWithoutParameterInput, ProductVariantUncheckedCreateWithoutParameterInput>
  }

  export type ProductVariantUpdateWithWhereUniqueWithoutParameterInput = {
    where: ProductVariantWhereUniqueInput
    data: XOR<ProductVariantUpdateWithoutParameterInput, ProductVariantUncheckedUpdateWithoutParameterInput>
  }

  export type ProductVariantUpdateManyWithWhereWithoutParameterInput = {
    where: ProductVariantScalarWhereInput
    data: XOR<ProductVariantUpdateManyMutationInput, ProductVariantUncheckedUpdateManyWithoutParameterInput>
  }

  export type CategoryCreateWithoutProportionsInput = {
    name: string
    slug: string
    type: $Enums.TypeProduct
    createdAt?: Date | string
    updatedAt?: Date | string
    parameters?: ParametersCreateNestedManyWithoutCategoriesInput
    ingredients?: IngredientCreateNestedManyWithoutCategoriesInput
    products?: ProductCreateNestedManyWithoutCategoryInput
    variantTypes?: VariantTypesCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutProportionsInput = {
    id?: number
    name: string
    slug: string
    type: $Enums.TypeProduct
    createdAt?: Date | string
    updatedAt?: Date | string
    parameters?: ParametersUncheckedCreateNestedManyWithoutCategoriesInput
    ingredients?: IngredientUncheckedCreateNestedManyWithoutCategoriesInput
    products?: ProductUncheckedCreateNestedManyWithoutCategoryInput
    variantTypes?: VariantTypesUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryCreateOrConnectWithoutProportionsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutProportionsInput, CategoryUncheckedCreateWithoutProportionsInput>
  }

  export type SizesCreateWithoutProportionInput = {
    price: number
    weight?: string | null
    quantity?: number | null
    ingredients?: IngredientCreateNestedManyWithoutSizesInput
    productVariant: ProductVariantCreateNestedOneWithoutSizesInput
    SubProduct?: SubProductCreateNestedManyWithoutSizeInput
    CartItem?: CartItemCreateNestedManyWithoutSizeInput
    CartSubProduct?: CartSubProductCreateNestedManyWithoutSizeInput
  }

  export type SizesUncheckedCreateWithoutProportionInput = {
    id?: number
    price: number
    weight?: string | null
    productVariantId: number
    quantity?: number | null
    ingredients?: IngredientUncheckedCreateNestedManyWithoutSizesInput
    SubProduct?: SubProductUncheckedCreateNestedManyWithoutSizeInput
    CartItem?: CartItemUncheckedCreateNestedManyWithoutSizeInput
    CartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutSizeInput
  }

  export type SizesCreateOrConnectWithoutProportionInput = {
    where: SizesWhereUniqueInput
    create: XOR<SizesCreateWithoutProportionInput, SizesUncheckedCreateWithoutProportionInput>
  }

  export type SizesCreateManyProportionInputEnvelope = {
    data: SizesCreateManyProportionInput | SizesCreateManyProportionInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithWhereUniqueWithoutProportionsInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutProportionsInput, CategoryUncheckedUpdateWithoutProportionsInput>
    create: XOR<CategoryCreateWithoutProportionsInput, CategoryUncheckedCreateWithoutProportionsInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutProportionsInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutProportionsInput, CategoryUncheckedUpdateWithoutProportionsInput>
  }

  export type CategoryUpdateManyWithWhereWithoutProportionsInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutProportionsInput>
  }

  export type SizesUpsertWithWhereUniqueWithoutProportionInput = {
    where: SizesWhereUniqueInput
    update: XOR<SizesUpdateWithoutProportionInput, SizesUncheckedUpdateWithoutProportionInput>
    create: XOR<SizesCreateWithoutProportionInput, SizesUncheckedCreateWithoutProportionInput>
  }

  export type SizesUpdateWithWhereUniqueWithoutProportionInput = {
    where: SizesWhereUniqueInput
    data: XOR<SizesUpdateWithoutProportionInput, SizesUncheckedUpdateWithoutProportionInput>
  }

  export type SizesUpdateManyWithWhereWithoutProportionInput = {
    where: SizesScalarWhereInput
    data: XOR<SizesUpdateManyMutationInput, SizesUncheckedUpdateManyWithoutProportionInput>
  }

  export type ProportionsCreateWithoutSizesInput = {
    value: string
    categories?: CategoryCreateNestedManyWithoutProportionsInput
  }

  export type ProportionsUncheckedCreateWithoutSizesInput = {
    id?: number
    value: string
    categories?: CategoryUncheckedCreateNestedManyWithoutProportionsInput
  }

  export type ProportionsCreateOrConnectWithoutSizesInput = {
    where: ProportionsWhereUniqueInput
    create: XOR<ProportionsCreateWithoutSizesInput, ProportionsUncheckedCreateWithoutSizesInput>
  }

  export type IngredientCreateWithoutSizesInput = {
    name: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    categories?: CategoryCreateNestedManyWithoutIngredientsInput
    product?: ProductCreateNestedManyWithoutIngredientsInput
    cartItems?: CartItemCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientUncheckedCreateWithoutSizesInput = {
    id?: number
    name: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    categories?: CategoryUncheckedCreateNestedManyWithoutIngredientsInput
    product?: ProductUncheckedCreateNestedManyWithoutIngredientsInput
    cartItems?: CartItemUncheckedCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientCreateOrConnectWithoutSizesInput = {
    where: IngredientWhereUniqueInput
    create: XOR<IngredientCreateWithoutSizesInput, IngredientUncheckedCreateWithoutSizesInput>
  }

  export type ProductVariantCreateWithoutSizesInput = {
    quantity?: number | null
    image: string
    priceKit?: number | null
    parameter?: ParametersCreateNestedOneWithoutProductVariantInput
    productAttribute?: ProductAttributeCreateNestedOneWithoutProductVariantInput
    Product: ProductCreateNestedOneWithoutProductVariantInput
    subProduct?: SubProductCreateNestedManyWithoutParentVariantInput
    parentSubProduct?: SubProductCreateNestedManyWithoutVariantInput
    CartItem?: CartItemCreateNestedManyWithoutProductVariantInput
    CartSubProduct?: CartSubProductCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantUncheckedCreateWithoutSizesInput = {
    id?: number
    parameterId?: number | null
    quantity?: number | null
    productId: number
    image: string
    priceKit?: number | null
    productAttribute?: ProductAttributeUncheckedCreateNestedOneWithoutProductVariantInput
    subProduct?: SubProductUncheckedCreateNestedManyWithoutParentVariantInput
    parentSubProduct?: SubProductUncheckedCreateNestedManyWithoutVariantInput
    CartItem?: CartItemUncheckedCreateNestedManyWithoutProductVariantInput
    CartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantCreateOrConnectWithoutSizesInput = {
    where: ProductVariantWhereUniqueInput
    create: XOR<ProductVariantCreateWithoutSizesInput, ProductVariantUncheckedCreateWithoutSizesInput>
  }

  export type SubProductCreateWithoutSizeInput = {
    quantity?: number | null
    isReplace?: boolean
    createdAt?: Date | string
    product: ProductCreateNestedOneWithoutSubProductInput
    variant: ProductVariantCreateNestedOneWithoutParentSubProductInput
    parentVariant: ProductVariantCreateNestedOneWithoutSubProductInput
  }

  export type SubProductUncheckedCreateWithoutSizeInput = {
    id?: number
    productId: number
    variantId: number
    parentVariantId: number
    quantity?: number | null
    isReplace?: boolean
    createdAt?: Date | string
  }

  export type SubProductCreateOrConnectWithoutSizeInput = {
    where: SubProductWhereUniqueInput
    create: XOR<SubProductCreateWithoutSizeInput, SubProductUncheckedCreateWithoutSizeInput>
  }

  export type SubProductCreateManySizeInputEnvelope = {
    data: SubProductCreateManySizeInput | SubProductCreateManySizeInput[]
    skipDuplicates?: boolean
  }

  export type CartItemCreateWithoutSizeInput = {
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cart: CartCreateNestedOneWithoutItemsInput
    product: ProductCreateNestedOneWithoutCartItemInput
    productVariant?: ProductVariantCreateNestedOneWithoutCartItemInput
    ingredients?: IngredientCreateNestedManyWithoutCartItemsInput
    cartSubProduct?: CartSubProductCreateNestedManyWithoutCartItemInput
  }

  export type CartItemUncheckedCreateWithoutSizeInput = {
    id?: number
    cartId: number
    productVariantId?: number | null
    productId: number
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ingredients?: IngredientUncheckedCreateNestedManyWithoutCartItemsInput
    cartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutCartItemInput
  }

  export type CartItemCreateOrConnectWithoutSizeInput = {
    where: CartItemWhereUniqueInput
    create: XOR<CartItemCreateWithoutSizeInput, CartItemUncheckedCreateWithoutSizeInput>
  }

  export type CartItemCreateManySizeInputEnvelope = {
    data: CartItemCreateManySizeInput | CartItemCreateManySizeInput[]
    skipDuplicates?: boolean
  }

  export type CartSubProductCreateWithoutSizeInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    index: number
    product: ProductCreateNestedOneWithoutCartSubProductInput
    variant: ProductVariantCreateNestedOneWithoutCartSubProductInput
    cartItem: CartItemCreateNestedOneWithoutCartSubProductInput
  }

  export type CartSubProductUncheckedCreateWithoutSizeInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subProductId: number
    variantId: number
    cartItemId: number
    index: number
  }

  export type CartSubProductCreateOrConnectWithoutSizeInput = {
    where: CartSubProductWhereUniqueInput
    create: XOR<CartSubProductCreateWithoutSizeInput, CartSubProductUncheckedCreateWithoutSizeInput>
  }

  export type CartSubProductCreateManySizeInputEnvelope = {
    data: CartSubProductCreateManySizeInput | CartSubProductCreateManySizeInput[]
    skipDuplicates?: boolean
  }

  export type ProportionsUpsertWithoutSizesInput = {
    update: XOR<ProportionsUpdateWithoutSizesInput, ProportionsUncheckedUpdateWithoutSizesInput>
    create: XOR<ProportionsCreateWithoutSizesInput, ProportionsUncheckedCreateWithoutSizesInput>
    where?: ProportionsWhereInput
  }

  export type ProportionsUpdateToOneWithWhereWithoutSizesInput = {
    where?: ProportionsWhereInput
    data: XOR<ProportionsUpdateWithoutSizesInput, ProportionsUncheckedUpdateWithoutSizesInput>
  }

  export type ProportionsUpdateWithoutSizesInput = {
    value?: StringFieldUpdateOperationsInput | string
    categories?: CategoryUpdateManyWithoutProportionsNestedInput
  }

  export type ProportionsUncheckedUpdateWithoutSizesInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    categories?: CategoryUncheckedUpdateManyWithoutProportionsNestedInput
  }

  export type IngredientUpsertWithWhereUniqueWithoutSizesInput = {
    where: IngredientWhereUniqueInput
    update: XOR<IngredientUpdateWithoutSizesInput, IngredientUncheckedUpdateWithoutSizesInput>
    create: XOR<IngredientCreateWithoutSizesInput, IngredientUncheckedCreateWithoutSizesInput>
  }

  export type IngredientUpdateWithWhereUniqueWithoutSizesInput = {
    where: IngredientWhereUniqueInput
    data: XOR<IngredientUpdateWithoutSizesInput, IngredientUncheckedUpdateWithoutSizesInput>
  }

  export type IngredientUpdateManyWithWhereWithoutSizesInput = {
    where: IngredientScalarWhereInput
    data: XOR<IngredientUpdateManyMutationInput, IngredientUncheckedUpdateManyWithoutSizesInput>
  }

  export type ProductVariantUpsertWithoutSizesInput = {
    update: XOR<ProductVariantUpdateWithoutSizesInput, ProductVariantUncheckedUpdateWithoutSizesInput>
    create: XOR<ProductVariantCreateWithoutSizesInput, ProductVariantUncheckedCreateWithoutSizesInput>
    where?: ProductVariantWhereInput
  }

  export type ProductVariantUpdateToOneWithWhereWithoutSizesInput = {
    where?: ProductVariantWhereInput
    data: XOR<ProductVariantUpdateWithoutSizesInput, ProductVariantUncheckedUpdateWithoutSizesInput>
  }

  export type ProductVariantUpdateWithoutSizesInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    priceKit?: NullableIntFieldUpdateOperationsInput | number | null
    parameter?: ParametersUpdateOneWithoutProductVariantNestedInput
    productAttribute?: ProductAttributeUpdateOneWithoutProductVariantNestedInput
    Product?: ProductUpdateOneRequiredWithoutProductVariantNestedInput
    subProduct?: SubProductUpdateManyWithoutParentVariantNestedInput
    parentSubProduct?: SubProductUpdateManyWithoutVariantNestedInput
    CartItem?: CartItemUpdateManyWithoutProductVariantNestedInput
    CartSubProduct?: CartSubProductUpdateManyWithoutVariantNestedInput
  }

  export type ProductVariantUncheckedUpdateWithoutSizesInput = {
    id?: IntFieldUpdateOperationsInput | number
    parameterId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    priceKit?: NullableIntFieldUpdateOperationsInput | number | null
    productAttribute?: ProductAttributeUncheckedUpdateOneWithoutProductVariantNestedInput
    subProduct?: SubProductUncheckedUpdateManyWithoutParentVariantNestedInput
    parentSubProduct?: SubProductUncheckedUpdateManyWithoutVariantNestedInput
    CartItem?: CartItemUncheckedUpdateManyWithoutProductVariantNestedInput
    CartSubProduct?: CartSubProductUncheckedUpdateManyWithoutVariantNestedInput
  }

  export type SubProductUpsertWithWhereUniqueWithoutSizeInput = {
    where: SubProductWhereUniqueInput
    update: XOR<SubProductUpdateWithoutSizeInput, SubProductUncheckedUpdateWithoutSizeInput>
    create: XOR<SubProductCreateWithoutSizeInput, SubProductUncheckedCreateWithoutSizeInput>
  }

  export type SubProductUpdateWithWhereUniqueWithoutSizeInput = {
    where: SubProductWhereUniqueInput
    data: XOR<SubProductUpdateWithoutSizeInput, SubProductUncheckedUpdateWithoutSizeInput>
  }

  export type SubProductUpdateManyWithWhereWithoutSizeInput = {
    where: SubProductScalarWhereInput
    data: XOR<SubProductUpdateManyMutationInput, SubProductUncheckedUpdateManyWithoutSizeInput>
  }

  export type CartItemUpsertWithWhereUniqueWithoutSizeInput = {
    where: CartItemWhereUniqueInput
    update: XOR<CartItemUpdateWithoutSizeInput, CartItemUncheckedUpdateWithoutSizeInput>
    create: XOR<CartItemCreateWithoutSizeInput, CartItemUncheckedCreateWithoutSizeInput>
  }

  export type CartItemUpdateWithWhereUniqueWithoutSizeInput = {
    where: CartItemWhereUniqueInput
    data: XOR<CartItemUpdateWithoutSizeInput, CartItemUncheckedUpdateWithoutSizeInput>
  }

  export type CartItemUpdateManyWithWhereWithoutSizeInput = {
    where: CartItemScalarWhereInput
    data: XOR<CartItemUpdateManyMutationInput, CartItemUncheckedUpdateManyWithoutSizeInput>
  }

  export type CartSubProductUpsertWithWhereUniqueWithoutSizeInput = {
    where: CartSubProductWhereUniqueInput
    update: XOR<CartSubProductUpdateWithoutSizeInput, CartSubProductUncheckedUpdateWithoutSizeInput>
    create: XOR<CartSubProductCreateWithoutSizeInput, CartSubProductUncheckedCreateWithoutSizeInput>
  }

  export type CartSubProductUpdateWithWhereUniqueWithoutSizeInput = {
    where: CartSubProductWhereUniqueInput
    data: XOR<CartSubProductUpdateWithoutSizeInput, CartSubProductUncheckedUpdateWithoutSizeInput>
  }

  export type CartSubProductUpdateManyWithWhereWithoutSizeInput = {
    where: CartSubProductScalarWhereInput
    data: XOR<CartSubProductUpdateManyMutationInput, CartSubProductUncheckedUpdateManyWithoutSizeInput>
  }

  export type CategoryCreateWithoutIngredientsInput = {
    name: string
    slug: string
    type: $Enums.TypeProduct
    createdAt?: Date | string
    updatedAt?: Date | string
    parameters?: ParametersCreateNestedManyWithoutCategoriesInput
    proportions?: ProportionsCreateNestedManyWithoutCategoriesInput
    products?: ProductCreateNestedManyWithoutCategoryInput
    variantTypes?: VariantTypesCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutIngredientsInput = {
    id?: number
    name: string
    slug: string
    type: $Enums.TypeProduct
    createdAt?: Date | string
    updatedAt?: Date | string
    parameters?: ParametersUncheckedCreateNestedManyWithoutCategoriesInput
    proportions?: ProportionsUncheckedCreateNestedManyWithoutCategoriesInput
    products?: ProductUncheckedCreateNestedManyWithoutCategoryInput
    variantTypes?: VariantTypesUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryCreateOrConnectWithoutIngredientsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutIngredientsInput, CategoryUncheckedCreateWithoutIngredientsInput>
  }

  export type SizesCreateWithoutIngredientsInput = {
    price: number
    weight?: string | null
    quantity?: number | null
    proportion: ProportionsCreateNestedOneWithoutSizesInput
    productVariant: ProductVariantCreateNestedOneWithoutSizesInput
    SubProduct?: SubProductCreateNestedManyWithoutSizeInput
    CartItem?: CartItemCreateNestedManyWithoutSizeInput
    CartSubProduct?: CartSubProductCreateNestedManyWithoutSizeInput
  }

  export type SizesUncheckedCreateWithoutIngredientsInput = {
    id?: number
    proportionId: number
    price: number
    weight?: string | null
    productVariantId: number
    quantity?: number | null
    SubProduct?: SubProductUncheckedCreateNestedManyWithoutSizeInput
    CartItem?: CartItemUncheckedCreateNestedManyWithoutSizeInput
    CartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutSizeInput
  }

  export type SizesCreateOrConnectWithoutIngredientsInput = {
    where: SizesWhereUniqueInput
    create: XOR<SizesCreateWithoutIngredientsInput, SizesUncheckedCreateWithoutIngredientsInput>
  }

  export type ProductCreateWithoutIngredientsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    description?: string | null
    type: $Enums.TypeProduct
    price?: number | null
    CartItem?: CartItemCreateNestedManyWithoutProductInput
    category: CategoryCreateNestedOneWithoutProductsInput
    productVariant?: ProductVariantCreateNestedManyWithoutProductInput
    subProduct?: SubProductCreateNestedManyWithoutProductInput
    CartSubProduct?: CartSubProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutIngredientsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    description?: string | null
    categoryId: number
    type: $Enums.TypeProduct
    price?: number | null
    CartItem?: CartItemUncheckedCreateNestedManyWithoutProductInput
    productVariant?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    subProduct?: SubProductUncheckedCreateNestedManyWithoutProductInput
    CartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutIngredientsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutIngredientsInput, ProductUncheckedCreateWithoutIngredientsInput>
  }

  export type CartItemCreateWithoutIngredientsInput = {
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cart: CartCreateNestedOneWithoutItemsInput
    product: ProductCreateNestedOneWithoutCartItemInput
    productVariant?: ProductVariantCreateNestedOneWithoutCartItemInput
    size?: SizesCreateNestedOneWithoutCartItemInput
    cartSubProduct?: CartSubProductCreateNestedManyWithoutCartItemInput
  }

  export type CartItemUncheckedCreateWithoutIngredientsInput = {
    id?: number
    cartId: number
    productVariantId?: number | null
    productId: number
    sizeId?: number | null
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutCartItemInput
  }

  export type CartItemCreateOrConnectWithoutIngredientsInput = {
    where: CartItemWhereUniqueInput
    create: XOR<CartItemCreateWithoutIngredientsInput, CartItemUncheckedCreateWithoutIngredientsInput>
  }

  export type CategoryUpsertWithWhereUniqueWithoutIngredientsInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutIngredientsInput, CategoryUncheckedUpdateWithoutIngredientsInput>
    create: XOR<CategoryCreateWithoutIngredientsInput, CategoryUncheckedCreateWithoutIngredientsInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutIngredientsInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutIngredientsInput, CategoryUncheckedUpdateWithoutIngredientsInput>
  }

  export type CategoryUpdateManyWithWhereWithoutIngredientsInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutIngredientsInput>
  }

  export type SizesUpsertWithWhereUniqueWithoutIngredientsInput = {
    where: SizesWhereUniqueInput
    update: XOR<SizesUpdateWithoutIngredientsInput, SizesUncheckedUpdateWithoutIngredientsInput>
    create: XOR<SizesCreateWithoutIngredientsInput, SizesUncheckedCreateWithoutIngredientsInput>
  }

  export type SizesUpdateWithWhereUniqueWithoutIngredientsInput = {
    where: SizesWhereUniqueInput
    data: XOR<SizesUpdateWithoutIngredientsInput, SizesUncheckedUpdateWithoutIngredientsInput>
  }

  export type SizesUpdateManyWithWhereWithoutIngredientsInput = {
    where: SizesScalarWhereInput
    data: XOR<SizesUpdateManyMutationInput, SizesUncheckedUpdateManyWithoutIngredientsInput>
  }

  export type ProductUpsertWithWhereUniqueWithoutIngredientsInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutIngredientsInput, ProductUncheckedUpdateWithoutIngredientsInput>
    create: XOR<ProductCreateWithoutIngredientsInput, ProductUncheckedCreateWithoutIngredientsInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutIngredientsInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutIngredientsInput, ProductUncheckedUpdateWithoutIngredientsInput>
  }

  export type ProductUpdateManyWithWhereWithoutIngredientsInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutIngredientsInput>
  }

  export type CartItemUpsertWithWhereUniqueWithoutIngredientsInput = {
    where: CartItemWhereUniqueInput
    update: XOR<CartItemUpdateWithoutIngredientsInput, CartItemUncheckedUpdateWithoutIngredientsInput>
    create: XOR<CartItemCreateWithoutIngredientsInput, CartItemUncheckedCreateWithoutIngredientsInput>
  }

  export type CartItemUpdateWithWhereUniqueWithoutIngredientsInput = {
    where: CartItemWhereUniqueInput
    data: XOR<CartItemUpdateWithoutIngredientsInput, CartItemUncheckedUpdateWithoutIngredientsInput>
  }

  export type CartItemUpdateManyWithWhereWithoutIngredientsInput = {
    where: CartItemScalarWhereInput
    data: XOR<CartItemUpdateManyMutationInput, CartItemUncheckedUpdateManyWithoutIngredientsInput>
  }

  export type UserCreateWithoutCartInput = {
    fullName?: string | null
    email: string
    password?: string | null
    role?: $Enums.UserRole | null
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    picture?: string | null
    method: $Enums.AuthMethod
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    verificationCode?: VerificationCodeCreateNestedOneWithoutUserInput
    deliveryAddress?: DeliveryAddressCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCartInput = {
    id?: number
    fullName?: string | null
    email: string
    password?: string | null
    role?: $Enums.UserRole | null
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    picture?: string | null
    method: $Enums.AuthMethod
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    verificationCode?: VerificationCodeUncheckedCreateNestedOneWithoutUserInput
    deliveryAddress?: DeliveryAddressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCartInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCartInput, UserUncheckedCreateWithoutCartInput>
  }

  export type CartItemCreateWithoutCartInput = {
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutCartItemInput
    productVariant?: ProductVariantCreateNestedOneWithoutCartItemInput
    size?: SizesCreateNestedOneWithoutCartItemInput
    ingredients?: IngredientCreateNestedManyWithoutCartItemsInput
    cartSubProduct?: CartSubProductCreateNestedManyWithoutCartItemInput
  }

  export type CartItemUncheckedCreateWithoutCartInput = {
    id?: number
    productVariantId?: number | null
    productId: number
    sizeId?: number | null
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ingredients?: IngredientUncheckedCreateNestedManyWithoutCartItemsInput
    cartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutCartItemInput
  }

  export type CartItemCreateOrConnectWithoutCartInput = {
    where: CartItemWhereUniqueInput
    create: XOR<CartItemCreateWithoutCartInput, CartItemUncheckedCreateWithoutCartInput>
  }

  export type CartItemCreateManyCartInputEnvelope = {
    data: CartItemCreateManyCartInput | CartItemCreateManyCartInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCartInput = {
    update: XOR<UserUpdateWithoutCartInput, UserUncheckedUpdateWithoutCartInput>
    create: XOR<UserCreateWithoutCartInput, UserUncheckedCreateWithoutCartInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCartInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCartInput, UserUncheckedUpdateWithoutCartInput>
  }

  export type UserUpdateWithoutCartInput = {
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    verificationCode?: VerificationCodeUpdateOneWithoutUserNestedInput
    deliveryAddress?: DeliveryAddressUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCartInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    verificationCode?: VerificationCodeUncheckedUpdateOneWithoutUserNestedInput
    deliveryAddress?: DeliveryAddressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CartItemUpsertWithWhereUniqueWithoutCartInput = {
    where: CartItemWhereUniqueInput
    update: XOR<CartItemUpdateWithoutCartInput, CartItemUncheckedUpdateWithoutCartInput>
    create: XOR<CartItemCreateWithoutCartInput, CartItemUncheckedCreateWithoutCartInput>
  }

  export type CartItemUpdateWithWhereUniqueWithoutCartInput = {
    where: CartItemWhereUniqueInput
    data: XOR<CartItemUpdateWithoutCartInput, CartItemUncheckedUpdateWithoutCartInput>
  }

  export type CartItemUpdateManyWithWhereWithoutCartInput = {
    where: CartItemScalarWhereInput
    data: XOR<CartItemUpdateManyMutationInput, CartItemUncheckedUpdateManyWithoutCartInput>
  }

  export type CartCreateWithoutItemsInput = {
    totalAmount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    amountGoods?: number
    user: UserCreateNestedOneWithoutCartInput
  }

  export type CartUncheckedCreateWithoutItemsInput = {
    id?: number
    userId: number
    totalAmount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    amountGoods?: number
  }

  export type CartCreateOrConnectWithoutItemsInput = {
    where: CartWhereUniqueInput
    create: XOR<CartCreateWithoutItemsInput, CartUncheckedCreateWithoutItemsInput>
  }

  export type ProductCreateWithoutCartItemInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    description?: string | null
    type: $Enums.TypeProduct
    price?: number | null
    ingredients?: IngredientCreateNestedManyWithoutProductInput
    category: CategoryCreateNestedOneWithoutProductsInput
    productVariant?: ProductVariantCreateNestedManyWithoutProductInput
    subProduct?: SubProductCreateNestedManyWithoutProductInput
    CartSubProduct?: CartSubProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutCartItemInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    description?: string | null
    categoryId: number
    type: $Enums.TypeProduct
    price?: number | null
    ingredients?: IngredientUncheckedCreateNestedManyWithoutProductInput
    productVariant?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    subProduct?: SubProductUncheckedCreateNestedManyWithoutProductInput
    CartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutCartItemInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutCartItemInput, ProductUncheckedCreateWithoutCartItemInput>
  }

  export type ProductVariantCreateWithoutCartItemInput = {
    quantity?: number | null
    image: string
    priceKit?: number | null
    parameter?: ParametersCreateNestedOneWithoutProductVariantInput
    sizes?: SizesCreateNestedManyWithoutProductVariantInput
    productAttribute?: ProductAttributeCreateNestedOneWithoutProductVariantInput
    Product: ProductCreateNestedOneWithoutProductVariantInput
    subProduct?: SubProductCreateNestedManyWithoutParentVariantInput
    parentSubProduct?: SubProductCreateNestedManyWithoutVariantInput
    CartSubProduct?: CartSubProductCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantUncheckedCreateWithoutCartItemInput = {
    id?: number
    parameterId?: number | null
    quantity?: number | null
    productId: number
    image: string
    priceKit?: number | null
    sizes?: SizesUncheckedCreateNestedManyWithoutProductVariantInput
    productAttribute?: ProductAttributeUncheckedCreateNestedOneWithoutProductVariantInput
    subProduct?: SubProductUncheckedCreateNestedManyWithoutParentVariantInput
    parentSubProduct?: SubProductUncheckedCreateNestedManyWithoutVariantInput
    CartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutVariantInput
  }

  export type ProductVariantCreateOrConnectWithoutCartItemInput = {
    where: ProductVariantWhereUniqueInput
    create: XOR<ProductVariantCreateWithoutCartItemInput, ProductVariantUncheckedCreateWithoutCartItemInput>
  }

  export type SizesCreateWithoutCartItemInput = {
    price: number
    weight?: string | null
    quantity?: number | null
    proportion: ProportionsCreateNestedOneWithoutSizesInput
    ingredients?: IngredientCreateNestedManyWithoutSizesInput
    productVariant: ProductVariantCreateNestedOneWithoutSizesInput
    SubProduct?: SubProductCreateNestedManyWithoutSizeInput
    CartSubProduct?: CartSubProductCreateNestedManyWithoutSizeInput
  }

  export type SizesUncheckedCreateWithoutCartItemInput = {
    id?: number
    proportionId: number
    price: number
    weight?: string | null
    productVariantId: number
    quantity?: number | null
    ingredients?: IngredientUncheckedCreateNestedManyWithoutSizesInput
    SubProduct?: SubProductUncheckedCreateNestedManyWithoutSizeInput
    CartSubProduct?: CartSubProductUncheckedCreateNestedManyWithoutSizeInput
  }

  export type SizesCreateOrConnectWithoutCartItemInput = {
    where: SizesWhereUniqueInput
    create: XOR<SizesCreateWithoutCartItemInput, SizesUncheckedCreateWithoutCartItemInput>
  }

  export type IngredientCreateWithoutCartItemsInput = {
    name: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    categories?: CategoryCreateNestedManyWithoutIngredientsInput
    sizes?: SizesCreateNestedManyWithoutIngredientsInput
    product?: ProductCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientUncheckedCreateWithoutCartItemsInput = {
    id?: number
    name: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    categories?: CategoryUncheckedCreateNestedManyWithoutIngredientsInput
    sizes?: SizesUncheckedCreateNestedManyWithoutIngredientsInput
    product?: ProductUncheckedCreateNestedManyWithoutIngredientsInput
  }

  export type IngredientCreateOrConnectWithoutCartItemsInput = {
    where: IngredientWhereUniqueInput
    create: XOR<IngredientCreateWithoutCartItemsInput, IngredientUncheckedCreateWithoutCartItemsInput>
  }

  export type CartSubProductCreateWithoutCartItemInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    index: number
    product: ProductCreateNestedOneWithoutCartSubProductInput
    variant: ProductVariantCreateNestedOneWithoutCartSubProductInput
    size: SizesCreateNestedOneWithoutCartSubProductInput
  }

  export type CartSubProductUncheckedCreateWithoutCartItemInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subProductId: number
    sizeId: number
    variantId: number
    index: number
  }

  export type CartSubProductCreateOrConnectWithoutCartItemInput = {
    where: CartSubProductWhereUniqueInput
    create: XOR<CartSubProductCreateWithoutCartItemInput, CartSubProductUncheckedCreateWithoutCartItemInput>
  }

  export type CartSubProductCreateManyCartItemInputEnvelope = {
    data: CartSubProductCreateManyCartItemInput | CartSubProductCreateManyCartItemInput[]
    skipDuplicates?: boolean
  }

  export type CartUpsertWithoutItemsInput = {
    update: XOR<CartUpdateWithoutItemsInput, CartUncheckedUpdateWithoutItemsInput>
    create: XOR<CartCreateWithoutItemsInput, CartUncheckedCreateWithoutItemsInput>
    where?: CartWhereInput
  }

  export type CartUpdateToOneWithWhereWithoutItemsInput = {
    where?: CartWhereInput
    data: XOR<CartUpdateWithoutItemsInput, CartUncheckedUpdateWithoutItemsInput>
  }

  export type CartUpdateWithoutItemsInput = {
    totalAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amountGoods?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutCartNestedInput
  }

  export type CartUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    totalAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amountGoods?: IntFieldUpdateOperationsInput | number
  }

  export type ProductUpsertWithoutCartItemInput = {
    update: XOR<ProductUpdateWithoutCartItemInput, ProductUncheckedUpdateWithoutCartItemInput>
    create: XOR<ProductCreateWithoutCartItemInput, ProductUncheckedCreateWithoutCartItemInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutCartItemInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutCartItemInput, ProductUncheckedUpdateWithoutCartItemInput>
  }

  export type ProductUpdateWithoutCartItemInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    price?: NullableIntFieldUpdateOperationsInput | number | null
    ingredients?: IngredientUpdateManyWithoutProductNestedInput
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    productVariant?: ProductVariantUpdateManyWithoutProductNestedInput
    subProduct?: SubProductUpdateManyWithoutProductNestedInput
    CartSubProduct?: CartSubProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutCartItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    price?: NullableIntFieldUpdateOperationsInput | number | null
    ingredients?: IngredientUncheckedUpdateManyWithoutProductNestedInput
    productVariant?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    subProduct?: SubProductUncheckedUpdateManyWithoutProductNestedInput
    CartSubProduct?: CartSubProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductVariantUpsertWithoutCartItemInput = {
    update: XOR<ProductVariantUpdateWithoutCartItemInput, ProductVariantUncheckedUpdateWithoutCartItemInput>
    create: XOR<ProductVariantCreateWithoutCartItemInput, ProductVariantUncheckedCreateWithoutCartItemInput>
    where?: ProductVariantWhereInput
  }

  export type ProductVariantUpdateToOneWithWhereWithoutCartItemInput = {
    where?: ProductVariantWhereInput
    data: XOR<ProductVariantUpdateWithoutCartItemInput, ProductVariantUncheckedUpdateWithoutCartItemInput>
  }

  export type ProductVariantUpdateWithoutCartItemInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    priceKit?: NullableIntFieldUpdateOperationsInput | number | null
    parameter?: ParametersUpdateOneWithoutProductVariantNestedInput
    sizes?: SizesUpdateManyWithoutProductVariantNestedInput
    productAttribute?: ProductAttributeUpdateOneWithoutProductVariantNestedInput
    Product?: ProductUpdateOneRequiredWithoutProductVariantNestedInput
    subProduct?: SubProductUpdateManyWithoutParentVariantNestedInput
    parentSubProduct?: SubProductUpdateManyWithoutVariantNestedInput
    CartSubProduct?: CartSubProductUpdateManyWithoutVariantNestedInput
  }

  export type ProductVariantUncheckedUpdateWithoutCartItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    parameterId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    priceKit?: NullableIntFieldUpdateOperationsInput | number | null
    sizes?: SizesUncheckedUpdateManyWithoutProductVariantNestedInput
    productAttribute?: ProductAttributeUncheckedUpdateOneWithoutProductVariantNestedInput
    subProduct?: SubProductUncheckedUpdateManyWithoutParentVariantNestedInput
    parentSubProduct?: SubProductUncheckedUpdateManyWithoutVariantNestedInput
    CartSubProduct?: CartSubProductUncheckedUpdateManyWithoutVariantNestedInput
  }

  export type SizesUpsertWithoutCartItemInput = {
    update: XOR<SizesUpdateWithoutCartItemInput, SizesUncheckedUpdateWithoutCartItemInput>
    create: XOR<SizesCreateWithoutCartItemInput, SizesUncheckedCreateWithoutCartItemInput>
    where?: SizesWhereInput
  }

  export type SizesUpdateToOneWithWhereWithoutCartItemInput = {
    where?: SizesWhereInput
    data: XOR<SizesUpdateWithoutCartItemInput, SizesUncheckedUpdateWithoutCartItemInput>
  }

  export type SizesUpdateWithoutCartItemInput = {
    price?: IntFieldUpdateOperationsInput | number
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    proportion?: ProportionsUpdateOneRequiredWithoutSizesNestedInput
    ingredients?: IngredientUpdateManyWithoutSizesNestedInput
    productVariant?: ProductVariantUpdateOneRequiredWithoutSizesNestedInput
    SubProduct?: SubProductUpdateManyWithoutSizeNestedInput
    CartSubProduct?: CartSubProductUpdateManyWithoutSizeNestedInput
  }

  export type SizesUncheckedUpdateWithoutCartItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    proportionId?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    productVariantId?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    ingredients?: IngredientUncheckedUpdateManyWithoutSizesNestedInput
    SubProduct?: SubProductUncheckedUpdateManyWithoutSizeNestedInput
    CartSubProduct?: CartSubProductUncheckedUpdateManyWithoutSizeNestedInput
  }

  export type IngredientUpsertWithWhereUniqueWithoutCartItemsInput = {
    where: IngredientWhereUniqueInput
    update: XOR<IngredientUpdateWithoutCartItemsInput, IngredientUncheckedUpdateWithoutCartItemsInput>
    create: XOR<IngredientCreateWithoutCartItemsInput, IngredientUncheckedCreateWithoutCartItemsInput>
  }

  export type IngredientUpdateWithWhereUniqueWithoutCartItemsInput = {
    where: IngredientWhereUniqueInput
    data: XOR<IngredientUpdateWithoutCartItemsInput, IngredientUncheckedUpdateWithoutCartItemsInput>
  }

  export type IngredientUpdateManyWithWhereWithoutCartItemsInput = {
    where: IngredientScalarWhereInput
    data: XOR<IngredientUpdateManyMutationInput, IngredientUncheckedUpdateManyWithoutCartItemsInput>
  }

  export type CartSubProductUpsertWithWhereUniqueWithoutCartItemInput = {
    where: CartSubProductWhereUniqueInput
    update: XOR<CartSubProductUpdateWithoutCartItemInput, CartSubProductUncheckedUpdateWithoutCartItemInput>
    create: XOR<CartSubProductCreateWithoutCartItemInput, CartSubProductUncheckedCreateWithoutCartItemInput>
  }

  export type CartSubProductUpdateWithWhereUniqueWithoutCartItemInput = {
    where: CartSubProductWhereUniqueInput
    data: XOR<CartSubProductUpdateWithoutCartItemInput, CartSubProductUncheckedUpdateWithoutCartItemInput>
  }

  export type CartSubProductUpdateManyWithWhereWithoutCartItemInput = {
    where: CartSubProductScalarWhereInput
    data: XOR<CartSubProductUpdateManyMutationInput, CartSubProductUncheckedUpdateManyWithoutCartItemInput>
  }

  export type ProductCreateWithoutCartSubProductInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    description?: string | null
    type: $Enums.TypeProduct
    price?: number | null
    ingredients?: IngredientCreateNestedManyWithoutProductInput
    CartItem?: CartItemCreateNestedManyWithoutProductInput
    category: CategoryCreateNestedOneWithoutProductsInput
    productVariant?: ProductVariantCreateNestedManyWithoutProductInput
    subProduct?: SubProductCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutCartSubProductInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    description?: string | null
    categoryId: number
    type: $Enums.TypeProduct
    price?: number | null
    ingredients?: IngredientUncheckedCreateNestedManyWithoutProductInput
    CartItem?: CartItemUncheckedCreateNestedManyWithoutProductInput
    productVariant?: ProductVariantUncheckedCreateNestedManyWithoutProductInput
    subProduct?: SubProductUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutCartSubProductInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutCartSubProductInput, ProductUncheckedCreateWithoutCartSubProductInput>
  }

  export type ProductVariantCreateWithoutCartSubProductInput = {
    quantity?: number | null
    image: string
    priceKit?: number | null
    parameter?: ParametersCreateNestedOneWithoutProductVariantInput
    sizes?: SizesCreateNestedManyWithoutProductVariantInput
    productAttribute?: ProductAttributeCreateNestedOneWithoutProductVariantInput
    Product: ProductCreateNestedOneWithoutProductVariantInput
    subProduct?: SubProductCreateNestedManyWithoutParentVariantInput
    parentSubProduct?: SubProductCreateNestedManyWithoutVariantInput
    CartItem?: CartItemCreateNestedManyWithoutProductVariantInput
  }

  export type ProductVariantUncheckedCreateWithoutCartSubProductInput = {
    id?: number
    parameterId?: number | null
    quantity?: number | null
    productId: number
    image: string
    priceKit?: number | null
    sizes?: SizesUncheckedCreateNestedManyWithoutProductVariantInput
    productAttribute?: ProductAttributeUncheckedCreateNestedOneWithoutProductVariantInput
    subProduct?: SubProductUncheckedCreateNestedManyWithoutParentVariantInput
    parentSubProduct?: SubProductUncheckedCreateNestedManyWithoutVariantInput
    CartItem?: CartItemUncheckedCreateNestedManyWithoutProductVariantInput
  }

  export type ProductVariantCreateOrConnectWithoutCartSubProductInput = {
    where: ProductVariantWhereUniqueInput
    create: XOR<ProductVariantCreateWithoutCartSubProductInput, ProductVariantUncheckedCreateWithoutCartSubProductInput>
  }

  export type SizesCreateWithoutCartSubProductInput = {
    price: number
    weight?: string | null
    quantity?: number | null
    proportion: ProportionsCreateNestedOneWithoutSizesInput
    ingredients?: IngredientCreateNestedManyWithoutSizesInput
    productVariant: ProductVariantCreateNestedOneWithoutSizesInput
    SubProduct?: SubProductCreateNestedManyWithoutSizeInput
    CartItem?: CartItemCreateNestedManyWithoutSizeInput
  }

  export type SizesUncheckedCreateWithoutCartSubProductInput = {
    id?: number
    proportionId: number
    price: number
    weight?: string | null
    productVariantId: number
    quantity?: number | null
    ingredients?: IngredientUncheckedCreateNestedManyWithoutSizesInput
    SubProduct?: SubProductUncheckedCreateNestedManyWithoutSizeInput
    CartItem?: CartItemUncheckedCreateNestedManyWithoutSizeInput
  }

  export type SizesCreateOrConnectWithoutCartSubProductInput = {
    where: SizesWhereUniqueInput
    create: XOR<SizesCreateWithoutCartSubProductInput, SizesUncheckedCreateWithoutCartSubProductInput>
  }

  export type CartItemCreateWithoutCartSubProductInput = {
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cart: CartCreateNestedOneWithoutItemsInput
    product: ProductCreateNestedOneWithoutCartItemInput
    productVariant?: ProductVariantCreateNestedOneWithoutCartItemInput
    size?: SizesCreateNestedOneWithoutCartItemInput
    ingredients?: IngredientCreateNestedManyWithoutCartItemsInput
  }

  export type CartItemUncheckedCreateWithoutCartSubProductInput = {
    id?: number
    cartId: number
    productVariantId?: number | null
    productId: number
    sizeId?: number | null
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    ingredients?: IngredientUncheckedCreateNestedManyWithoutCartItemsInput
  }

  export type CartItemCreateOrConnectWithoutCartSubProductInput = {
    where: CartItemWhereUniqueInput
    create: XOR<CartItemCreateWithoutCartSubProductInput, CartItemUncheckedCreateWithoutCartSubProductInput>
  }

  export type ProductUpsertWithoutCartSubProductInput = {
    update: XOR<ProductUpdateWithoutCartSubProductInput, ProductUncheckedUpdateWithoutCartSubProductInput>
    create: XOR<ProductCreateWithoutCartSubProductInput, ProductUncheckedCreateWithoutCartSubProductInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutCartSubProductInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutCartSubProductInput, ProductUncheckedUpdateWithoutCartSubProductInput>
  }

  export type ProductUpdateWithoutCartSubProductInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    price?: NullableIntFieldUpdateOperationsInput | number | null
    ingredients?: IngredientUpdateManyWithoutProductNestedInput
    CartItem?: CartItemUpdateManyWithoutProductNestedInput
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    productVariant?: ProductVariantUpdateManyWithoutProductNestedInput
    subProduct?: SubProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutCartSubProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    price?: NullableIntFieldUpdateOperationsInput | number | null
    ingredients?: IngredientUncheckedUpdateManyWithoutProductNestedInput
    CartItem?: CartItemUncheckedUpdateManyWithoutProductNestedInput
    productVariant?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    subProduct?: SubProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductVariantUpsertWithoutCartSubProductInput = {
    update: XOR<ProductVariantUpdateWithoutCartSubProductInput, ProductVariantUncheckedUpdateWithoutCartSubProductInput>
    create: XOR<ProductVariantCreateWithoutCartSubProductInput, ProductVariantUncheckedCreateWithoutCartSubProductInput>
    where?: ProductVariantWhereInput
  }

  export type ProductVariantUpdateToOneWithWhereWithoutCartSubProductInput = {
    where?: ProductVariantWhereInput
    data: XOR<ProductVariantUpdateWithoutCartSubProductInput, ProductVariantUncheckedUpdateWithoutCartSubProductInput>
  }

  export type ProductVariantUpdateWithoutCartSubProductInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    priceKit?: NullableIntFieldUpdateOperationsInput | number | null
    parameter?: ParametersUpdateOneWithoutProductVariantNestedInput
    sizes?: SizesUpdateManyWithoutProductVariantNestedInput
    productAttribute?: ProductAttributeUpdateOneWithoutProductVariantNestedInput
    Product?: ProductUpdateOneRequiredWithoutProductVariantNestedInput
    subProduct?: SubProductUpdateManyWithoutParentVariantNestedInput
    parentSubProduct?: SubProductUpdateManyWithoutVariantNestedInput
    CartItem?: CartItemUpdateManyWithoutProductVariantNestedInput
  }

  export type ProductVariantUncheckedUpdateWithoutCartSubProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    parameterId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    priceKit?: NullableIntFieldUpdateOperationsInput | number | null
    sizes?: SizesUncheckedUpdateManyWithoutProductVariantNestedInput
    productAttribute?: ProductAttributeUncheckedUpdateOneWithoutProductVariantNestedInput
    subProduct?: SubProductUncheckedUpdateManyWithoutParentVariantNestedInput
    parentSubProduct?: SubProductUncheckedUpdateManyWithoutVariantNestedInput
    CartItem?: CartItemUncheckedUpdateManyWithoutProductVariantNestedInput
  }

  export type SizesUpsertWithoutCartSubProductInput = {
    update: XOR<SizesUpdateWithoutCartSubProductInput, SizesUncheckedUpdateWithoutCartSubProductInput>
    create: XOR<SizesCreateWithoutCartSubProductInput, SizesUncheckedCreateWithoutCartSubProductInput>
    where?: SizesWhereInput
  }

  export type SizesUpdateToOneWithWhereWithoutCartSubProductInput = {
    where?: SizesWhereInput
    data: XOR<SizesUpdateWithoutCartSubProductInput, SizesUncheckedUpdateWithoutCartSubProductInput>
  }

  export type SizesUpdateWithoutCartSubProductInput = {
    price?: IntFieldUpdateOperationsInput | number
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    proportion?: ProportionsUpdateOneRequiredWithoutSizesNestedInput
    ingredients?: IngredientUpdateManyWithoutSizesNestedInput
    productVariant?: ProductVariantUpdateOneRequiredWithoutSizesNestedInput
    SubProduct?: SubProductUpdateManyWithoutSizeNestedInput
    CartItem?: CartItemUpdateManyWithoutSizeNestedInput
  }

  export type SizesUncheckedUpdateWithoutCartSubProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    proportionId?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    productVariantId?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    ingredients?: IngredientUncheckedUpdateManyWithoutSizesNestedInput
    SubProduct?: SubProductUncheckedUpdateManyWithoutSizeNestedInput
    CartItem?: CartItemUncheckedUpdateManyWithoutSizeNestedInput
  }

  export type CartItemUpsertWithoutCartSubProductInput = {
    update: XOR<CartItemUpdateWithoutCartSubProductInput, CartItemUncheckedUpdateWithoutCartSubProductInput>
    create: XOR<CartItemCreateWithoutCartSubProductInput, CartItemUncheckedCreateWithoutCartSubProductInput>
    where?: CartItemWhereInput
  }

  export type CartItemUpdateToOneWithWhereWithoutCartSubProductInput = {
    where?: CartItemWhereInput
    data: XOR<CartItemUpdateWithoutCartSubProductInput, CartItemUncheckedUpdateWithoutCartSubProductInput>
  }

  export type CartItemUpdateWithoutCartSubProductInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cart?: CartUpdateOneRequiredWithoutItemsNestedInput
    product?: ProductUpdateOneRequiredWithoutCartItemNestedInput
    productVariant?: ProductVariantUpdateOneWithoutCartItemNestedInput
    size?: SizesUpdateOneWithoutCartItemNestedInput
    ingredients?: IngredientUpdateManyWithoutCartItemsNestedInput
  }

  export type CartItemUncheckedUpdateWithoutCartSubProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    cartId?: IntFieldUpdateOperationsInput | number
    productVariantId?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: IntFieldUpdateOperationsInput | number
    sizeId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ingredients?: IngredientUncheckedUpdateManyWithoutCartItemsNestedInput
  }

  export type UserCreateWithoutOrdersInput = {
    fullName?: string | null
    email: string
    password?: string | null
    role?: $Enums.UserRole | null
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    picture?: string | null
    method: $Enums.AuthMethod
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    cart?: CartCreateNestedOneWithoutUserInput
    verificationCode?: VerificationCodeCreateNestedOneWithoutUserInput
    deliveryAddress?: DeliveryAddressCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrdersInput = {
    id?: number
    fullName?: string | null
    email: string
    password?: string | null
    role?: $Enums.UserRole | null
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    picture?: string | null
    method: $Enums.AuthMethod
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    cart?: CartUncheckedCreateNestedOneWithoutUserInput
    verificationCode?: VerificationCodeUncheckedCreateNestedOneWithoutUserInput
    deliveryAddress?: DeliveryAddressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
  }

  export type UserUpsertWithoutOrdersInput = {
    update: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
    create: XOR<UserCreateWithoutOrdersInput, UserUncheckedCreateWithoutOrdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrdersInput, UserUncheckedUpdateWithoutOrdersInput>
  }

  export type UserUpdateWithoutOrdersInput = {
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    cart?: CartUpdateOneWithoutUserNestedInput
    verificationCode?: VerificationCodeUpdateOneWithoutUserNestedInput
    deliveryAddress?: DeliveryAddressUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrdersInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    cart?: CartUncheckedUpdateOneWithoutUserNestedInput
    verificationCode?: VerificationCodeUncheckedUpdateOneWithoutUserNestedInput
    deliveryAddress?: DeliveryAddressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutDeliveryAddressInput = {
    fullName?: string | null
    email: string
    password?: string | null
    role?: $Enums.UserRole | null
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    picture?: string | null
    method: $Enums.AuthMethod
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    cart?: CartCreateNestedOneWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    verificationCode?: VerificationCodeCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDeliveryAddressInput = {
    id?: number
    fullName?: string | null
    email: string
    password?: string | null
    role?: $Enums.UserRole | null
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    picture?: string | null
    method: $Enums.AuthMethod
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    cart?: CartUncheckedCreateNestedOneWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    verificationCode?: VerificationCodeUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDeliveryAddressInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDeliveryAddressInput, UserUncheckedCreateWithoutDeliveryAddressInput>
  }

  export type UserUpsertWithoutDeliveryAddressInput = {
    update: XOR<UserUpdateWithoutDeliveryAddressInput, UserUncheckedUpdateWithoutDeliveryAddressInput>
    create: XOR<UserCreateWithoutDeliveryAddressInput, UserUncheckedCreateWithoutDeliveryAddressInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDeliveryAddressInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDeliveryAddressInput, UserUncheckedUpdateWithoutDeliveryAddressInput>
  }

  export type UserUpdateWithoutDeliveryAddressInput = {
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    cart?: CartUpdateOneWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    verificationCode?: VerificationCodeUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDeliveryAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    cart?: CartUncheckedUpdateOneWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    verificationCode?: VerificationCodeUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutVerificationCodeInput = {
    fullName?: string | null
    email: string
    password?: string | null
    role?: $Enums.UserRole | null
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    picture?: string | null
    method: $Enums.AuthMethod
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    cart?: CartCreateNestedOneWithoutUserInput
    orders?: OrderCreateNestedManyWithoutUserInput
    deliveryAddress?: DeliveryAddressCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutVerificationCodeInput = {
    id?: number
    fullName?: string | null
    email: string
    password?: string | null
    role?: $Enums.UserRole | null
    isVerified?: boolean
    isTwoFactorEnabled?: boolean
    picture?: string | null
    method: $Enums.AuthMethod
    phone?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    cart?: CartUncheckedCreateNestedOneWithoutUserInput
    orders?: OrderUncheckedCreateNestedManyWithoutUserInput
    deliveryAddress?: DeliveryAddressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutVerificationCodeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutVerificationCodeInput, UserUncheckedCreateWithoutVerificationCodeInput>
  }

  export type UserUpsertWithoutVerificationCodeInput = {
    update: XOR<UserUpdateWithoutVerificationCodeInput, UserUncheckedUpdateWithoutVerificationCodeInput>
    create: XOR<UserCreateWithoutVerificationCodeInput, UserUncheckedCreateWithoutVerificationCodeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutVerificationCodeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutVerificationCodeInput, UserUncheckedUpdateWithoutVerificationCodeInput>
  }

  export type UserUpdateWithoutVerificationCodeInput = {
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    cart?: CartUpdateOneWithoutUserNestedInput
    orders?: OrderUpdateManyWithoutUserNestedInput
    deliveryAddress?: DeliveryAddressUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutVerificationCodeInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    isTwoFactorEnabled?: BoolFieldUpdateOperationsInput | boolean
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    method?: EnumAuthMethodFieldUpdateOperationsInput | $Enums.AuthMethod
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    cart?: CartUncheckedUpdateOneWithoutUserNestedInput
    orders?: OrderUncheckedUpdateManyWithoutUserNestedInput
    deliveryAddress?: DeliveryAddressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type StoryItemCreateWithoutStoryInput = {
    createdAt?: Date | string
    source: string
  }

  export type StoryItemUncheckedCreateWithoutStoryInput = {
    id?: number
    createdAt?: Date | string
    source: string
  }

  export type StoryItemCreateOrConnectWithoutStoryInput = {
    where: StoryItemWhereUniqueInput
    create: XOR<StoryItemCreateWithoutStoryInput, StoryItemUncheckedCreateWithoutStoryInput>
  }

  export type StoryItemCreateManyStoryInputEnvelope = {
    data: StoryItemCreateManyStoryInput | StoryItemCreateManyStoryInput[]
    skipDuplicates?: boolean
  }

  export type StoryItemUpsertWithWhereUniqueWithoutStoryInput = {
    where: StoryItemWhereUniqueInput
    update: XOR<StoryItemUpdateWithoutStoryInput, StoryItemUncheckedUpdateWithoutStoryInput>
    create: XOR<StoryItemCreateWithoutStoryInput, StoryItemUncheckedCreateWithoutStoryInput>
  }

  export type StoryItemUpdateWithWhereUniqueWithoutStoryInput = {
    where: StoryItemWhereUniqueInput
    data: XOR<StoryItemUpdateWithoutStoryInput, StoryItemUncheckedUpdateWithoutStoryInput>
  }

  export type StoryItemUpdateManyWithWhereWithoutStoryInput = {
    where: StoryItemScalarWhereInput
    data: XOR<StoryItemUpdateManyMutationInput, StoryItemUncheckedUpdateManyWithoutStoryInput>
  }

  export type StoryItemScalarWhereInput = {
    AND?: StoryItemScalarWhereInput | StoryItemScalarWhereInput[]
    OR?: StoryItemScalarWhereInput[]
    NOT?: StoryItemScalarWhereInput | StoryItemScalarWhereInput[]
    id?: IntFilter<"StoryItem"> | number
    storyId?: IntFilter<"StoryItem"> | number
    createdAt?: DateTimeFilter<"StoryItem"> | Date | string
    source?: StringFilter<"StoryItem"> | string
  }

  export type StoryCreateWithoutItemsInput = {
    createdAt?: Date | string
    previewImage: string
  }

  export type StoryUncheckedCreateWithoutItemsInput = {
    id?: number
    createdAt?: Date | string
    previewImage: string
  }

  export type StoryCreateOrConnectWithoutItemsInput = {
    where: StoryWhereUniqueInput
    create: XOR<StoryCreateWithoutItemsInput, StoryUncheckedCreateWithoutItemsInput>
  }

  export type StoryUpsertWithoutItemsInput = {
    update: XOR<StoryUpdateWithoutItemsInput, StoryUncheckedUpdateWithoutItemsInput>
    create: XOR<StoryCreateWithoutItemsInput, StoryUncheckedCreateWithoutItemsInput>
    where?: StoryWhereInput
  }

  export type StoryUpdateToOneWithWhereWithoutItemsInput = {
    where?: StoryWhereInput
    data: XOR<StoryUpdateWithoutItemsInput, StoryUncheckedUpdateWithoutItemsInput>
  }

  export type StoryUpdateWithoutItemsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    previewImage?: StringFieldUpdateOperationsInput | string
  }

  export type StoryUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    previewImage?: StringFieldUpdateOperationsInput | string
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    refreshToken?: string | null
    accessToken?: string | null
    expiresAt: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrderCreateManyUserInput = {
    id?: number
    totalAmount: number
    status?: $Enums.OrderStatus
    paymentId?: string | null
    email: string
    phone: string
    address: string
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    firstName: string
    items: JsonNullValueInput | InputJsonValue
  }

  export type DeliveryAddressCreateManyUserInput = {
    id?: number
    address: string
    isDefault?: boolean
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrderUpdateWithoutUserInput = {
    totalAmount?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
  }

  export type OrderUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalAmount?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
  }

  export type OrderUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    totalAmount?: IntFieldUpdateOperationsInput | number
    status?: EnumOrderStatusFieldUpdateOperationsInput | $Enums.OrderStatus
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    firstName?: StringFieldUpdateOperationsInput | string
    items?: JsonNullValueInput | InputJsonValue
  }

  export type DeliveryAddressUpdateWithoutUserInput = {
    address?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DeliveryAddressUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DeliveryAddressUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProductCreateManyCategoryInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    image: string
    description?: string | null
    type: $Enums.TypeProduct
    price?: number | null
  }

  export type ParametersUpdateWithoutCategoriesInput = {
    parameter?: StringFieldUpdateOperationsInput | string
    ProductVariant?: ProductVariantUpdateManyWithoutParameterNestedInput
  }

  export type ParametersUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    parameter?: StringFieldUpdateOperationsInput | string
    ProductVariant?: ProductVariantUncheckedUpdateManyWithoutParameterNestedInput
  }

  export type ParametersUncheckedUpdateManyWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    parameter?: StringFieldUpdateOperationsInput | string
  }

  export type ProportionsUpdateWithoutCategoriesInput = {
    value?: StringFieldUpdateOperationsInput | string
    sizes?: SizesUpdateManyWithoutProportionNestedInput
  }

  export type ProportionsUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    sizes?: SizesUncheckedUpdateManyWithoutProportionNestedInput
  }

  export type ProportionsUncheckedUpdateManyWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
  }

  export type IngredientUpdateWithoutCategoriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    sizes?: SizesUpdateManyWithoutIngredientsNestedInput
    product?: ProductUpdateManyWithoutIngredientsNestedInput
    cartItems?: CartItemUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    sizes?: SizesUncheckedUpdateManyWithoutIngredientsNestedInput
    product?: ProductUncheckedUpdateManyWithoutIngredientsNestedInput
    cartItems?: CartItemUncheckedUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientUncheckedUpdateManyWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type ProductUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    price?: NullableIntFieldUpdateOperationsInput | number | null
    ingredients?: IngredientUpdateManyWithoutProductNestedInput
    CartItem?: CartItemUpdateManyWithoutProductNestedInput
    productVariant?: ProductVariantUpdateManyWithoutProductNestedInput
    subProduct?: SubProductUpdateManyWithoutProductNestedInput
    CartSubProduct?: CartSubProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    price?: NullableIntFieldUpdateOperationsInput | number | null
    ingredients?: IngredientUncheckedUpdateManyWithoutProductNestedInput
    CartItem?: CartItemUncheckedUpdateManyWithoutProductNestedInput
    productVariant?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    subProduct?: SubProductUncheckedUpdateManyWithoutProductNestedInput
    CartSubProduct?: CartSubProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    price?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type VariantTypesUpdateWithoutCategoriesInput = {
    value?: StringFieldUpdateOperationsInput | string
    typeProduct?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    productAttribute?: ProductAttributeUpdateManyWithoutVariantTypesNestedInput
  }

  export type VariantTypesUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    typeProduct?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    productAttribute?: ProductAttributeUncheckedUpdateManyWithoutVariantTypesNestedInput
  }

  export type VariantTypesUncheckedUpdateManyWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    typeProduct?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
  }

  export type CartItemCreateManyProductInput = {
    id?: number
    cartId: number
    productVariantId?: number | null
    sizeId?: number | null
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductVariantCreateManyProductInput = {
    id?: number
    parameterId?: number | null
    quantity?: number | null
    image: string
    priceKit?: number | null
  }

  export type SubProductCreateManyProductInput = {
    id?: number
    variantId: number
    parentVariantId: number
    subSizeId: number
    quantity?: number | null
    isReplace?: boolean
    createdAt?: Date | string
  }

  export type CartSubProductCreateManyProductInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    sizeId: number
    variantId: number
    cartItemId: number
    index: number
  }

  export type IngredientUpdateWithoutProductInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    categories?: CategoryUpdateManyWithoutIngredientsNestedInput
    sizes?: SizesUpdateManyWithoutIngredientsNestedInput
    cartItems?: CartItemUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    categories?: CategoryUncheckedUpdateManyWithoutIngredientsNestedInput
    sizes?: SizesUncheckedUpdateManyWithoutIngredientsNestedInput
    cartItems?: CartItemUncheckedUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type CartItemUpdateWithoutProductInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cart?: CartUpdateOneRequiredWithoutItemsNestedInput
    productVariant?: ProductVariantUpdateOneWithoutCartItemNestedInput
    size?: SizesUpdateOneWithoutCartItemNestedInput
    ingredients?: IngredientUpdateManyWithoutCartItemsNestedInput
    cartSubProduct?: CartSubProductUpdateManyWithoutCartItemNestedInput
  }

  export type CartItemUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    cartId?: IntFieldUpdateOperationsInput | number
    productVariantId?: NullableIntFieldUpdateOperationsInput | number | null
    sizeId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ingredients?: IngredientUncheckedUpdateManyWithoutCartItemsNestedInput
    cartSubProduct?: CartSubProductUncheckedUpdateManyWithoutCartItemNestedInput
  }

  export type CartItemUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    cartId?: IntFieldUpdateOperationsInput | number
    productVariantId?: NullableIntFieldUpdateOperationsInput | number | null
    sizeId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductVariantUpdateWithoutProductInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    priceKit?: NullableIntFieldUpdateOperationsInput | number | null
    parameter?: ParametersUpdateOneWithoutProductVariantNestedInput
    sizes?: SizesUpdateManyWithoutProductVariantNestedInput
    productAttribute?: ProductAttributeUpdateOneWithoutProductVariantNestedInput
    subProduct?: SubProductUpdateManyWithoutParentVariantNestedInput
    parentSubProduct?: SubProductUpdateManyWithoutVariantNestedInput
    CartItem?: CartItemUpdateManyWithoutProductVariantNestedInput
    CartSubProduct?: CartSubProductUpdateManyWithoutVariantNestedInput
  }

  export type ProductVariantUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    parameterId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    priceKit?: NullableIntFieldUpdateOperationsInput | number | null
    sizes?: SizesUncheckedUpdateManyWithoutProductVariantNestedInput
    productAttribute?: ProductAttributeUncheckedUpdateOneWithoutProductVariantNestedInput
    subProduct?: SubProductUncheckedUpdateManyWithoutParentVariantNestedInput
    parentSubProduct?: SubProductUncheckedUpdateManyWithoutVariantNestedInput
    CartItem?: CartItemUncheckedUpdateManyWithoutProductVariantNestedInput
    CartSubProduct?: CartSubProductUncheckedUpdateManyWithoutVariantNestedInput
  }

  export type ProductVariantUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    parameterId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    priceKit?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SubProductUpdateWithoutProductInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    isReplace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    variant?: ProductVariantUpdateOneRequiredWithoutParentSubProductNestedInput
    parentVariant?: ProductVariantUpdateOneRequiredWithoutSubProductNestedInput
    size?: SizesUpdateOneRequiredWithoutSubProductNestedInput
  }

  export type SubProductUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    variantId?: IntFieldUpdateOperationsInput | number
    parentVariantId?: IntFieldUpdateOperationsInput | number
    subSizeId?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    isReplace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubProductUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    variantId?: IntFieldUpdateOperationsInput | number
    parentVariantId?: IntFieldUpdateOperationsInput | number
    subSizeId?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    isReplace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartSubProductUpdateWithoutProductInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    index?: IntFieldUpdateOperationsInput | number
    variant?: ProductVariantUpdateOneRequiredWithoutCartSubProductNestedInput
    size?: SizesUpdateOneRequiredWithoutCartSubProductNestedInput
    cartItem?: CartItemUpdateOneRequiredWithoutCartSubProductNestedInput
  }

  export type CartSubProductUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sizeId?: IntFieldUpdateOperationsInput | number
    variantId?: IntFieldUpdateOperationsInput | number
    cartItemId?: IntFieldUpdateOperationsInput | number
    index?: IntFieldUpdateOperationsInput | number
  }

  export type CartSubProductUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sizeId?: IntFieldUpdateOperationsInput | number
    variantId?: IntFieldUpdateOperationsInput | number
    cartItemId?: IntFieldUpdateOperationsInput | number
    index?: IntFieldUpdateOperationsInput | number
  }

  export type SizesCreateManyProductVariantInput = {
    id?: number
    proportionId: number
    price: number
    weight?: string | null
    quantity?: number | null
  }

  export type SubProductCreateManyParentVariantInput = {
    id?: number
    productId: number
    variantId: number
    subSizeId: number
    quantity?: number | null
    isReplace?: boolean
    createdAt?: Date | string
  }

  export type SubProductCreateManyVariantInput = {
    id?: number
    productId: number
    parentVariantId: number
    subSizeId: number
    quantity?: number | null
    isReplace?: boolean
    createdAt?: Date | string
  }

  export type CartItemCreateManyProductVariantInput = {
    id?: number
    cartId: number
    productId: number
    sizeId?: number | null
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CartSubProductCreateManyVariantInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subProductId: number
    sizeId: number
    cartItemId: number
    index: number
  }

  export type SizesUpdateWithoutProductVariantInput = {
    price?: IntFieldUpdateOperationsInput | number
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    proportion?: ProportionsUpdateOneRequiredWithoutSizesNestedInput
    ingredients?: IngredientUpdateManyWithoutSizesNestedInput
    SubProduct?: SubProductUpdateManyWithoutSizeNestedInput
    CartItem?: CartItemUpdateManyWithoutSizeNestedInput
    CartSubProduct?: CartSubProductUpdateManyWithoutSizeNestedInput
  }

  export type SizesUncheckedUpdateWithoutProductVariantInput = {
    id?: IntFieldUpdateOperationsInput | number
    proportionId?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    ingredients?: IngredientUncheckedUpdateManyWithoutSizesNestedInput
    SubProduct?: SubProductUncheckedUpdateManyWithoutSizeNestedInput
    CartItem?: CartItemUncheckedUpdateManyWithoutSizeNestedInput
    CartSubProduct?: CartSubProductUncheckedUpdateManyWithoutSizeNestedInput
  }

  export type SizesUncheckedUpdateManyWithoutProductVariantInput = {
    id?: IntFieldUpdateOperationsInput | number
    proportionId?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SubProductUpdateWithoutParentVariantInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    isReplace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutSubProductNestedInput
    variant?: ProductVariantUpdateOneRequiredWithoutParentSubProductNestedInput
    size?: SizesUpdateOneRequiredWithoutSubProductNestedInput
  }

  export type SubProductUncheckedUpdateWithoutParentVariantInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    variantId?: IntFieldUpdateOperationsInput | number
    subSizeId?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    isReplace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubProductUncheckedUpdateManyWithoutParentVariantInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    variantId?: IntFieldUpdateOperationsInput | number
    subSizeId?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    isReplace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubProductUpdateWithoutVariantInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    isReplace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutSubProductNestedInput
    parentVariant?: ProductVariantUpdateOneRequiredWithoutSubProductNestedInput
    size?: SizesUpdateOneRequiredWithoutSubProductNestedInput
  }

  export type SubProductUncheckedUpdateWithoutVariantInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    parentVariantId?: IntFieldUpdateOperationsInput | number
    subSizeId?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    isReplace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubProductUncheckedUpdateManyWithoutVariantInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    parentVariantId?: IntFieldUpdateOperationsInput | number
    subSizeId?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    isReplace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartItemUpdateWithoutProductVariantInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cart?: CartUpdateOneRequiredWithoutItemsNestedInput
    product?: ProductUpdateOneRequiredWithoutCartItemNestedInput
    size?: SizesUpdateOneWithoutCartItemNestedInput
    ingredients?: IngredientUpdateManyWithoutCartItemsNestedInput
    cartSubProduct?: CartSubProductUpdateManyWithoutCartItemNestedInput
  }

  export type CartItemUncheckedUpdateWithoutProductVariantInput = {
    id?: IntFieldUpdateOperationsInput | number
    cartId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    sizeId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ingredients?: IngredientUncheckedUpdateManyWithoutCartItemsNestedInput
    cartSubProduct?: CartSubProductUncheckedUpdateManyWithoutCartItemNestedInput
  }

  export type CartItemUncheckedUpdateManyWithoutProductVariantInput = {
    id?: IntFieldUpdateOperationsInput | number
    cartId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    sizeId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartSubProductUpdateWithoutVariantInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    index?: IntFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutCartSubProductNestedInput
    size?: SizesUpdateOneRequiredWithoutCartSubProductNestedInput
    cartItem?: CartItemUpdateOneRequiredWithoutCartSubProductNestedInput
  }

  export type CartSubProductUncheckedUpdateWithoutVariantInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subProductId?: IntFieldUpdateOperationsInput | number
    sizeId?: IntFieldUpdateOperationsInput | number
    cartItemId?: IntFieldUpdateOperationsInput | number
    index?: IntFieldUpdateOperationsInput | number
  }

  export type CartSubProductUncheckedUpdateManyWithoutVariantInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subProductId?: IntFieldUpdateOperationsInput | number
    sizeId?: IntFieldUpdateOperationsInput | number
    cartItemId?: IntFieldUpdateOperationsInput | number
    index?: IntFieldUpdateOperationsInput | number
  }

  export type ProductAttributeCreateManyVariantTypesInput = {
    id?: number
    name?: string | null
    productVariantId: number
  }

  export type CategoryUpdateWithoutVariantTypesInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parameters?: ParametersUpdateManyWithoutCategoriesNestedInput
    proportions?: ProportionsUpdateManyWithoutCategoriesNestedInput
    ingredients?: IngredientUpdateManyWithoutCategoriesNestedInput
    products?: ProductUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutVariantTypesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parameters?: ParametersUncheckedUpdateManyWithoutCategoriesNestedInput
    proportions?: ProportionsUncheckedUpdateManyWithoutCategoriesNestedInput
    ingredients?: IngredientUncheckedUpdateManyWithoutCategoriesNestedInput
    products?: ProductUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutVariantTypesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductAttributeUpdateWithoutVariantTypesInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    productVariant?: ProductVariantUpdateOneRequiredWithoutProductAttributeNestedInput
  }

  export type ProductAttributeUncheckedUpdateWithoutVariantTypesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    productVariantId?: IntFieldUpdateOperationsInput | number
  }

  export type ProductAttributeUncheckedUpdateManyWithoutVariantTypesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    productVariantId?: IntFieldUpdateOperationsInput | number
  }

  export type ProductVariantCreateManyParameterInput = {
    id?: number
    quantity?: number | null
    productId: number
    image: string
    priceKit?: number | null
  }

  export type CategoryUpdateWithoutParametersInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proportions?: ProportionsUpdateManyWithoutCategoriesNestedInput
    ingredients?: IngredientUpdateManyWithoutCategoriesNestedInput
    products?: ProductUpdateManyWithoutCategoryNestedInput
    variantTypes?: VariantTypesUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutParametersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proportions?: ProportionsUncheckedUpdateManyWithoutCategoriesNestedInput
    ingredients?: IngredientUncheckedUpdateManyWithoutCategoriesNestedInput
    products?: ProductUncheckedUpdateManyWithoutCategoryNestedInput
    variantTypes?: VariantTypesUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutParametersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductVariantUpdateWithoutParameterInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    image?: StringFieldUpdateOperationsInput | string
    priceKit?: NullableIntFieldUpdateOperationsInput | number | null
    sizes?: SizesUpdateManyWithoutProductVariantNestedInput
    productAttribute?: ProductAttributeUpdateOneWithoutProductVariantNestedInput
    Product?: ProductUpdateOneRequiredWithoutProductVariantNestedInput
    subProduct?: SubProductUpdateManyWithoutParentVariantNestedInput
    parentSubProduct?: SubProductUpdateManyWithoutVariantNestedInput
    CartItem?: CartItemUpdateManyWithoutProductVariantNestedInput
    CartSubProduct?: CartSubProductUpdateManyWithoutVariantNestedInput
  }

  export type ProductVariantUncheckedUpdateWithoutParameterInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    priceKit?: NullableIntFieldUpdateOperationsInput | number | null
    sizes?: SizesUncheckedUpdateManyWithoutProductVariantNestedInput
    productAttribute?: ProductAttributeUncheckedUpdateOneWithoutProductVariantNestedInput
    subProduct?: SubProductUncheckedUpdateManyWithoutParentVariantNestedInput
    parentSubProduct?: SubProductUncheckedUpdateManyWithoutVariantNestedInput
    CartItem?: CartItemUncheckedUpdateManyWithoutProductVariantNestedInput
    CartSubProduct?: CartSubProductUncheckedUpdateManyWithoutVariantNestedInput
  }

  export type ProductVariantUncheckedUpdateManyWithoutParameterInput = {
    id?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    priceKit?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SizesCreateManyProportionInput = {
    id?: number
    price: number
    weight?: string | null
    productVariantId: number
    quantity?: number | null
  }

  export type CategoryUpdateWithoutProportionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parameters?: ParametersUpdateManyWithoutCategoriesNestedInput
    ingredients?: IngredientUpdateManyWithoutCategoriesNestedInput
    products?: ProductUpdateManyWithoutCategoryNestedInput
    variantTypes?: VariantTypesUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutProportionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parameters?: ParametersUncheckedUpdateManyWithoutCategoriesNestedInput
    ingredients?: IngredientUncheckedUpdateManyWithoutCategoriesNestedInput
    products?: ProductUncheckedUpdateManyWithoutCategoryNestedInput
    variantTypes?: VariantTypesUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutProportionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizesUpdateWithoutProportionInput = {
    price?: IntFieldUpdateOperationsInput | number
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    ingredients?: IngredientUpdateManyWithoutSizesNestedInput
    productVariant?: ProductVariantUpdateOneRequiredWithoutSizesNestedInput
    SubProduct?: SubProductUpdateManyWithoutSizeNestedInput
    CartItem?: CartItemUpdateManyWithoutSizeNestedInput
    CartSubProduct?: CartSubProductUpdateManyWithoutSizeNestedInput
  }

  export type SizesUncheckedUpdateWithoutProportionInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    productVariantId?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    ingredients?: IngredientUncheckedUpdateManyWithoutSizesNestedInput
    SubProduct?: SubProductUncheckedUpdateManyWithoutSizeNestedInput
    CartItem?: CartItemUncheckedUpdateManyWithoutSizeNestedInput
    CartSubProduct?: CartSubProductUncheckedUpdateManyWithoutSizeNestedInput
  }

  export type SizesUncheckedUpdateManyWithoutProportionInput = {
    id?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    productVariantId?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SubProductCreateManySizeInput = {
    id?: number
    productId: number
    variantId: number
    parentVariantId: number
    quantity?: number | null
    isReplace?: boolean
    createdAt?: Date | string
  }

  export type CartItemCreateManySizeInput = {
    id?: number
    cartId: number
    productVariantId?: number | null
    productId: number
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CartSubProductCreateManySizeInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subProductId: number
    variantId: number
    cartItemId: number
    index: number
  }

  export type IngredientUpdateWithoutSizesInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    categories?: CategoryUpdateManyWithoutIngredientsNestedInput
    product?: ProductUpdateManyWithoutIngredientsNestedInput
    cartItems?: CartItemUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientUncheckedUpdateWithoutSizesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    categories?: CategoryUncheckedUpdateManyWithoutIngredientsNestedInput
    product?: ProductUncheckedUpdateManyWithoutIngredientsNestedInput
    cartItems?: CartItemUncheckedUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientUncheckedUpdateManyWithoutSizesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type SubProductUpdateWithoutSizeInput = {
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    isReplace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutSubProductNestedInput
    variant?: ProductVariantUpdateOneRequiredWithoutParentSubProductNestedInput
    parentVariant?: ProductVariantUpdateOneRequiredWithoutSubProductNestedInput
  }

  export type SubProductUncheckedUpdateWithoutSizeInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    variantId?: IntFieldUpdateOperationsInput | number
    parentVariantId?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    isReplace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubProductUncheckedUpdateManyWithoutSizeInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    variantId?: IntFieldUpdateOperationsInput | number
    parentVariantId?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    isReplace?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartItemUpdateWithoutSizeInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cart?: CartUpdateOneRequiredWithoutItemsNestedInput
    product?: ProductUpdateOneRequiredWithoutCartItemNestedInput
    productVariant?: ProductVariantUpdateOneWithoutCartItemNestedInput
    ingredients?: IngredientUpdateManyWithoutCartItemsNestedInput
    cartSubProduct?: CartSubProductUpdateManyWithoutCartItemNestedInput
  }

  export type CartItemUncheckedUpdateWithoutSizeInput = {
    id?: IntFieldUpdateOperationsInput | number
    cartId?: IntFieldUpdateOperationsInput | number
    productVariantId?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ingredients?: IngredientUncheckedUpdateManyWithoutCartItemsNestedInput
    cartSubProduct?: CartSubProductUncheckedUpdateManyWithoutCartItemNestedInput
  }

  export type CartItemUncheckedUpdateManyWithoutSizeInput = {
    id?: IntFieldUpdateOperationsInput | number
    cartId?: IntFieldUpdateOperationsInput | number
    productVariantId?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartSubProductUpdateWithoutSizeInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    index?: IntFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutCartSubProductNestedInput
    variant?: ProductVariantUpdateOneRequiredWithoutCartSubProductNestedInput
    cartItem?: CartItemUpdateOneRequiredWithoutCartSubProductNestedInput
  }

  export type CartSubProductUncheckedUpdateWithoutSizeInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subProductId?: IntFieldUpdateOperationsInput | number
    variantId?: IntFieldUpdateOperationsInput | number
    cartItemId?: IntFieldUpdateOperationsInput | number
    index?: IntFieldUpdateOperationsInput | number
  }

  export type CartSubProductUncheckedUpdateManyWithoutSizeInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subProductId?: IntFieldUpdateOperationsInput | number
    variantId?: IntFieldUpdateOperationsInput | number
    cartItemId?: IntFieldUpdateOperationsInput | number
    index?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryUpdateWithoutIngredientsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parameters?: ParametersUpdateManyWithoutCategoriesNestedInput
    proportions?: ProportionsUpdateManyWithoutCategoriesNestedInput
    products?: ProductUpdateManyWithoutCategoryNestedInput
    variantTypes?: VariantTypesUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutIngredientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parameters?: ParametersUncheckedUpdateManyWithoutCategoriesNestedInput
    proportions?: ProportionsUncheckedUpdateManyWithoutCategoriesNestedInput
    products?: ProductUncheckedUpdateManyWithoutCategoryNestedInput
    variantTypes?: VariantTypesUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutIngredientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SizesUpdateWithoutIngredientsInput = {
    price?: IntFieldUpdateOperationsInput | number
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    proportion?: ProportionsUpdateOneRequiredWithoutSizesNestedInput
    productVariant?: ProductVariantUpdateOneRequiredWithoutSizesNestedInput
    SubProduct?: SubProductUpdateManyWithoutSizeNestedInput
    CartItem?: CartItemUpdateManyWithoutSizeNestedInput
    CartSubProduct?: CartSubProductUpdateManyWithoutSizeNestedInput
  }

  export type SizesUncheckedUpdateWithoutIngredientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    proportionId?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    productVariantId?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    SubProduct?: SubProductUncheckedUpdateManyWithoutSizeNestedInput
    CartItem?: CartItemUncheckedUpdateManyWithoutSizeNestedInput
    CartSubProduct?: CartSubProductUncheckedUpdateManyWithoutSizeNestedInput
  }

  export type SizesUncheckedUpdateManyWithoutIngredientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    proportionId?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    weight?: NullableStringFieldUpdateOperationsInput | string | null
    productVariantId?: IntFieldUpdateOperationsInput | number
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProductUpdateWithoutIngredientsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    price?: NullableIntFieldUpdateOperationsInput | number | null
    CartItem?: CartItemUpdateManyWithoutProductNestedInput
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    productVariant?: ProductVariantUpdateManyWithoutProductNestedInput
    subProduct?: SubProductUpdateManyWithoutProductNestedInput
    CartSubProduct?: CartSubProductUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutIngredientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    price?: NullableIntFieldUpdateOperationsInput | number | null
    CartItem?: CartItemUncheckedUpdateManyWithoutProductNestedInput
    productVariant?: ProductVariantUncheckedUpdateManyWithoutProductNestedInput
    subProduct?: SubProductUncheckedUpdateManyWithoutProductNestedInput
    CartSubProduct?: CartSubProductUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutIngredientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: IntFieldUpdateOperationsInput | number
    type?: EnumTypeProductFieldUpdateOperationsInput | $Enums.TypeProduct
    price?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CartItemUpdateWithoutIngredientsInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cart?: CartUpdateOneRequiredWithoutItemsNestedInput
    product?: ProductUpdateOneRequiredWithoutCartItemNestedInput
    productVariant?: ProductVariantUpdateOneWithoutCartItemNestedInput
    size?: SizesUpdateOneWithoutCartItemNestedInput
    cartSubProduct?: CartSubProductUpdateManyWithoutCartItemNestedInput
  }

  export type CartItemUncheckedUpdateWithoutIngredientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    cartId?: IntFieldUpdateOperationsInput | number
    productVariantId?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: IntFieldUpdateOperationsInput | number
    sizeId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cartSubProduct?: CartSubProductUncheckedUpdateManyWithoutCartItemNestedInput
  }

  export type CartItemUncheckedUpdateManyWithoutIngredientsInput = {
    id?: IntFieldUpdateOperationsInput | number
    cartId?: IntFieldUpdateOperationsInput | number
    productVariantId?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: IntFieldUpdateOperationsInput | number
    sizeId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartItemCreateManyCartInput = {
    id?: number
    productVariantId?: number | null
    productId: number
    sizeId?: number | null
    quantity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CartItemUpdateWithoutCartInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutCartItemNestedInput
    productVariant?: ProductVariantUpdateOneWithoutCartItemNestedInput
    size?: SizesUpdateOneWithoutCartItemNestedInput
    ingredients?: IngredientUpdateManyWithoutCartItemsNestedInput
    cartSubProduct?: CartSubProductUpdateManyWithoutCartItemNestedInput
  }

  export type CartItemUncheckedUpdateWithoutCartInput = {
    id?: IntFieldUpdateOperationsInput | number
    productVariantId?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: IntFieldUpdateOperationsInput | number
    sizeId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ingredients?: IngredientUncheckedUpdateManyWithoutCartItemsNestedInput
    cartSubProduct?: CartSubProductUncheckedUpdateManyWithoutCartItemNestedInput
  }

  export type CartItemUncheckedUpdateManyWithoutCartInput = {
    id?: IntFieldUpdateOperationsInput | number
    productVariantId?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: IntFieldUpdateOperationsInput | number
    sizeId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CartSubProductCreateManyCartItemInput = {
    id?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    subProductId: number
    sizeId: number
    variantId: number
    index: number
  }

  export type IngredientUpdateWithoutCartItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    categories?: CategoryUpdateManyWithoutIngredientsNestedInput
    sizes?: SizesUpdateManyWithoutIngredientsNestedInput
    product?: ProductUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientUncheckedUpdateWithoutCartItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
    categories?: CategoryUncheckedUpdateManyWithoutIngredientsNestedInput
    sizes?: SizesUncheckedUpdateManyWithoutIngredientsNestedInput
    product?: ProductUncheckedUpdateManyWithoutIngredientsNestedInput
  }

  export type IngredientUncheckedUpdateManyWithoutCartItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type CartSubProductUpdateWithoutCartItemInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    index?: IntFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutCartSubProductNestedInput
    variant?: ProductVariantUpdateOneRequiredWithoutCartSubProductNestedInput
    size?: SizesUpdateOneRequiredWithoutCartSubProductNestedInput
  }

  export type CartSubProductUncheckedUpdateWithoutCartItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subProductId?: IntFieldUpdateOperationsInput | number
    sizeId?: IntFieldUpdateOperationsInput | number
    variantId?: IntFieldUpdateOperationsInput | number
    index?: IntFieldUpdateOperationsInput | number
  }

  export type CartSubProductUncheckedUpdateManyWithoutCartItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subProductId?: IntFieldUpdateOperationsInput | number
    sizeId?: IntFieldUpdateOperationsInput | number
    variantId?: IntFieldUpdateOperationsInput | number
    index?: IntFieldUpdateOperationsInput | number
  }

  export type StoryItemCreateManyStoryInput = {
    id?: number
    createdAt?: Date | string
    source: string
  }

  export type StoryItemUpdateWithoutStoryInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    source?: StringFieldUpdateOperationsInput | string
  }

  export type StoryItemUncheckedUpdateWithoutStoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    source?: StringFieldUpdateOperationsInput | string
  }

  export type StoryItemUncheckedUpdateManyWithoutStoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    source?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}